Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    TRUE
    VAR
    COMPARE
    FALSE

Grammar

Rule 0     S' -> program
Rule 1     program -> FCOMMENT block
Rule 2     block -> varDecl statement principal
Rule 3     principal -> PRINCIPAL LPARENT varDecl RPARENT SEMICOLOM block
Rule 4     principal -> PRINCIPAL LPARENT statement RPARENT SEMICOLOM block
Rule 5     principal -> empty
Rule 6     varDecl -> DEF LPARENT ID COMMA DATATYPE RPARENT SEMICOLOM block
Rule 7     varDecl -> DEF LPARENT ID COMMA DATATYPE COMMA expression RPARENT SEMICOLOM block
Rule 8     varDecl -> empty
Rule 9     identList -> ID
Rule 10    identList -> identList COMMA ID
Rule 11    statement -> ALTER LPARENT ID COMMA expression RPARENT SEMICOLOM block
Rule 12    statement -> CALL LPARENT ID RPARENT block
Rule 13    statement -> ISTRUE LPARENT ID RPARENT SEMICOLOM block
Rule 14    statement -> IF condition LPARENT statement RPARENT block
Rule 15    statement -> WHILE condition LPARENT statement RPARENT SEMICOLOM block
Rule 16    statement -> PROC ID LPARENT varDecl RPARENT SEMICOLOM block
Rule 17    statement -> PROC ID LPARENT statement RPARENT SEMICOLOM block
Rule 18    statement -> print block
Rule 19    statement -> MOVER LPARENT movimiento RPARENT SEMICOLOM block
Rule 20    statement -> comment block
Rule 21    statement -> ID LPARENT ID RPARENT SEMICOLOM block
Rule 22    statement -> ID LPARENT statement RPARENT SEMICOLOM block
Rule 23    statement -> ID LPARENT BOOLEAN RPARENT SEMICOLOM block
Rule 24    statement -> ID LPARENT expression RPARENT SEMICOLOM block
Rule 25    statement -> NOT LPARENT ID RPARENT SEMICOLOM block
Rule 26    statement -> ALEATORIO LPARENT RPARENT SEMICOLOM block
Rule 27    statement -> REPEAT LPARENT block RPARENT SEMICOLOM block
Rule 28    statement -> BREAK
Rule 29    statement -> UNTIL LPARENT block RPARENT condition SEMICOLOM block
Rule 30    statement -> CASE WHEN LPARENT condition RPARENT THEN LPARENT block RPARENT SEMICOLOM block
Rule 31    statement -> CASE WHEN LPARENT condition RPARENT THEN LPARENT block RPARENT ELSE LPARENT block RPARENT SEMICOLOM block
Rule 32    statement -> CASE ID whenloop SEMICOLOM block
Rule 33    statement -> CASE ID whenloop ELSE LPARENT block RPARENT SEMICOLOM block
Rule 34    statement -> empty
Rule 35    whenloop -> WHEN condition THEN LPARENT block RPARENT whenloop
Rule 36    whenloop -> empty
Rule 37    print -> PRINT LPARENT ID RPARENT SEMICOLOM block
Rule 38    print -> PRINT LPARENT STRING RPARENT SEMICOLOM block
Rule 39    print -> PRINT LPARENT expression RPARENT SEMICOLOM block
Rule 40    condition -> expression
Rule 41    condition -> expression relation expression
Rule 42    movimiento -> ATR
Rule 43    movimiento -> ADL
Rule 44    movimiento -> ADE
Rule 45    movimiento -> AIZ
Rule 46    movimiento -> IZQ
Rule 47    movimiento -> DER
Rule 48    movimiento -> DDE
Rule 49    movimiento -> DIZ
Rule 50    relation -> ASSIGN
Rule 51    relation -> NE
Rule 52    relation -> LT
Rule 53    relation -> GT
Rule 54    relation -> LTE
Rule 55    relation -> GTE
Rule 56    expression -> term
Rule 57    expression -> addingOperator term
Rule 58    expression -> expression addingOperator term
Rule 59    addingOperator -> PLUS
Rule 60    addingOperator -> MINUS
Rule 61    term -> factor
Rule 62    term -> term multiplyingOperator factor
Rule 63    multiplyingOperator -> TIMES
Rule 64    multiplyingOperator -> DIVIDE
Rule 65    DATATYPE -> INTEGERTP
Rule 66    DATATYPE -> BOOLEANTP
Rule 67    factor -> INTEGER
Rule 68    factor -> BOOLEAN
Rule 69    factor -> ID
Rule 70    factor -> LPARENT expression RPARENT
Rule 71    FCOMMENT -> COMMENT
Rule 72    comment -> COMMENT comment
Rule 73    comment -> empty
Rule 74    empty -> <empty>

Terminals, with rules where they appear

ADE                  : 44
ADL                  : 43
AIZ                  : 45
ALEATORIO            : 26
ALTER                : 11
ASSIGN               : 50
ATR                  : 42
BOOLEAN              : 23 68
BOOLEANTP            : 66
BREAK                : 28
CALL                 : 12
CASE                 : 30 31 32 33
COMMA                : 6 7 7 10 11
COMMENT              : 71 72
COMPARE              : 
DDE                  : 48
DEF                  : 6 7
DER                  : 47
DIVIDE               : 64
DIZ                  : 49
ELSE                 : 31 33
FALSE                : 
GT                   : 53
GTE                  : 55
ID                   : 6 7 9 10 11 12 13 16 17 21 21 22 23 24 25 32 33 37 69
IF                   : 14
INTEGER              : 67
INTEGERTP            : 65
ISTRUE               : 13
IZQ                  : 46
LPARENT              : 3 4 6 7 11 12 13 14 15 16 17 19 21 22 23 24 25 26 27 29 30 30 31 31 31 33 35 37 38 39 70
LT                   : 52
LTE                  : 54
MINUS                : 60
MOVER                : 19
NE                   : 51
NOT                  : 25
PLUS                 : 59
PRINCIPAL            : 3 4
PRINT                : 37 38 39
PROC                 : 16 17
REPEAT               : 27
RPARENT              : 3 4 6 7 11 12 13 14 15 16 17 19 21 22 23 24 25 26 27 29 30 30 31 31 31 33 35 37 38 39 70
SEMICOLOM            : 3 4 6 7 11 13 15 16 17 19 21 22 23 24 25 26 27 29 30 31 32 33 37 38 39
STRING               : 38
THEN                 : 30 31 35
TIMES                : 63
TRUE                 : 
UNTIL                : 29
VAR                  : 
WHEN                 : 30 31 35
WHILE                : 15
error                : 

Nonterminals, with rules where they appear

DATATYPE             : 6 7
FCOMMENT             : 1
addingOperator       : 57 58
block                : 1 3 4 6 7 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 27 29 29 30 30 31 31 31 32 33 33 35 37 38 39
comment              : 20 72
condition            : 14 15 29 30 31 35
empty                : 5 8 34 36 73
expression           : 7 11 24 39 40 41 41 58 70
factor               : 61 62
identList            : 10
movimiento           : 19
multiplyingOperator  : 62
principal            : 2
print                : 18
program              : 0
relation             : 41
statement            : 2 4 14 15 17 22
term                 : 56 57 58 62
varDecl              : 2 3 16
whenloop             : 32 33 35

Parsing method: SLR

state 0

    (0) S' -> . program
    (1) program -> . FCOMMENT block
    (71) FCOMMENT -> . COMMENT

    COMMENT         shift and go to state 1

    program                        shift and go to state 2
    FCOMMENT                       shift and go to state 3

state 1

    (71) FCOMMENT -> COMMENT .

    DEF             reduce using rule 71 (FCOMMENT -> COMMENT .)
    ALTER           reduce using rule 71 (FCOMMENT -> COMMENT .)
    CALL            reduce using rule 71 (FCOMMENT -> COMMENT .)
    ISTRUE          reduce using rule 71 (FCOMMENT -> COMMENT .)
    IF              reduce using rule 71 (FCOMMENT -> COMMENT .)
    WHILE           reduce using rule 71 (FCOMMENT -> COMMENT .)
    PROC            reduce using rule 71 (FCOMMENT -> COMMENT .)
    MOVER           reduce using rule 71 (FCOMMENT -> COMMENT .)
    COMMENT         reduce using rule 71 (FCOMMENT -> COMMENT .)
    ID              reduce using rule 71 (FCOMMENT -> COMMENT .)
    NOT             reduce using rule 71 (FCOMMENT -> COMMENT .)
    ALEATORIO       reduce using rule 71 (FCOMMENT -> COMMENT .)
    REPEAT          reduce using rule 71 (FCOMMENT -> COMMENT .)
    BREAK           reduce using rule 71 (FCOMMENT -> COMMENT .)
    UNTIL           reduce using rule 71 (FCOMMENT -> COMMENT .)
    CASE            reduce using rule 71 (FCOMMENT -> COMMENT .)
    PRINT           reduce using rule 71 (FCOMMENT -> COMMENT .)
    PRINCIPAL       reduce using rule 71 (FCOMMENT -> COMMENT .)
    $end            reduce using rule 71 (FCOMMENT -> COMMENT .)


state 2

    (0) S' -> program .



state 3

    (1) program -> FCOMMENT . block
    (2) block -> . varDecl statement principal
    (6) varDecl -> . DEF LPARENT ID COMMA DATATYPE RPARENT SEMICOLOM block
    (7) varDecl -> . DEF LPARENT ID COMMA DATATYPE COMMA expression RPARENT SEMICOLOM block
    (8) varDecl -> . empty
    (74) empty -> .

  ! shift/reduce conflict for DEF resolved as shift
    DEF             shift and go to state 7
    $end            reduce using rule 74 (empty -> .)
    ALTER           reduce using rule 74 (empty -> .)
    CALL            reduce using rule 74 (empty -> .)
    ISTRUE          reduce using rule 74 (empty -> .)
    IF              reduce using rule 74 (empty -> .)
    WHILE           reduce using rule 74 (empty -> .)
    PROC            reduce using rule 74 (empty -> .)
    MOVER           reduce using rule 74 (empty -> .)
    COMMENT         reduce using rule 74 (empty -> .)
    ID              reduce using rule 74 (empty -> .)
    NOT             reduce using rule 74 (empty -> .)
    ALEATORIO       reduce using rule 74 (empty -> .)
    REPEAT          reduce using rule 74 (empty -> .)
    BREAK           reduce using rule 74 (empty -> .)
    UNTIL           reduce using rule 74 (empty -> .)
    CASE            reduce using rule 74 (empty -> .)
    PRINT           reduce using rule 74 (empty -> .)
    PRINCIPAL       reduce using rule 74 (empty -> .)
    RPARENT         reduce using rule 74 (empty -> .)
    SEMICOLOM       reduce using rule 74 (empty -> .)
    ELSE            reduce using rule 74 (empty -> .)

  ! DEF             [ reduce using rule 74 (empty -> .) ]

    varDecl                        shift and go to state 4
    empty                          shift and go to state 5
    block                          shift and go to state 6

state 4

    (2) block -> varDecl . statement principal
    (11) statement -> . ALTER LPARENT ID COMMA expression RPARENT SEMICOLOM block
    (12) statement -> . CALL LPARENT ID RPARENT block
    (13) statement -> . ISTRUE LPARENT ID RPARENT SEMICOLOM block
    (14) statement -> . IF condition LPARENT statement RPARENT block
    (15) statement -> . WHILE condition LPARENT statement RPARENT SEMICOLOM block
    (16) statement -> . PROC ID LPARENT varDecl RPARENT SEMICOLOM block
    (17) statement -> . PROC ID LPARENT statement RPARENT SEMICOLOM block
    (18) statement -> . print block
    (19) statement -> . MOVER LPARENT movimiento RPARENT SEMICOLOM block
    (20) statement -> . comment block
    (21) statement -> . ID LPARENT ID RPARENT SEMICOLOM block
    (22) statement -> . ID LPARENT statement RPARENT SEMICOLOM block
    (23) statement -> . ID LPARENT BOOLEAN RPARENT SEMICOLOM block
    (24) statement -> . ID LPARENT expression RPARENT SEMICOLOM block
    (25) statement -> . NOT LPARENT ID RPARENT SEMICOLOM block
    (26) statement -> . ALEATORIO LPARENT RPARENT SEMICOLOM block
    (27) statement -> . REPEAT LPARENT block RPARENT SEMICOLOM block
    (28) statement -> . BREAK
    (29) statement -> . UNTIL LPARENT block RPARENT condition SEMICOLOM block
    (30) statement -> . CASE WHEN LPARENT condition RPARENT THEN LPARENT block RPARENT SEMICOLOM block
    (31) statement -> . CASE WHEN LPARENT condition RPARENT THEN LPARENT block RPARENT ELSE LPARENT block RPARENT SEMICOLOM block
    (32) statement -> . CASE ID whenloop SEMICOLOM block
    (33) statement -> . CASE ID whenloop ELSE LPARENT block RPARENT SEMICOLOM block
    (34) statement -> . empty
    (37) print -> . PRINT LPARENT ID RPARENT SEMICOLOM block
    (38) print -> . PRINT LPARENT STRING RPARENT SEMICOLOM block
    (39) print -> . PRINT LPARENT expression RPARENT SEMICOLOM block
    (72) comment -> . COMMENT comment
    (73) comment -> . empty
    (74) empty -> .

  ! shift/reduce conflict for ALTER resolved as shift
  ! shift/reduce conflict for CALL resolved as shift
  ! shift/reduce conflict for ISTRUE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for PROC resolved as shift
  ! shift/reduce conflict for MOVER resolved as shift
  ! shift/reduce conflict for COMMENT resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for ALEATORIO resolved as shift
  ! shift/reduce conflict for REPEAT resolved as shift
  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for UNTIL resolved as shift
  ! shift/reduce conflict for CASE resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
    ALTER           shift and go to state 11
    CALL            shift and go to state 25
    ISTRUE          shift and go to state 13
    IF              shift and go to state 23
    WHILE           shift and go to state 9
    PROC            shift and go to state 27
    MOVER           shift and go to state 17
    ID              shift and go to state 22
    NOT             shift and go to state 26
    ALEATORIO       shift and go to state 21
    REPEAT          shift and go to state 20
    BREAK           shift and go to state 24
    UNTIL           shift and go to state 14
    CASE            shift and go to state 12
    PRINT           shift and go to state 10
    COMMENT         shift and go to state 19
    $end            reduce using rule 74 (empty -> .)
    DEF             reduce using rule 74 (empty -> .)
    PRINCIPAL       reduce using rule 74 (empty -> .)
    RPARENT         reduce using rule 74 (empty -> .)
    SEMICOLOM       reduce using rule 74 (empty -> .)
    ELSE            reduce using rule 74 (empty -> .)

  ! ALTER           [ reduce using rule 74 (empty -> .) ]
  ! CALL            [ reduce using rule 74 (empty -> .) ]
  ! ISTRUE          [ reduce using rule 74 (empty -> .) ]
  ! IF              [ reduce using rule 74 (empty -> .) ]
  ! WHILE           [ reduce using rule 74 (empty -> .) ]
  ! PROC            [ reduce using rule 74 (empty -> .) ]
  ! MOVER           [ reduce using rule 74 (empty -> .) ]
  ! COMMENT         [ reduce using rule 74 (empty -> .) ]
  ! ID              [ reduce using rule 74 (empty -> .) ]
  ! NOT             [ reduce using rule 74 (empty -> .) ]
  ! ALEATORIO       [ reduce using rule 74 (empty -> .) ]
  ! REPEAT          [ reduce using rule 74 (empty -> .) ]
  ! BREAK           [ reduce using rule 74 (empty -> .) ]
  ! UNTIL           [ reduce using rule 74 (empty -> .) ]
  ! CASE            [ reduce using rule 74 (empty -> .) ]
  ! PRINT           [ reduce using rule 74 (empty -> .) ]

    comment                        shift and go to state 8
    empty                          shift and go to state 18
    statement                      shift and go to state 15
    print                          shift and go to state 16

state 5

    (8) varDecl -> empty .

    ALTER           reduce using rule 8 (varDecl -> empty .)
    CALL            reduce using rule 8 (varDecl -> empty .)
    ISTRUE          reduce using rule 8 (varDecl -> empty .)
    IF              reduce using rule 8 (varDecl -> empty .)
    WHILE           reduce using rule 8 (varDecl -> empty .)
    PROC            reduce using rule 8 (varDecl -> empty .)
    MOVER           reduce using rule 8 (varDecl -> empty .)
    COMMENT         reduce using rule 8 (varDecl -> empty .)
    ID              reduce using rule 8 (varDecl -> empty .)
    NOT             reduce using rule 8 (varDecl -> empty .)
    ALEATORIO       reduce using rule 8 (varDecl -> empty .)
    REPEAT          reduce using rule 8 (varDecl -> empty .)
    BREAK           reduce using rule 8 (varDecl -> empty .)
    UNTIL           reduce using rule 8 (varDecl -> empty .)
    CASE            reduce using rule 8 (varDecl -> empty .)
    PRINT           reduce using rule 8 (varDecl -> empty .)
    DEF             reduce using rule 8 (varDecl -> empty .)
    PRINCIPAL       reduce using rule 8 (varDecl -> empty .)
    $end            reduce using rule 8 (varDecl -> empty .)
    RPARENT         reduce using rule 8 (varDecl -> empty .)


state 6

    (1) program -> FCOMMENT block .

    $end            reduce using rule 1 (program -> FCOMMENT block .)


state 7

    (6) varDecl -> DEF . LPARENT ID COMMA DATATYPE RPARENT SEMICOLOM block
    (7) varDecl -> DEF . LPARENT ID COMMA DATATYPE COMMA expression RPARENT SEMICOLOM block

    LPARENT         shift and go to state 28


state 8

    (20) statement -> comment . block
    (2) block -> . varDecl statement principal
    (6) varDecl -> . DEF LPARENT ID COMMA DATATYPE RPARENT SEMICOLOM block
    (7) varDecl -> . DEF LPARENT ID COMMA DATATYPE COMMA expression RPARENT SEMICOLOM block
    (8) varDecl -> . empty
    (74) empty -> .

  ! shift/reduce conflict for DEF resolved as shift
    DEF             shift and go to state 7
    $end            reduce using rule 74 (empty -> .)
    ALTER           reduce using rule 74 (empty -> .)
    CALL            reduce using rule 74 (empty -> .)
    ISTRUE          reduce using rule 74 (empty -> .)
    IF              reduce using rule 74 (empty -> .)
    WHILE           reduce using rule 74 (empty -> .)
    PROC            reduce using rule 74 (empty -> .)
    MOVER           reduce using rule 74 (empty -> .)
    COMMENT         reduce using rule 74 (empty -> .)
    ID              reduce using rule 74 (empty -> .)
    NOT             reduce using rule 74 (empty -> .)
    ALEATORIO       reduce using rule 74 (empty -> .)
    REPEAT          reduce using rule 74 (empty -> .)
    BREAK           reduce using rule 74 (empty -> .)
    UNTIL           reduce using rule 74 (empty -> .)
    CASE            reduce using rule 74 (empty -> .)
    PRINT           reduce using rule 74 (empty -> .)
    PRINCIPAL       reduce using rule 74 (empty -> .)
    RPARENT         reduce using rule 74 (empty -> .)
    SEMICOLOM       reduce using rule 74 (empty -> .)
    ELSE            reduce using rule 74 (empty -> .)

  ! DEF             [ reduce using rule 74 (empty -> .) ]

    varDecl                        shift and go to state 4
    empty                          shift and go to state 5
    block                          shift and go to state 29

state 9

    (15) statement -> WHILE . condition LPARENT statement RPARENT SEMICOLOM block
    (40) condition -> . expression
    (41) condition -> . expression relation expression
    (56) expression -> . term
    (57) expression -> . addingOperator term
    (58) expression -> . expression addingOperator term
    (61) term -> . factor
    (62) term -> . term multiplyingOperator factor
    (59) addingOperator -> . PLUS
    (60) addingOperator -> . MINUS
    (67) factor -> . INTEGER
    (68) factor -> . BOOLEAN
    (69) factor -> . ID
    (70) factor -> . LPARENT expression RPARENT

    PLUS            shift and go to state 37
    MINUS           shift and go to state 39
    INTEGER         shift and go to state 33
    BOOLEAN         shift and go to state 35
    ID              shift and go to state 34
    LPARENT         shift and go to state 31

    addingOperator                 shift and go to state 32
    term                           shift and go to state 30
    condition                      shift and go to state 40
    factor                         shift and go to state 36
    expression                     shift and go to state 38

state 10

    (37) print -> PRINT . LPARENT ID RPARENT SEMICOLOM block
    (38) print -> PRINT . LPARENT STRING RPARENT SEMICOLOM block
    (39) print -> PRINT . LPARENT expression RPARENT SEMICOLOM block

    LPARENT         shift and go to state 41


state 11

    (11) statement -> ALTER . LPARENT ID COMMA expression RPARENT SEMICOLOM block

    LPARENT         shift and go to state 42


state 12

    (30) statement -> CASE . WHEN LPARENT condition RPARENT THEN LPARENT block RPARENT SEMICOLOM block
    (31) statement -> CASE . WHEN LPARENT condition RPARENT THEN LPARENT block RPARENT ELSE LPARENT block RPARENT SEMICOLOM block
    (32) statement -> CASE . ID whenloop SEMICOLOM block
    (33) statement -> CASE . ID whenloop ELSE LPARENT block RPARENT SEMICOLOM block

    WHEN            shift and go to state 43
    ID              shift and go to state 44


state 13

    (13) statement -> ISTRUE . LPARENT ID RPARENT SEMICOLOM block

    LPARENT         shift and go to state 45


state 14

    (29) statement -> UNTIL . LPARENT block RPARENT condition SEMICOLOM block

    LPARENT         shift and go to state 46


state 15

    (2) block -> varDecl statement . principal
    (3) principal -> . PRINCIPAL LPARENT varDecl RPARENT SEMICOLOM block
    (4) principal -> . PRINCIPAL LPARENT statement RPARENT SEMICOLOM block
    (5) principal -> . empty
    (74) empty -> .

  ! shift/reduce conflict for PRINCIPAL resolved as shift
    PRINCIPAL       shift and go to state 49
    $end            reduce using rule 74 (empty -> .)
    ALTER           reduce using rule 74 (empty -> .)
    CALL            reduce using rule 74 (empty -> .)
    ISTRUE          reduce using rule 74 (empty -> .)
    IF              reduce using rule 74 (empty -> .)
    WHILE           reduce using rule 74 (empty -> .)
    PROC            reduce using rule 74 (empty -> .)
    MOVER           reduce using rule 74 (empty -> .)
    COMMENT         reduce using rule 74 (empty -> .)
    ID              reduce using rule 74 (empty -> .)
    NOT             reduce using rule 74 (empty -> .)
    ALEATORIO       reduce using rule 74 (empty -> .)
    REPEAT          reduce using rule 74 (empty -> .)
    BREAK           reduce using rule 74 (empty -> .)
    UNTIL           reduce using rule 74 (empty -> .)
    CASE            reduce using rule 74 (empty -> .)
    PRINT           reduce using rule 74 (empty -> .)
    DEF             reduce using rule 74 (empty -> .)
    RPARENT         reduce using rule 74 (empty -> .)
    SEMICOLOM       reduce using rule 74 (empty -> .)
    ELSE            reduce using rule 74 (empty -> .)

  ! PRINCIPAL       [ reduce using rule 74 (empty -> .) ]

    empty                          shift and go to state 47
    principal                      shift and go to state 48

state 16

    (18) statement -> print . block
    (2) block -> . varDecl statement principal
    (6) varDecl -> . DEF LPARENT ID COMMA DATATYPE RPARENT SEMICOLOM block
    (7) varDecl -> . DEF LPARENT ID COMMA DATATYPE COMMA expression RPARENT SEMICOLOM block
    (8) varDecl -> . empty
    (74) empty -> .

  ! shift/reduce conflict for DEF resolved as shift
    DEF             shift and go to state 7
    $end            reduce using rule 74 (empty -> .)
    ALTER           reduce using rule 74 (empty -> .)
    CALL            reduce using rule 74 (empty -> .)
    ISTRUE          reduce using rule 74 (empty -> .)
    IF              reduce using rule 74 (empty -> .)
    WHILE           reduce using rule 74 (empty -> .)
    PROC            reduce using rule 74 (empty -> .)
    MOVER           reduce using rule 74 (empty -> .)
    COMMENT         reduce using rule 74 (empty -> .)
    ID              reduce using rule 74 (empty -> .)
    NOT             reduce using rule 74 (empty -> .)
    ALEATORIO       reduce using rule 74 (empty -> .)
    REPEAT          reduce using rule 74 (empty -> .)
    BREAK           reduce using rule 74 (empty -> .)
    UNTIL           reduce using rule 74 (empty -> .)
    CASE            reduce using rule 74 (empty -> .)
    PRINT           reduce using rule 74 (empty -> .)
    PRINCIPAL       reduce using rule 74 (empty -> .)
    RPARENT         reduce using rule 74 (empty -> .)
    SEMICOLOM       reduce using rule 74 (empty -> .)
    ELSE            reduce using rule 74 (empty -> .)

  ! DEF             [ reduce using rule 74 (empty -> .) ]

    varDecl                        shift and go to state 4
    empty                          shift and go to state 5
    block                          shift and go to state 50

state 17

    (19) statement -> MOVER . LPARENT movimiento RPARENT SEMICOLOM block

    LPARENT         shift and go to state 51


state 18

    (34) statement -> empty .
    (73) comment -> empty .

  ! reduce/reduce conflict for DEF resolved using rule 34 (statement -> empty .)
  ! reduce/reduce conflict for ALTER resolved using rule 34 (statement -> empty .)
  ! reduce/reduce conflict for CALL resolved using rule 34 (statement -> empty .)
  ! reduce/reduce conflict for ISTRUE resolved using rule 34 (statement -> empty .)
  ! reduce/reduce conflict for IF resolved using rule 34 (statement -> empty .)
  ! reduce/reduce conflict for WHILE resolved using rule 34 (statement -> empty .)
  ! reduce/reduce conflict for PROC resolved using rule 34 (statement -> empty .)
  ! reduce/reduce conflict for MOVER resolved using rule 34 (statement -> empty .)
  ! reduce/reduce conflict for COMMENT resolved using rule 34 (statement -> empty .)
  ! reduce/reduce conflict for ID resolved using rule 34 (statement -> empty .)
  ! reduce/reduce conflict for NOT resolved using rule 34 (statement -> empty .)
  ! reduce/reduce conflict for ALEATORIO resolved using rule 34 (statement -> empty .)
  ! reduce/reduce conflict for REPEAT resolved using rule 34 (statement -> empty .)
  ! reduce/reduce conflict for BREAK resolved using rule 34 (statement -> empty .)
  ! reduce/reduce conflict for UNTIL resolved using rule 34 (statement -> empty .)
  ! reduce/reduce conflict for CASE resolved using rule 34 (statement -> empty .)
  ! reduce/reduce conflict for PRINT resolved using rule 34 (statement -> empty .)
  ! reduce/reduce conflict for PRINCIPAL resolved using rule 34 (statement -> empty .)
  ! reduce/reduce conflict for $end resolved using rule 34 (statement -> empty .)
  ! reduce/reduce conflict for RPARENT resolved using rule 34 (statement -> empty .)
    PRINCIPAL       reduce using rule 34 (statement -> empty .)
    $end            reduce using rule 34 (statement -> empty .)
    RPARENT         reduce using rule 34 (statement -> empty .)
    ALTER           reduce using rule 34 (statement -> empty .)
    CALL            reduce using rule 34 (statement -> empty .)
    ISTRUE          reduce using rule 34 (statement -> empty .)
    IF              reduce using rule 34 (statement -> empty .)
    WHILE           reduce using rule 34 (statement -> empty .)
    PROC            reduce using rule 34 (statement -> empty .)
    MOVER           reduce using rule 34 (statement -> empty .)
    COMMENT         reduce using rule 34 (statement -> empty .)
    ID              reduce using rule 34 (statement -> empty .)
    NOT             reduce using rule 34 (statement -> empty .)
    ALEATORIO       reduce using rule 34 (statement -> empty .)
    REPEAT          reduce using rule 34 (statement -> empty .)
    BREAK           reduce using rule 34 (statement -> empty .)
    UNTIL           reduce using rule 34 (statement -> empty .)
    CASE            reduce using rule 34 (statement -> empty .)
    PRINT           reduce using rule 34 (statement -> empty .)
    DEF             reduce using rule 34 (statement -> empty .)

  ! DEF             [ reduce using rule 73 (comment -> empty .) ]
  ! ALTER           [ reduce using rule 73 (comment -> empty .) ]
  ! CALL            [ reduce using rule 73 (comment -> empty .) ]
  ! ISTRUE          [ reduce using rule 73 (comment -> empty .) ]
  ! IF              [ reduce using rule 73 (comment -> empty .) ]
  ! WHILE           [ reduce using rule 73 (comment -> empty .) ]
  ! PROC            [ reduce using rule 73 (comment -> empty .) ]
  ! MOVER           [ reduce using rule 73 (comment -> empty .) ]
  ! COMMENT         [ reduce using rule 73 (comment -> empty .) ]
  ! ID              [ reduce using rule 73 (comment -> empty .) ]
  ! NOT             [ reduce using rule 73 (comment -> empty .) ]
  ! ALEATORIO       [ reduce using rule 73 (comment -> empty .) ]
  ! REPEAT          [ reduce using rule 73 (comment -> empty .) ]
  ! BREAK           [ reduce using rule 73 (comment -> empty .) ]
  ! UNTIL           [ reduce using rule 73 (comment -> empty .) ]
  ! CASE            [ reduce using rule 73 (comment -> empty .) ]
  ! PRINT           [ reduce using rule 73 (comment -> empty .) ]
  ! PRINCIPAL       [ reduce using rule 73 (comment -> empty .) ]
  ! $end            [ reduce using rule 73 (comment -> empty .) ]
  ! RPARENT         [ reduce using rule 73 (comment -> empty .) ]


state 19

    (72) comment -> COMMENT . comment
    (72) comment -> . COMMENT comment
    (73) comment -> . empty
    (74) empty -> .

  ! shift/reduce conflict for COMMENT resolved as shift
    COMMENT         shift and go to state 19
    $end            reduce using rule 74 (empty -> .)
    ALTER           reduce using rule 74 (empty -> .)
    CALL            reduce using rule 74 (empty -> .)
    ISTRUE          reduce using rule 74 (empty -> .)
    IF              reduce using rule 74 (empty -> .)
    WHILE           reduce using rule 74 (empty -> .)
    PROC            reduce using rule 74 (empty -> .)
    MOVER           reduce using rule 74 (empty -> .)
    ID              reduce using rule 74 (empty -> .)
    NOT             reduce using rule 74 (empty -> .)
    ALEATORIO       reduce using rule 74 (empty -> .)
    REPEAT          reduce using rule 74 (empty -> .)
    BREAK           reduce using rule 74 (empty -> .)
    UNTIL           reduce using rule 74 (empty -> .)
    CASE            reduce using rule 74 (empty -> .)
    PRINT           reduce using rule 74 (empty -> .)
    DEF             reduce using rule 74 (empty -> .)
    PRINCIPAL       reduce using rule 74 (empty -> .)
    RPARENT         reduce using rule 74 (empty -> .)
    SEMICOLOM       reduce using rule 74 (empty -> .)
    ELSE            reduce using rule 74 (empty -> .)

  ! COMMENT         [ reduce using rule 74 (empty -> .) ]

    comment                        shift and go to state 52
    empty                          shift and go to state 53

state 20

    (27) statement -> REPEAT . LPARENT block RPARENT SEMICOLOM block

    LPARENT         shift and go to state 54


state 21

    (26) statement -> ALEATORIO . LPARENT RPARENT SEMICOLOM block

    LPARENT         shift and go to state 55


state 22

    (21) statement -> ID . LPARENT ID RPARENT SEMICOLOM block
    (22) statement -> ID . LPARENT statement RPARENT SEMICOLOM block
    (23) statement -> ID . LPARENT BOOLEAN RPARENT SEMICOLOM block
    (24) statement -> ID . LPARENT expression RPARENT SEMICOLOM block

    LPARENT         shift and go to state 56


state 23

    (14) statement -> IF . condition LPARENT statement RPARENT block
    (40) condition -> . expression
    (41) condition -> . expression relation expression
    (56) expression -> . term
    (57) expression -> . addingOperator term
    (58) expression -> . expression addingOperator term
    (61) term -> . factor
    (62) term -> . term multiplyingOperator factor
    (59) addingOperator -> . PLUS
    (60) addingOperator -> . MINUS
    (67) factor -> . INTEGER
    (68) factor -> . BOOLEAN
    (69) factor -> . ID
    (70) factor -> . LPARENT expression RPARENT

    PLUS            shift and go to state 37
    MINUS           shift and go to state 39
    INTEGER         shift and go to state 33
    BOOLEAN         shift and go to state 35
    ID              shift and go to state 34
    LPARENT         shift and go to state 31

    addingOperator                 shift and go to state 32
    term                           shift and go to state 30
    condition                      shift and go to state 57
    factor                         shift and go to state 36
    expression                     shift and go to state 38

state 24

    (28) statement -> BREAK .

    PRINCIPAL       reduce using rule 28 (statement -> BREAK .)
    $end            reduce using rule 28 (statement -> BREAK .)
    RPARENT         reduce using rule 28 (statement -> BREAK .)
    ALTER           reduce using rule 28 (statement -> BREAK .)
    CALL            reduce using rule 28 (statement -> BREAK .)
    ISTRUE          reduce using rule 28 (statement -> BREAK .)
    IF              reduce using rule 28 (statement -> BREAK .)
    WHILE           reduce using rule 28 (statement -> BREAK .)
    PROC            reduce using rule 28 (statement -> BREAK .)
    MOVER           reduce using rule 28 (statement -> BREAK .)
    COMMENT         reduce using rule 28 (statement -> BREAK .)
    ID              reduce using rule 28 (statement -> BREAK .)
    NOT             reduce using rule 28 (statement -> BREAK .)
    ALEATORIO       reduce using rule 28 (statement -> BREAK .)
    REPEAT          reduce using rule 28 (statement -> BREAK .)
    BREAK           reduce using rule 28 (statement -> BREAK .)
    UNTIL           reduce using rule 28 (statement -> BREAK .)
    CASE            reduce using rule 28 (statement -> BREAK .)
    PRINT           reduce using rule 28 (statement -> BREAK .)
    DEF             reduce using rule 28 (statement -> BREAK .)


state 25

    (12) statement -> CALL . LPARENT ID RPARENT block

    LPARENT         shift and go to state 58


state 26

    (25) statement -> NOT . LPARENT ID RPARENT SEMICOLOM block

    LPARENT         shift and go to state 59


state 27

    (16) statement -> PROC . ID LPARENT varDecl RPARENT SEMICOLOM block
    (17) statement -> PROC . ID LPARENT statement RPARENT SEMICOLOM block

    ID              shift and go to state 60


state 28

    (6) varDecl -> DEF LPARENT . ID COMMA DATATYPE RPARENT SEMICOLOM block
    (7) varDecl -> DEF LPARENT . ID COMMA DATATYPE COMMA expression RPARENT SEMICOLOM block

    ID              shift and go to state 61


state 29

    (20) statement -> comment block .

    PRINCIPAL       reduce using rule 20 (statement -> comment block .)
    $end            reduce using rule 20 (statement -> comment block .)
    RPARENT         reduce using rule 20 (statement -> comment block .)
    ALTER           reduce using rule 20 (statement -> comment block .)
    CALL            reduce using rule 20 (statement -> comment block .)
    ISTRUE          reduce using rule 20 (statement -> comment block .)
    IF              reduce using rule 20 (statement -> comment block .)
    WHILE           reduce using rule 20 (statement -> comment block .)
    PROC            reduce using rule 20 (statement -> comment block .)
    MOVER           reduce using rule 20 (statement -> comment block .)
    COMMENT         reduce using rule 20 (statement -> comment block .)
    ID              reduce using rule 20 (statement -> comment block .)
    NOT             reduce using rule 20 (statement -> comment block .)
    ALEATORIO       reduce using rule 20 (statement -> comment block .)
    REPEAT          reduce using rule 20 (statement -> comment block .)
    BREAK           reduce using rule 20 (statement -> comment block .)
    UNTIL           reduce using rule 20 (statement -> comment block .)
    CASE            reduce using rule 20 (statement -> comment block .)
    PRINT           reduce using rule 20 (statement -> comment block .)
    DEF             reduce using rule 20 (statement -> comment block .)


state 30

    (56) expression -> term .
    (62) term -> term . multiplyingOperator factor
    (63) multiplyingOperator -> . TIMES
    (64) multiplyingOperator -> . DIVIDE

    RPARENT         reduce using rule 56 (expression -> term .)
    LPARENT         reduce using rule 56 (expression -> term .)
    SEMICOLOM       reduce using rule 56 (expression -> term .)
    THEN            reduce using rule 56 (expression -> term .)
    ASSIGN          reduce using rule 56 (expression -> term .)
    NE              reduce using rule 56 (expression -> term .)
    LT              reduce using rule 56 (expression -> term .)
    GT              reduce using rule 56 (expression -> term .)
    LTE             reduce using rule 56 (expression -> term .)
    GTE             reduce using rule 56 (expression -> term .)
    PLUS            reduce using rule 56 (expression -> term .)
    MINUS           reduce using rule 56 (expression -> term .)
    TIMES           shift and go to state 64
    DIVIDE          shift and go to state 63

    multiplyingOperator            shift and go to state 62

state 31

    (70) factor -> LPARENT . expression RPARENT
    (56) expression -> . term
    (57) expression -> . addingOperator term
    (58) expression -> . expression addingOperator term
    (61) term -> . factor
    (62) term -> . term multiplyingOperator factor
    (59) addingOperator -> . PLUS
    (60) addingOperator -> . MINUS
    (67) factor -> . INTEGER
    (68) factor -> . BOOLEAN
    (69) factor -> . ID
    (70) factor -> . LPARENT expression RPARENT

    PLUS            shift and go to state 37
    MINUS           shift and go to state 39
    INTEGER         shift and go to state 33
    BOOLEAN         shift and go to state 35
    ID              shift and go to state 34
    LPARENT         shift and go to state 31

    addingOperator                 shift and go to state 32
    term                           shift and go to state 30
    expression                     shift and go to state 65
    factor                         shift and go to state 36

state 32

    (57) expression -> addingOperator . term
    (61) term -> . factor
    (62) term -> . term multiplyingOperator factor
    (67) factor -> . INTEGER
    (68) factor -> . BOOLEAN
    (69) factor -> . ID
    (70) factor -> . LPARENT expression RPARENT

    INTEGER         shift and go to state 33
    BOOLEAN         shift and go to state 35
    ID              shift and go to state 34
    LPARENT         shift and go to state 31

    term                           shift and go to state 66
    factor                         shift and go to state 36

state 33

    (67) factor -> INTEGER .

    RPARENT         reduce using rule 67 (factor -> INTEGER .)
    LPARENT         reduce using rule 67 (factor -> INTEGER .)
    SEMICOLOM       reduce using rule 67 (factor -> INTEGER .)
    THEN            reduce using rule 67 (factor -> INTEGER .)
    ASSIGN          reduce using rule 67 (factor -> INTEGER .)
    NE              reduce using rule 67 (factor -> INTEGER .)
    LT              reduce using rule 67 (factor -> INTEGER .)
    GT              reduce using rule 67 (factor -> INTEGER .)
    LTE             reduce using rule 67 (factor -> INTEGER .)
    GTE             reduce using rule 67 (factor -> INTEGER .)
    PLUS            reduce using rule 67 (factor -> INTEGER .)
    MINUS           reduce using rule 67 (factor -> INTEGER .)
    TIMES           reduce using rule 67 (factor -> INTEGER .)
    DIVIDE          reduce using rule 67 (factor -> INTEGER .)


state 34

    (69) factor -> ID .

    RPARENT         reduce using rule 69 (factor -> ID .)
    LPARENT         reduce using rule 69 (factor -> ID .)
    SEMICOLOM       reduce using rule 69 (factor -> ID .)
    THEN            reduce using rule 69 (factor -> ID .)
    ASSIGN          reduce using rule 69 (factor -> ID .)
    NE              reduce using rule 69 (factor -> ID .)
    LT              reduce using rule 69 (factor -> ID .)
    GT              reduce using rule 69 (factor -> ID .)
    LTE             reduce using rule 69 (factor -> ID .)
    GTE             reduce using rule 69 (factor -> ID .)
    PLUS            reduce using rule 69 (factor -> ID .)
    MINUS           reduce using rule 69 (factor -> ID .)
    TIMES           reduce using rule 69 (factor -> ID .)
    DIVIDE          reduce using rule 69 (factor -> ID .)


state 35

    (68) factor -> BOOLEAN .

    RPARENT         reduce using rule 68 (factor -> BOOLEAN .)
    LPARENT         reduce using rule 68 (factor -> BOOLEAN .)
    SEMICOLOM       reduce using rule 68 (factor -> BOOLEAN .)
    THEN            reduce using rule 68 (factor -> BOOLEAN .)
    ASSIGN          reduce using rule 68 (factor -> BOOLEAN .)
    NE              reduce using rule 68 (factor -> BOOLEAN .)
    LT              reduce using rule 68 (factor -> BOOLEAN .)
    GT              reduce using rule 68 (factor -> BOOLEAN .)
    LTE             reduce using rule 68 (factor -> BOOLEAN .)
    GTE             reduce using rule 68 (factor -> BOOLEAN .)
    PLUS            reduce using rule 68 (factor -> BOOLEAN .)
    MINUS           reduce using rule 68 (factor -> BOOLEAN .)
    TIMES           reduce using rule 68 (factor -> BOOLEAN .)
    DIVIDE          reduce using rule 68 (factor -> BOOLEAN .)


state 36

    (61) term -> factor .

    RPARENT         reduce using rule 61 (term -> factor .)
    LPARENT         reduce using rule 61 (term -> factor .)
    SEMICOLOM       reduce using rule 61 (term -> factor .)
    THEN            reduce using rule 61 (term -> factor .)
    ASSIGN          reduce using rule 61 (term -> factor .)
    NE              reduce using rule 61 (term -> factor .)
    LT              reduce using rule 61 (term -> factor .)
    GT              reduce using rule 61 (term -> factor .)
    LTE             reduce using rule 61 (term -> factor .)
    GTE             reduce using rule 61 (term -> factor .)
    PLUS            reduce using rule 61 (term -> factor .)
    MINUS           reduce using rule 61 (term -> factor .)
    TIMES           reduce using rule 61 (term -> factor .)
    DIVIDE          reduce using rule 61 (term -> factor .)


state 37

    (59) addingOperator -> PLUS .

    INTEGER         reduce using rule 59 (addingOperator -> PLUS .)
    BOOLEAN         reduce using rule 59 (addingOperator -> PLUS .)
    ID              reduce using rule 59 (addingOperator -> PLUS .)
    LPARENT         reduce using rule 59 (addingOperator -> PLUS .)


state 38

    (40) condition -> expression .
    (41) condition -> expression . relation expression
    (58) expression -> expression . addingOperator term
    (50) relation -> . ASSIGN
    (51) relation -> . NE
    (52) relation -> . LT
    (53) relation -> . GT
    (54) relation -> . LTE
    (55) relation -> . GTE
    (59) addingOperator -> . PLUS
    (60) addingOperator -> . MINUS

    LPARENT         reduce using rule 40 (condition -> expression .)
    SEMICOLOM       reduce using rule 40 (condition -> expression .)
    RPARENT         reduce using rule 40 (condition -> expression .)
    THEN            reduce using rule 40 (condition -> expression .)
    ASSIGN          shift and go to state 74
    NE              shift and go to state 70
    LT              shift and go to state 71
    GT              shift and go to state 68
    LTE             shift and go to state 73
    GTE             shift and go to state 69
    PLUS            shift and go to state 37
    MINUS           shift and go to state 39

    relation                       shift and go to state 72
    addingOperator                 shift and go to state 67

state 39

    (60) addingOperator -> MINUS .

    INTEGER         reduce using rule 60 (addingOperator -> MINUS .)
    BOOLEAN         reduce using rule 60 (addingOperator -> MINUS .)
    ID              reduce using rule 60 (addingOperator -> MINUS .)
    LPARENT         reduce using rule 60 (addingOperator -> MINUS .)


state 40

    (15) statement -> WHILE condition . LPARENT statement RPARENT SEMICOLOM block

    LPARENT         shift and go to state 75


state 41

    (37) print -> PRINT LPARENT . ID RPARENT SEMICOLOM block
    (38) print -> PRINT LPARENT . STRING RPARENT SEMICOLOM block
    (39) print -> PRINT LPARENT . expression RPARENT SEMICOLOM block
    (56) expression -> . term
    (57) expression -> . addingOperator term
    (58) expression -> . expression addingOperator term
    (61) term -> . factor
    (62) term -> . term multiplyingOperator factor
    (59) addingOperator -> . PLUS
    (60) addingOperator -> . MINUS
    (67) factor -> . INTEGER
    (68) factor -> . BOOLEAN
    (69) factor -> . ID
    (70) factor -> . LPARENT expression RPARENT

    ID              shift and go to state 77
    STRING          shift and go to state 78
    PLUS            shift and go to state 37
    MINUS           shift and go to state 39
    INTEGER         shift and go to state 33
    BOOLEAN         shift and go to state 35
    LPARENT         shift and go to state 31

    addingOperator                 shift and go to state 32
    term                           shift and go to state 30
    factor                         shift and go to state 36
    expression                     shift and go to state 76

state 42

    (11) statement -> ALTER LPARENT . ID COMMA expression RPARENT SEMICOLOM block

    ID              shift and go to state 79


state 43

    (30) statement -> CASE WHEN . LPARENT condition RPARENT THEN LPARENT block RPARENT SEMICOLOM block
    (31) statement -> CASE WHEN . LPARENT condition RPARENT THEN LPARENT block RPARENT ELSE LPARENT block RPARENT SEMICOLOM block

    LPARENT         shift and go to state 80


state 44

    (32) statement -> CASE ID . whenloop SEMICOLOM block
    (33) statement -> CASE ID . whenloop ELSE LPARENT block RPARENT SEMICOLOM block
    (35) whenloop -> . WHEN condition THEN LPARENT block RPARENT whenloop
    (36) whenloop -> . empty
    (74) empty -> .

    WHEN            shift and go to state 81
    $end            reduce using rule 74 (empty -> .)
    ALTER           reduce using rule 74 (empty -> .)
    CALL            reduce using rule 74 (empty -> .)
    ISTRUE          reduce using rule 74 (empty -> .)
    IF              reduce using rule 74 (empty -> .)
    WHILE           reduce using rule 74 (empty -> .)
    PROC            reduce using rule 74 (empty -> .)
    MOVER           reduce using rule 74 (empty -> .)
    COMMENT         reduce using rule 74 (empty -> .)
    ID              reduce using rule 74 (empty -> .)
    NOT             reduce using rule 74 (empty -> .)
    ALEATORIO       reduce using rule 74 (empty -> .)
    REPEAT          reduce using rule 74 (empty -> .)
    BREAK           reduce using rule 74 (empty -> .)
    UNTIL           reduce using rule 74 (empty -> .)
    CASE            reduce using rule 74 (empty -> .)
    PRINT           reduce using rule 74 (empty -> .)
    DEF             reduce using rule 74 (empty -> .)
    PRINCIPAL       reduce using rule 74 (empty -> .)
    RPARENT         reduce using rule 74 (empty -> .)
    SEMICOLOM       reduce using rule 74 (empty -> .)
    ELSE            reduce using rule 74 (empty -> .)

    whenloop                       shift and go to state 83
    empty                          shift and go to state 82

state 45

    (13) statement -> ISTRUE LPARENT . ID RPARENT SEMICOLOM block

    ID              shift and go to state 84


state 46

    (29) statement -> UNTIL LPARENT . block RPARENT condition SEMICOLOM block
    (2) block -> . varDecl statement principal
    (6) varDecl -> . DEF LPARENT ID COMMA DATATYPE RPARENT SEMICOLOM block
    (7) varDecl -> . DEF LPARENT ID COMMA DATATYPE COMMA expression RPARENT SEMICOLOM block
    (8) varDecl -> . empty
    (74) empty -> .

  ! shift/reduce conflict for DEF resolved as shift
    DEF             shift and go to state 7
    $end            reduce using rule 74 (empty -> .)
    ALTER           reduce using rule 74 (empty -> .)
    CALL            reduce using rule 74 (empty -> .)
    ISTRUE          reduce using rule 74 (empty -> .)
    IF              reduce using rule 74 (empty -> .)
    WHILE           reduce using rule 74 (empty -> .)
    PROC            reduce using rule 74 (empty -> .)
    MOVER           reduce using rule 74 (empty -> .)
    COMMENT         reduce using rule 74 (empty -> .)
    ID              reduce using rule 74 (empty -> .)
    NOT             reduce using rule 74 (empty -> .)
    ALEATORIO       reduce using rule 74 (empty -> .)
    REPEAT          reduce using rule 74 (empty -> .)
    BREAK           reduce using rule 74 (empty -> .)
    UNTIL           reduce using rule 74 (empty -> .)
    CASE            reduce using rule 74 (empty -> .)
    PRINT           reduce using rule 74 (empty -> .)
    PRINCIPAL       reduce using rule 74 (empty -> .)
    RPARENT         reduce using rule 74 (empty -> .)
    SEMICOLOM       reduce using rule 74 (empty -> .)
    ELSE            reduce using rule 74 (empty -> .)

  ! DEF             [ reduce using rule 74 (empty -> .) ]

    varDecl                        shift and go to state 4
    empty                          shift and go to state 5
    block                          shift and go to state 85

state 47

    (5) principal -> empty .

    $end            reduce using rule 5 (principal -> empty .)
    ALTER           reduce using rule 5 (principal -> empty .)
    CALL            reduce using rule 5 (principal -> empty .)
    ISTRUE          reduce using rule 5 (principal -> empty .)
    IF              reduce using rule 5 (principal -> empty .)
    WHILE           reduce using rule 5 (principal -> empty .)
    PROC            reduce using rule 5 (principal -> empty .)
    MOVER           reduce using rule 5 (principal -> empty .)
    COMMENT         reduce using rule 5 (principal -> empty .)
    ID              reduce using rule 5 (principal -> empty .)
    NOT             reduce using rule 5 (principal -> empty .)
    ALEATORIO       reduce using rule 5 (principal -> empty .)
    REPEAT          reduce using rule 5 (principal -> empty .)
    BREAK           reduce using rule 5 (principal -> empty .)
    UNTIL           reduce using rule 5 (principal -> empty .)
    CASE            reduce using rule 5 (principal -> empty .)
    PRINT           reduce using rule 5 (principal -> empty .)
    DEF             reduce using rule 5 (principal -> empty .)
    PRINCIPAL       reduce using rule 5 (principal -> empty .)
    RPARENT         reduce using rule 5 (principal -> empty .)


state 48

    (2) block -> varDecl statement principal .

    $end            reduce using rule 2 (block -> varDecl statement principal .)
    ALTER           reduce using rule 2 (block -> varDecl statement principal .)
    CALL            reduce using rule 2 (block -> varDecl statement principal .)
    ISTRUE          reduce using rule 2 (block -> varDecl statement principal .)
    IF              reduce using rule 2 (block -> varDecl statement principal .)
    WHILE           reduce using rule 2 (block -> varDecl statement principal .)
    PROC            reduce using rule 2 (block -> varDecl statement principal .)
    MOVER           reduce using rule 2 (block -> varDecl statement principal .)
    COMMENT         reduce using rule 2 (block -> varDecl statement principal .)
    ID              reduce using rule 2 (block -> varDecl statement principal .)
    NOT             reduce using rule 2 (block -> varDecl statement principal .)
    ALEATORIO       reduce using rule 2 (block -> varDecl statement principal .)
    REPEAT          reduce using rule 2 (block -> varDecl statement principal .)
    BREAK           reduce using rule 2 (block -> varDecl statement principal .)
    UNTIL           reduce using rule 2 (block -> varDecl statement principal .)
    CASE            reduce using rule 2 (block -> varDecl statement principal .)
    PRINT           reduce using rule 2 (block -> varDecl statement principal .)
    DEF             reduce using rule 2 (block -> varDecl statement principal .)
    PRINCIPAL       reduce using rule 2 (block -> varDecl statement principal .)
    RPARENT         reduce using rule 2 (block -> varDecl statement principal .)


state 49

    (3) principal -> PRINCIPAL . LPARENT varDecl RPARENT SEMICOLOM block
    (4) principal -> PRINCIPAL . LPARENT statement RPARENT SEMICOLOM block

    LPARENT         shift and go to state 86


state 50

    (18) statement -> print block .

    PRINCIPAL       reduce using rule 18 (statement -> print block .)
    $end            reduce using rule 18 (statement -> print block .)
    RPARENT         reduce using rule 18 (statement -> print block .)
    ALTER           reduce using rule 18 (statement -> print block .)
    CALL            reduce using rule 18 (statement -> print block .)
    ISTRUE          reduce using rule 18 (statement -> print block .)
    IF              reduce using rule 18 (statement -> print block .)
    WHILE           reduce using rule 18 (statement -> print block .)
    PROC            reduce using rule 18 (statement -> print block .)
    MOVER           reduce using rule 18 (statement -> print block .)
    COMMENT         reduce using rule 18 (statement -> print block .)
    ID              reduce using rule 18 (statement -> print block .)
    NOT             reduce using rule 18 (statement -> print block .)
    ALEATORIO       reduce using rule 18 (statement -> print block .)
    REPEAT          reduce using rule 18 (statement -> print block .)
    BREAK           reduce using rule 18 (statement -> print block .)
    UNTIL           reduce using rule 18 (statement -> print block .)
    CASE            reduce using rule 18 (statement -> print block .)
    PRINT           reduce using rule 18 (statement -> print block .)
    DEF             reduce using rule 18 (statement -> print block .)


state 51

    (19) statement -> MOVER LPARENT . movimiento RPARENT SEMICOLOM block
    (42) movimiento -> . ATR
    (43) movimiento -> . ADL
    (44) movimiento -> . ADE
    (45) movimiento -> . AIZ
    (46) movimiento -> . IZQ
    (47) movimiento -> . DER
    (48) movimiento -> . DDE
    (49) movimiento -> . DIZ

    ATR             shift and go to state 93
    ADL             shift and go to state 95
    ADE             shift and go to state 92
    AIZ             shift and go to state 87
    IZQ             shift and go to state 91
    DER             shift and go to state 89
    DDE             shift and go to state 90
    DIZ             shift and go to state 94

    movimiento                     shift and go to state 88

state 52

    (72) comment -> COMMENT comment .

    DEF             reduce using rule 72 (comment -> COMMENT comment .)
    ALTER           reduce using rule 72 (comment -> COMMENT comment .)
    CALL            reduce using rule 72 (comment -> COMMENT comment .)
    ISTRUE          reduce using rule 72 (comment -> COMMENT comment .)
    IF              reduce using rule 72 (comment -> COMMENT comment .)
    WHILE           reduce using rule 72 (comment -> COMMENT comment .)
    PROC            reduce using rule 72 (comment -> COMMENT comment .)
    MOVER           reduce using rule 72 (comment -> COMMENT comment .)
    COMMENT         reduce using rule 72 (comment -> COMMENT comment .)
    ID              reduce using rule 72 (comment -> COMMENT comment .)
    NOT             reduce using rule 72 (comment -> COMMENT comment .)
    ALEATORIO       reduce using rule 72 (comment -> COMMENT comment .)
    REPEAT          reduce using rule 72 (comment -> COMMENT comment .)
    BREAK           reduce using rule 72 (comment -> COMMENT comment .)
    UNTIL           reduce using rule 72 (comment -> COMMENT comment .)
    CASE            reduce using rule 72 (comment -> COMMENT comment .)
    PRINT           reduce using rule 72 (comment -> COMMENT comment .)
    PRINCIPAL       reduce using rule 72 (comment -> COMMENT comment .)
    $end            reduce using rule 72 (comment -> COMMENT comment .)
    RPARENT         reduce using rule 72 (comment -> COMMENT comment .)


state 53

    (73) comment -> empty .

    DEF             reduce using rule 73 (comment -> empty .)
    ALTER           reduce using rule 73 (comment -> empty .)
    CALL            reduce using rule 73 (comment -> empty .)
    ISTRUE          reduce using rule 73 (comment -> empty .)
    IF              reduce using rule 73 (comment -> empty .)
    WHILE           reduce using rule 73 (comment -> empty .)
    PROC            reduce using rule 73 (comment -> empty .)
    MOVER           reduce using rule 73 (comment -> empty .)
    COMMENT         reduce using rule 73 (comment -> empty .)
    ID              reduce using rule 73 (comment -> empty .)
    NOT             reduce using rule 73 (comment -> empty .)
    ALEATORIO       reduce using rule 73 (comment -> empty .)
    REPEAT          reduce using rule 73 (comment -> empty .)
    BREAK           reduce using rule 73 (comment -> empty .)
    UNTIL           reduce using rule 73 (comment -> empty .)
    CASE            reduce using rule 73 (comment -> empty .)
    PRINT           reduce using rule 73 (comment -> empty .)
    PRINCIPAL       reduce using rule 73 (comment -> empty .)
    $end            reduce using rule 73 (comment -> empty .)
    RPARENT         reduce using rule 73 (comment -> empty .)


state 54

    (27) statement -> REPEAT LPARENT . block RPARENT SEMICOLOM block
    (2) block -> . varDecl statement principal
    (6) varDecl -> . DEF LPARENT ID COMMA DATATYPE RPARENT SEMICOLOM block
    (7) varDecl -> . DEF LPARENT ID COMMA DATATYPE COMMA expression RPARENT SEMICOLOM block
    (8) varDecl -> . empty
    (74) empty -> .

  ! shift/reduce conflict for DEF resolved as shift
    DEF             shift and go to state 7
    $end            reduce using rule 74 (empty -> .)
    ALTER           reduce using rule 74 (empty -> .)
    CALL            reduce using rule 74 (empty -> .)
    ISTRUE          reduce using rule 74 (empty -> .)
    IF              reduce using rule 74 (empty -> .)
    WHILE           reduce using rule 74 (empty -> .)
    PROC            reduce using rule 74 (empty -> .)
    MOVER           reduce using rule 74 (empty -> .)
    COMMENT         reduce using rule 74 (empty -> .)
    ID              reduce using rule 74 (empty -> .)
    NOT             reduce using rule 74 (empty -> .)
    ALEATORIO       reduce using rule 74 (empty -> .)
    REPEAT          reduce using rule 74 (empty -> .)
    BREAK           reduce using rule 74 (empty -> .)
    UNTIL           reduce using rule 74 (empty -> .)
    CASE            reduce using rule 74 (empty -> .)
    PRINT           reduce using rule 74 (empty -> .)
    PRINCIPAL       reduce using rule 74 (empty -> .)
    RPARENT         reduce using rule 74 (empty -> .)
    SEMICOLOM       reduce using rule 74 (empty -> .)
    ELSE            reduce using rule 74 (empty -> .)

  ! DEF             [ reduce using rule 74 (empty -> .) ]

    varDecl                        shift and go to state 4
    empty                          shift and go to state 5
    block                          shift and go to state 96

state 55

    (26) statement -> ALEATORIO LPARENT . RPARENT SEMICOLOM block

    RPARENT         shift and go to state 97


state 56

    (21) statement -> ID LPARENT . ID RPARENT SEMICOLOM block
    (22) statement -> ID LPARENT . statement RPARENT SEMICOLOM block
    (23) statement -> ID LPARENT . BOOLEAN RPARENT SEMICOLOM block
    (24) statement -> ID LPARENT . expression RPARENT SEMICOLOM block
    (11) statement -> . ALTER LPARENT ID COMMA expression RPARENT SEMICOLOM block
    (12) statement -> . CALL LPARENT ID RPARENT block
    (13) statement -> . ISTRUE LPARENT ID RPARENT SEMICOLOM block
    (14) statement -> . IF condition LPARENT statement RPARENT block
    (15) statement -> . WHILE condition LPARENT statement RPARENT SEMICOLOM block
    (16) statement -> . PROC ID LPARENT varDecl RPARENT SEMICOLOM block
    (17) statement -> . PROC ID LPARENT statement RPARENT SEMICOLOM block
    (18) statement -> . print block
    (19) statement -> . MOVER LPARENT movimiento RPARENT SEMICOLOM block
    (20) statement -> . comment block
    (21) statement -> . ID LPARENT ID RPARENT SEMICOLOM block
    (22) statement -> . ID LPARENT statement RPARENT SEMICOLOM block
    (23) statement -> . ID LPARENT BOOLEAN RPARENT SEMICOLOM block
    (24) statement -> . ID LPARENT expression RPARENT SEMICOLOM block
    (25) statement -> . NOT LPARENT ID RPARENT SEMICOLOM block
    (26) statement -> . ALEATORIO LPARENT RPARENT SEMICOLOM block
    (27) statement -> . REPEAT LPARENT block RPARENT SEMICOLOM block
    (28) statement -> . BREAK
    (29) statement -> . UNTIL LPARENT block RPARENT condition SEMICOLOM block
    (30) statement -> . CASE WHEN LPARENT condition RPARENT THEN LPARENT block RPARENT SEMICOLOM block
    (31) statement -> . CASE WHEN LPARENT condition RPARENT THEN LPARENT block RPARENT ELSE LPARENT block RPARENT SEMICOLOM block
    (32) statement -> . CASE ID whenloop SEMICOLOM block
    (33) statement -> . CASE ID whenloop ELSE LPARENT block RPARENT SEMICOLOM block
    (34) statement -> . empty
    (56) expression -> . term
    (57) expression -> . addingOperator term
    (58) expression -> . expression addingOperator term
    (37) print -> . PRINT LPARENT ID RPARENT SEMICOLOM block
    (38) print -> . PRINT LPARENT STRING RPARENT SEMICOLOM block
    (39) print -> . PRINT LPARENT expression RPARENT SEMICOLOM block
    (72) comment -> . COMMENT comment
    (73) comment -> . empty
    (74) empty -> .
    (61) term -> . factor
    (62) term -> . term multiplyingOperator factor
    (59) addingOperator -> . PLUS
    (60) addingOperator -> . MINUS
    (67) factor -> . INTEGER
    (68) factor -> . BOOLEAN
    (69) factor -> . ID
    (70) factor -> . LPARENT expression RPARENT

  ! shift/reduce conflict for ALTER resolved as shift
  ! shift/reduce conflict for CALL resolved as shift
  ! shift/reduce conflict for ISTRUE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for PROC resolved as shift
  ! shift/reduce conflict for MOVER resolved as shift
  ! shift/reduce conflict for COMMENT resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for ALEATORIO resolved as shift
  ! shift/reduce conflict for REPEAT resolved as shift
  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for UNTIL resolved as shift
  ! shift/reduce conflict for CASE resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
    ID              shift and go to state 99
    BOOLEAN         shift and go to state 101
    ALTER           shift and go to state 11
    CALL            shift and go to state 25
    ISTRUE          shift and go to state 13
    IF              shift and go to state 23
    WHILE           shift and go to state 9
    PROC            shift and go to state 27
    MOVER           shift and go to state 17
    NOT             shift and go to state 26
    ALEATORIO       shift and go to state 21
    REPEAT          shift and go to state 20
    BREAK           shift and go to state 24
    UNTIL           shift and go to state 14
    CASE            shift and go to state 12
    PRINT           shift and go to state 10
    COMMENT         shift and go to state 19
    $end            reduce using rule 74 (empty -> .)
    DEF             reduce using rule 74 (empty -> .)
    PRINCIPAL       reduce using rule 74 (empty -> .)
    RPARENT         reduce using rule 74 (empty -> .)
    SEMICOLOM       reduce using rule 74 (empty -> .)
    ELSE            reduce using rule 74 (empty -> .)
    PLUS            shift and go to state 37
    MINUS           shift and go to state 39
    INTEGER         shift and go to state 33
    LPARENT         shift and go to state 31

  ! ALTER           [ reduce using rule 74 (empty -> .) ]
  ! CALL            [ reduce using rule 74 (empty -> .) ]
  ! ISTRUE          [ reduce using rule 74 (empty -> .) ]
  ! IF              [ reduce using rule 74 (empty -> .) ]
  ! WHILE           [ reduce using rule 74 (empty -> .) ]
  ! PROC            [ reduce using rule 74 (empty -> .) ]
  ! MOVER           [ reduce using rule 74 (empty -> .) ]
  ! COMMENT         [ reduce using rule 74 (empty -> .) ]
  ! ID              [ reduce using rule 74 (empty -> .) ]
  ! NOT             [ reduce using rule 74 (empty -> .) ]
  ! ALEATORIO       [ reduce using rule 74 (empty -> .) ]
  ! REPEAT          [ reduce using rule 74 (empty -> .) ]
  ! BREAK           [ reduce using rule 74 (empty -> .) ]
  ! UNTIL           [ reduce using rule 74 (empty -> .) ]
  ! CASE            [ reduce using rule 74 (empty -> .) ]
  ! PRINT           [ reduce using rule 74 (empty -> .) ]

    comment                        shift and go to state 8
    addingOperator                 shift and go to state 32
    term                           shift and go to state 30
    empty                          shift and go to state 18
    statement                      shift and go to state 98
    factor                         shift and go to state 36
    print                          shift and go to state 16
    expression                     shift and go to state 100

state 57

    (14) statement -> IF condition . LPARENT statement RPARENT block

    LPARENT         shift and go to state 102


state 58

    (12) statement -> CALL LPARENT . ID RPARENT block

    ID              shift and go to state 103


state 59

    (25) statement -> NOT LPARENT . ID RPARENT SEMICOLOM block

    ID              shift and go to state 104


state 60

    (16) statement -> PROC ID . LPARENT varDecl RPARENT SEMICOLOM block
    (17) statement -> PROC ID . LPARENT statement RPARENT SEMICOLOM block

    LPARENT         shift and go to state 105


state 61

    (6) varDecl -> DEF LPARENT ID . COMMA DATATYPE RPARENT SEMICOLOM block
    (7) varDecl -> DEF LPARENT ID . COMMA DATATYPE COMMA expression RPARENT SEMICOLOM block

    COMMA           shift and go to state 106


state 62

    (62) term -> term multiplyingOperator . factor
    (67) factor -> . INTEGER
    (68) factor -> . BOOLEAN
    (69) factor -> . ID
    (70) factor -> . LPARENT expression RPARENT

    INTEGER         shift and go to state 33
    BOOLEAN         shift and go to state 35
    ID              shift and go to state 34
    LPARENT         shift and go to state 31

    factor                         shift and go to state 107

state 63

    (64) multiplyingOperator -> DIVIDE .

    INTEGER         reduce using rule 64 (multiplyingOperator -> DIVIDE .)
    BOOLEAN         reduce using rule 64 (multiplyingOperator -> DIVIDE .)
    ID              reduce using rule 64 (multiplyingOperator -> DIVIDE .)
    LPARENT         reduce using rule 64 (multiplyingOperator -> DIVIDE .)


state 64

    (63) multiplyingOperator -> TIMES .

    INTEGER         reduce using rule 63 (multiplyingOperator -> TIMES .)
    BOOLEAN         reduce using rule 63 (multiplyingOperator -> TIMES .)
    ID              reduce using rule 63 (multiplyingOperator -> TIMES .)
    LPARENT         reduce using rule 63 (multiplyingOperator -> TIMES .)


state 65

    (70) factor -> LPARENT expression . RPARENT
    (58) expression -> expression . addingOperator term
    (59) addingOperator -> . PLUS
    (60) addingOperator -> . MINUS

    RPARENT         shift and go to state 108
    PLUS            shift and go to state 37
    MINUS           shift and go to state 39

    addingOperator                 shift and go to state 67

state 66

    (57) expression -> addingOperator term .
    (62) term -> term . multiplyingOperator factor
    (63) multiplyingOperator -> . TIMES
    (64) multiplyingOperator -> . DIVIDE

    RPARENT         reduce using rule 57 (expression -> addingOperator term .)
    LPARENT         reduce using rule 57 (expression -> addingOperator term .)
    SEMICOLOM       reduce using rule 57 (expression -> addingOperator term .)
    THEN            reduce using rule 57 (expression -> addingOperator term .)
    ASSIGN          reduce using rule 57 (expression -> addingOperator term .)
    NE              reduce using rule 57 (expression -> addingOperator term .)
    LT              reduce using rule 57 (expression -> addingOperator term .)
    GT              reduce using rule 57 (expression -> addingOperator term .)
    LTE             reduce using rule 57 (expression -> addingOperator term .)
    GTE             reduce using rule 57 (expression -> addingOperator term .)
    PLUS            reduce using rule 57 (expression -> addingOperator term .)
    MINUS           reduce using rule 57 (expression -> addingOperator term .)
    TIMES           shift and go to state 64
    DIVIDE          shift and go to state 63

    multiplyingOperator            shift and go to state 62

state 67

    (58) expression -> expression addingOperator . term
    (61) term -> . factor
    (62) term -> . term multiplyingOperator factor
    (67) factor -> . INTEGER
    (68) factor -> . BOOLEAN
    (69) factor -> . ID
    (70) factor -> . LPARENT expression RPARENT

    INTEGER         shift and go to state 33
    BOOLEAN         shift and go to state 35
    ID              shift and go to state 34
    LPARENT         shift and go to state 31

    term                           shift and go to state 109
    factor                         shift and go to state 36

state 68

    (53) relation -> GT .

    PLUS            reduce using rule 53 (relation -> GT .)
    MINUS           reduce using rule 53 (relation -> GT .)
    INTEGER         reduce using rule 53 (relation -> GT .)
    BOOLEAN         reduce using rule 53 (relation -> GT .)
    ID              reduce using rule 53 (relation -> GT .)
    LPARENT         reduce using rule 53 (relation -> GT .)


state 69

    (55) relation -> GTE .

    PLUS            reduce using rule 55 (relation -> GTE .)
    MINUS           reduce using rule 55 (relation -> GTE .)
    INTEGER         reduce using rule 55 (relation -> GTE .)
    BOOLEAN         reduce using rule 55 (relation -> GTE .)
    ID              reduce using rule 55 (relation -> GTE .)
    LPARENT         reduce using rule 55 (relation -> GTE .)


state 70

    (51) relation -> NE .

    PLUS            reduce using rule 51 (relation -> NE .)
    MINUS           reduce using rule 51 (relation -> NE .)
    INTEGER         reduce using rule 51 (relation -> NE .)
    BOOLEAN         reduce using rule 51 (relation -> NE .)
    ID              reduce using rule 51 (relation -> NE .)
    LPARENT         reduce using rule 51 (relation -> NE .)


state 71

    (52) relation -> LT .

    PLUS            reduce using rule 52 (relation -> LT .)
    MINUS           reduce using rule 52 (relation -> LT .)
    INTEGER         reduce using rule 52 (relation -> LT .)
    BOOLEAN         reduce using rule 52 (relation -> LT .)
    ID              reduce using rule 52 (relation -> LT .)
    LPARENT         reduce using rule 52 (relation -> LT .)


state 72

    (41) condition -> expression relation . expression
    (56) expression -> . term
    (57) expression -> . addingOperator term
    (58) expression -> . expression addingOperator term
    (61) term -> . factor
    (62) term -> . term multiplyingOperator factor
    (59) addingOperator -> . PLUS
    (60) addingOperator -> . MINUS
    (67) factor -> . INTEGER
    (68) factor -> . BOOLEAN
    (69) factor -> . ID
    (70) factor -> . LPARENT expression RPARENT

    PLUS            shift and go to state 37
    MINUS           shift and go to state 39
    INTEGER         shift and go to state 33
    BOOLEAN         shift and go to state 35
    ID              shift and go to state 34
    LPARENT         shift and go to state 31

    addingOperator                 shift and go to state 32
    term                           shift and go to state 30
    factor                         shift and go to state 36
    expression                     shift and go to state 110

state 73

    (54) relation -> LTE .

    PLUS            reduce using rule 54 (relation -> LTE .)
    MINUS           reduce using rule 54 (relation -> LTE .)
    INTEGER         reduce using rule 54 (relation -> LTE .)
    BOOLEAN         reduce using rule 54 (relation -> LTE .)
    ID              reduce using rule 54 (relation -> LTE .)
    LPARENT         reduce using rule 54 (relation -> LTE .)


state 74

    (50) relation -> ASSIGN .

    PLUS            reduce using rule 50 (relation -> ASSIGN .)
    MINUS           reduce using rule 50 (relation -> ASSIGN .)
    INTEGER         reduce using rule 50 (relation -> ASSIGN .)
    BOOLEAN         reduce using rule 50 (relation -> ASSIGN .)
    ID              reduce using rule 50 (relation -> ASSIGN .)
    LPARENT         reduce using rule 50 (relation -> ASSIGN .)


state 75

    (15) statement -> WHILE condition LPARENT . statement RPARENT SEMICOLOM block
    (11) statement -> . ALTER LPARENT ID COMMA expression RPARENT SEMICOLOM block
    (12) statement -> . CALL LPARENT ID RPARENT block
    (13) statement -> . ISTRUE LPARENT ID RPARENT SEMICOLOM block
    (14) statement -> . IF condition LPARENT statement RPARENT block
    (15) statement -> . WHILE condition LPARENT statement RPARENT SEMICOLOM block
    (16) statement -> . PROC ID LPARENT varDecl RPARENT SEMICOLOM block
    (17) statement -> . PROC ID LPARENT statement RPARENT SEMICOLOM block
    (18) statement -> . print block
    (19) statement -> . MOVER LPARENT movimiento RPARENT SEMICOLOM block
    (20) statement -> . comment block
    (21) statement -> . ID LPARENT ID RPARENT SEMICOLOM block
    (22) statement -> . ID LPARENT statement RPARENT SEMICOLOM block
    (23) statement -> . ID LPARENT BOOLEAN RPARENT SEMICOLOM block
    (24) statement -> . ID LPARENT expression RPARENT SEMICOLOM block
    (25) statement -> . NOT LPARENT ID RPARENT SEMICOLOM block
    (26) statement -> . ALEATORIO LPARENT RPARENT SEMICOLOM block
    (27) statement -> . REPEAT LPARENT block RPARENT SEMICOLOM block
    (28) statement -> . BREAK
    (29) statement -> . UNTIL LPARENT block RPARENT condition SEMICOLOM block
    (30) statement -> . CASE WHEN LPARENT condition RPARENT THEN LPARENT block RPARENT SEMICOLOM block
    (31) statement -> . CASE WHEN LPARENT condition RPARENT THEN LPARENT block RPARENT ELSE LPARENT block RPARENT SEMICOLOM block
    (32) statement -> . CASE ID whenloop SEMICOLOM block
    (33) statement -> . CASE ID whenloop ELSE LPARENT block RPARENT SEMICOLOM block
    (34) statement -> . empty
    (37) print -> . PRINT LPARENT ID RPARENT SEMICOLOM block
    (38) print -> . PRINT LPARENT STRING RPARENT SEMICOLOM block
    (39) print -> . PRINT LPARENT expression RPARENT SEMICOLOM block
    (72) comment -> . COMMENT comment
    (73) comment -> . empty
    (74) empty -> .

  ! shift/reduce conflict for ALTER resolved as shift
  ! shift/reduce conflict for CALL resolved as shift
  ! shift/reduce conflict for ISTRUE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for PROC resolved as shift
  ! shift/reduce conflict for MOVER resolved as shift
  ! shift/reduce conflict for COMMENT resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for ALEATORIO resolved as shift
  ! shift/reduce conflict for REPEAT resolved as shift
  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for UNTIL resolved as shift
  ! shift/reduce conflict for CASE resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
    ALTER           shift and go to state 11
    CALL            shift and go to state 25
    ISTRUE          shift and go to state 13
    IF              shift and go to state 23
    WHILE           shift and go to state 9
    PROC            shift and go to state 27
    MOVER           shift and go to state 17
    ID              shift and go to state 22
    NOT             shift and go to state 26
    ALEATORIO       shift and go to state 21
    REPEAT          shift and go to state 20
    BREAK           shift and go to state 24
    UNTIL           shift and go to state 14
    CASE            shift and go to state 12
    PRINT           shift and go to state 10
    COMMENT         shift and go to state 19
    $end            reduce using rule 74 (empty -> .)
    DEF             reduce using rule 74 (empty -> .)
    PRINCIPAL       reduce using rule 74 (empty -> .)
    RPARENT         reduce using rule 74 (empty -> .)
    SEMICOLOM       reduce using rule 74 (empty -> .)
    ELSE            reduce using rule 74 (empty -> .)

  ! ALTER           [ reduce using rule 74 (empty -> .) ]
  ! CALL            [ reduce using rule 74 (empty -> .) ]
  ! ISTRUE          [ reduce using rule 74 (empty -> .) ]
  ! IF              [ reduce using rule 74 (empty -> .) ]
  ! WHILE           [ reduce using rule 74 (empty -> .) ]
  ! PROC            [ reduce using rule 74 (empty -> .) ]
  ! MOVER           [ reduce using rule 74 (empty -> .) ]
  ! COMMENT         [ reduce using rule 74 (empty -> .) ]
  ! ID              [ reduce using rule 74 (empty -> .) ]
  ! NOT             [ reduce using rule 74 (empty -> .) ]
  ! ALEATORIO       [ reduce using rule 74 (empty -> .) ]
  ! REPEAT          [ reduce using rule 74 (empty -> .) ]
  ! BREAK           [ reduce using rule 74 (empty -> .) ]
  ! UNTIL           [ reduce using rule 74 (empty -> .) ]
  ! CASE            [ reduce using rule 74 (empty -> .) ]
  ! PRINT           [ reduce using rule 74 (empty -> .) ]

    comment                        shift and go to state 8
    empty                          shift and go to state 18
    statement                      shift and go to state 111
    print                          shift and go to state 16

state 76

    (39) print -> PRINT LPARENT expression . RPARENT SEMICOLOM block
    (58) expression -> expression . addingOperator term
    (59) addingOperator -> . PLUS
    (60) addingOperator -> . MINUS

    RPARENT         shift and go to state 112
    PLUS            shift and go to state 37
    MINUS           shift and go to state 39

    addingOperator                 shift and go to state 67

state 77

    (37) print -> PRINT LPARENT ID . RPARENT SEMICOLOM block
    (69) factor -> ID .

  ! shift/reduce conflict for RPARENT resolved as shift
    RPARENT         shift and go to state 113
    LPARENT         reduce using rule 69 (factor -> ID .)
    SEMICOLOM       reduce using rule 69 (factor -> ID .)
    THEN            reduce using rule 69 (factor -> ID .)
    ASSIGN          reduce using rule 69 (factor -> ID .)
    NE              reduce using rule 69 (factor -> ID .)
    LT              reduce using rule 69 (factor -> ID .)
    GT              reduce using rule 69 (factor -> ID .)
    LTE             reduce using rule 69 (factor -> ID .)
    GTE             reduce using rule 69 (factor -> ID .)
    PLUS            reduce using rule 69 (factor -> ID .)
    MINUS           reduce using rule 69 (factor -> ID .)
    TIMES           reduce using rule 69 (factor -> ID .)
    DIVIDE          reduce using rule 69 (factor -> ID .)

  ! RPARENT         [ reduce using rule 69 (factor -> ID .) ]


state 78

    (38) print -> PRINT LPARENT STRING . RPARENT SEMICOLOM block

    RPARENT         shift and go to state 114


state 79

    (11) statement -> ALTER LPARENT ID . COMMA expression RPARENT SEMICOLOM block

    COMMA           shift and go to state 115


state 80

    (30) statement -> CASE WHEN LPARENT . condition RPARENT THEN LPARENT block RPARENT SEMICOLOM block
    (31) statement -> CASE WHEN LPARENT . condition RPARENT THEN LPARENT block RPARENT ELSE LPARENT block RPARENT SEMICOLOM block
    (40) condition -> . expression
    (41) condition -> . expression relation expression
    (56) expression -> . term
    (57) expression -> . addingOperator term
    (58) expression -> . expression addingOperator term
    (61) term -> . factor
    (62) term -> . term multiplyingOperator factor
    (59) addingOperator -> . PLUS
    (60) addingOperator -> . MINUS
    (67) factor -> . INTEGER
    (68) factor -> . BOOLEAN
    (69) factor -> . ID
    (70) factor -> . LPARENT expression RPARENT

    PLUS            shift and go to state 37
    MINUS           shift and go to state 39
    INTEGER         shift and go to state 33
    BOOLEAN         shift and go to state 35
    ID              shift and go to state 34
    LPARENT         shift and go to state 31

    addingOperator                 shift and go to state 32
    term                           shift and go to state 30
    condition                      shift and go to state 116
    factor                         shift and go to state 36
    expression                     shift and go to state 38

state 81

    (35) whenloop -> WHEN . condition THEN LPARENT block RPARENT whenloop
    (40) condition -> . expression
    (41) condition -> . expression relation expression
    (56) expression -> . term
    (57) expression -> . addingOperator term
    (58) expression -> . expression addingOperator term
    (61) term -> . factor
    (62) term -> . term multiplyingOperator factor
    (59) addingOperator -> . PLUS
    (60) addingOperator -> . MINUS
    (67) factor -> . INTEGER
    (68) factor -> . BOOLEAN
    (69) factor -> . ID
    (70) factor -> . LPARENT expression RPARENT

    PLUS            shift and go to state 37
    MINUS           shift and go to state 39
    INTEGER         shift and go to state 33
    BOOLEAN         shift and go to state 35
    ID              shift and go to state 34
    LPARENT         shift and go to state 31

    addingOperator                 shift and go to state 32
    term                           shift and go to state 30
    condition                      shift and go to state 117
    factor                         shift and go to state 36
    expression                     shift and go to state 38

state 82

    (36) whenloop -> empty .

    SEMICOLOM       reduce using rule 36 (whenloop -> empty .)
    ELSE            reduce using rule 36 (whenloop -> empty .)


state 83

    (32) statement -> CASE ID whenloop . SEMICOLOM block
    (33) statement -> CASE ID whenloop . ELSE LPARENT block RPARENT SEMICOLOM block

    SEMICOLOM       shift and go to state 118
    ELSE            shift and go to state 119


state 84

    (13) statement -> ISTRUE LPARENT ID . RPARENT SEMICOLOM block

    RPARENT         shift and go to state 120


state 85

    (29) statement -> UNTIL LPARENT block . RPARENT condition SEMICOLOM block

    RPARENT         shift and go to state 121


state 86

    (3) principal -> PRINCIPAL LPARENT . varDecl RPARENT SEMICOLOM block
    (4) principal -> PRINCIPAL LPARENT . statement RPARENT SEMICOLOM block
    (6) varDecl -> . DEF LPARENT ID COMMA DATATYPE RPARENT SEMICOLOM block
    (7) varDecl -> . DEF LPARENT ID COMMA DATATYPE COMMA expression RPARENT SEMICOLOM block
    (8) varDecl -> . empty
    (11) statement -> . ALTER LPARENT ID COMMA expression RPARENT SEMICOLOM block
    (12) statement -> . CALL LPARENT ID RPARENT block
    (13) statement -> . ISTRUE LPARENT ID RPARENT SEMICOLOM block
    (14) statement -> . IF condition LPARENT statement RPARENT block
    (15) statement -> . WHILE condition LPARENT statement RPARENT SEMICOLOM block
    (16) statement -> . PROC ID LPARENT varDecl RPARENT SEMICOLOM block
    (17) statement -> . PROC ID LPARENT statement RPARENT SEMICOLOM block
    (18) statement -> . print block
    (19) statement -> . MOVER LPARENT movimiento RPARENT SEMICOLOM block
    (20) statement -> . comment block
    (21) statement -> . ID LPARENT ID RPARENT SEMICOLOM block
    (22) statement -> . ID LPARENT statement RPARENT SEMICOLOM block
    (23) statement -> . ID LPARENT BOOLEAN RPARENT SEMICOLOM block
    (24) statement -> . ID LPARENT expression RPARENT SEMICOLOM block
    (25) statement -> . NOT LPARENT ID RPARENT SEMICOLOM block
    (26) statement -> . ALEATORIO LPARENT RPARENT SEMICOLOM block
    (27) statement -> . REPEAT LPARENT block RPARENT SEMICOLOM block
    (28) statement -> . BREAK
    (29) statement -> . UNTIL LPARENT block RPARENT condition SEMICOLOM block
    (30) statement -> . CASE WHEN LPARENT condition RPARENT THEN LPARENT block RPARENT SEMICOLOM block
    (31) statement -> . CASE WHEN LPARENT condition RPARENT THEN LPARENT block RPARENT ELSE LPARENT block RPARENT SEMICOLOM block
    (32) statement -> . CASE ID whenloop SEMICOLOM block
    (33) statement -> . CASE ID whenloop ELSE LPARENT block RPARENT SEMICOLOM block
    (34) statement -> . empty
    (74) empty -> .
    (37) print -> . PRINT LPARENT ID RPARENT SEMICOLOM block
    (38) print -> . PRINT LPARENT STRING RPARENT SEMICOLOM block
    (39) print -> . PRINT LPARENT expression RPARENT SEMICOLOM block
    (72) comment -> . COMMENT comment
    (73) comment -> . empty

  ! shift/reduce conflict for ALTER resolved as shift
  ! shift/reduce conflict for CALL resolved as shift
  ! shift/reduce conflict for ISTRUE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for PROC resolved as shift
  ! shift/reduce conflict for MOVER resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for ALEATORIO resolved as shift
  ! shift/reduce conflict for REPEAT resolved as shift
  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for UNTIL resolved as shift
  ! shift/reduce conflict for CASE resolved as shift
  ! shift/reduce conflict for DEF resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for COMMENT resolved as shift
    DEF             shift and go to state 7
    ALTER           shift and go to state 11
    CALL            shift and go to state 25
    ISTRUE          shift and go to state 13
    IF              shift and go to state 23
    WHILE           shift and go to state 9
    PROC            shift and go to state 27
    MOVER           shift and go to state 17
    ID              shift and go to state 22
    NOT             shift and go to state 26
    ALEATORIO       shift and go to state 21
    REPEAT          shift and go to state 20
    BREAK           shift and go to state 24
    UNTIL           shift and go to state 14
    CASE            shift and go to state 12
    $end            reduce using rule 74 (empty -> .)
    PRINCIPAL       reduce using rule 74 (empty -> .)
    RPARENT         reduce using rule 74 (empty -> .)
    SEMICOLOM       reduce using rule 74 (empty -> .)
    ELSE            reduce using rule 74 (empty -> .)
    PRINT           shift and go to state 10
    COMMENT         shift and go to state 19

  ! ALTER           [ reduce using rule 74 (empty -> .) ]
  ! CALL            [ reduce using rule 74 (empty -> .) ]
  ! ISTRUE          [ reduce using rule 74 (empty -> .) ]
  ! IF              [ reduce using rule 74 (empty -> .) ]
  ! WHILE           [ reduce using rule 74 (empty -> .) ]
  ! PROC            [ reduce using rule 74 (empty -> .) ]
  ! MOVER           [ reduce using rule 74 (empty -> .) ]
  ! COMMENT         [ reduce using rule 74 (empty -> .) ]
  ! ID              [ reduce using rule 74 (empty -> .) ]
  ! NOT             [ reduce using rule 74 (empty -> .) ]
  ! ALEATORIO       [ reduce using rule 74 (empty -> .) ]
  ! REPEAT          [ reduce using rule 74 (empty -> .) ]
  ! BREAK           [ reduce using rule 74 (empty -> .) ]
  ! UNTIL           [ reduce using rule 74 (empty -> .) ]
  ! CASE            [ reduce using rule 74 (empty -> .) ]
  ! PRINT           [ reduce using rule 74 (empty -> .) ]
  ! DEF             [ reduce using rule 74 (empty -> .) ]

    comment                        shift and go to state 8
    varDecl                        shift and go to state 124
    statement                      shift and go to state 122
    print                          shift and go to state 16
    empty                          shift and go to state 123

state 87

    (45) movimiento -> AIZ .

    RPARENT         reduce using rule 45 (movimiento -> AIZ .)


state 88

    (19) statement -> MOVER LPARENT movimiento . RPARENT SEMICOLOM block

    RPARENT         shift and go to state 125


state 89

    (47) movimiento -> DER .

    RPARENT         reduce using rule 47 (movimiento -> DER .)


state 90

    (48) movimiento -> DDE .

    RPARENT         reduce using rule 48 (movimiento -> DDE .)


state 91

    (46) movimiento -> IZQ .

    RPARENT         reduce using rule 46 (movimiento -> IZQ .)


state 92

    (44) movimiento -> ADE .

    RPARENT         reduce using rule 44 (movimiento -> ADE .)


state 93

    (42) movimiento -> ATR .

    RPARENT         reduce using rule 42 (movimiento -> ATR .)


state 94

    (49) movimiento -> DIZ .

    RPARENT         reduce using rule 49 (movimiento -> DIZ .)


state 95

    (43) movimiento -> ADL .

    RPARENT         reduce using rule 43 (movimiento -> ADL .)


state 96

    (27) statement -> REPEAT LPARENT block . RPARENT SEMICOLOM block

    RPARENT         shift and go to state 126


state 97

    (26) statement -> ALEATORIO LPARENT RPARENT . SEMICOLOM block

    SEMICOLOM       shift and go to state 127


state 98

    (22) statement -> ID LPARENT statement . RPARENT SEMICOLOM block

    RPARENT         shift and go to state 128


state 99

    (21) statement -> ID LPARENT ID . RPARENT SEMICOLOM block
    (21) statement -> ID . LPARENT ID RPARENT SEMICOLOM block
    (22) statement -> ID . LPARENT statement RPARENT SEMICOLOM block
    (23) statement -> ID . LPARENT BOOLEAN RPARENT SEMICOLOM block
    (24) statement -> ID . LPARENT expression RPARENT SEMICOLOM block
    (69) factor -> ID .

  ! shift/reduce conflict for RPARENT resolved as shift
  ! shift/reduce conflict for LPARENT resolved as shift
    RPARENT         shift and go to state 129
    LPARENT         shift and go to state 56
    SEMICOLOM       reduce using rule 69 (factor -> ID .)
    THEN            reduce using rule 69 (factor -> ID .)
    ASSIGN          reduce using rule 69 (factor -> ID .)
    NE              reduce using rule 69 (factor -> ID .)
    LT              reduce using rule 69 (factor -> ID .)
    GT              reduce using rule 69 (factor -> ID .)
    LTE             reduce using rule 69 (factor -> ID .)
    GTE             reduce using rule 69 (factor -> ID .)
    PLUS            reduce using rule 69 (factor -> ID .)
    MINUS           reduce using rule 69 (factor -> ID .)
    TIMES           reduce using rule 69 (factor -> ID .)
    DIVIDE          reduce using rule 69 (factor -> ID .)

  ! RPARENT         [ reduce using rule 69 (factor -> ID .) ]
  ! LPARENT         [ reduce using rule 69 (factor -> ID .) ]


state 100

    (24) statement -> ID LPARENT expression . RPARENT SEMICOLOM block
    (58) expression -> expression . addingOperator term
    (59) addingOperator -> . PLUS
    (60) addingOperator -> . MINUS

    RPARENT         shift and go to state 130
    PLUS            shift and go to state 37
    MINUS           shift and go to state 39

    addingOperator                 shift and go to state 67

state 101

    (23) statement -> ID LPARENT BOOLEAN . RPARENT SEMICOLOM block
    (68) factor -> BOOLEAN .

  ! shift/reduce conflict for RPARENT resolved as shift
    RPARENT         shift and go to state 131
    LPARENT         reduce using rule 68 (factor -> BOOLEAN .)
    SEMICOLOM       reduce using rule 68 (factor -> BOOLEAN .)
    THEN            reduce using rule 68 (factor -> BOOLEAN .)
    ASSIGN          reduce using rule 68 (factor -> BOOLEAN .)
    NE              reduce using rule 68 (factor -> BOOLEAN .)
    LT              reduce using rule 68 (factor -> BOOLEAN .)
    GT              reduce using rule 68 (factor -> BOOLEAN .)
    LTE             reduce using rule 68 (factor -> BOOLEAN .)
    GTE             reduce using rule 68 (factor -> BOOLEAN .)
    PLUS            reduce using rule 68 (factor -> BOOLEAN .)
    MINUS           reduce using rule 68 (factor -> BOOLEAN .)
    TIMES           reduce using rule 68 (factor -> BOOLEAN .)
    DIVIDE          reduce using rule 68 (factor -> BOOLEAN .)

  ! RPARENT         [ reduce using rule 68 (factor -> BOOLEAN .) ]


state 102

    (14) statement -> IF condition LPARENT . statement RPARENT block
    (11) statement -> . ALTER LPARENT ID COMMA expression RPARENT SEMICOLOM block
    (12) statement -> . CALL LPARENT ID RPARENT block
    (13) statement -> . ISTRUE LPARENT ID RPARENT SEMICOLOM block
    (14) statement -> . IF condition LPARENT statement RPARENT block
    (15) statement -> . WHILE condition LPARENT statement RPARENT SEMICOLOM block
    (16) statement -> . PROC ID LPARENT varDecl RPARENT SEMICOLOM block
    (17) statement -> . PROC ID LPARENT statement RPARENT SEMICOLOM block
    (18) statement -> . print block
    (19) statement -> . MOVER LPARENT movimiento RPARENT SEMICOLOM block
    (20) statement -> . comment block
    (21) statement -> . ID LPARENT ID RPARENT SEMICOLOM block
    (22) statement -> . ID LPARENT statement RPARENT SEMICOLOM block
    (23) statement -> . ID LPARENT BOOLEAN RPARENT SEMICOLOM block
    (24) statement -> . ID LPARENT expression RPARENT SEMICOLOM block
    (25) statement -> . NOT LPARENT ID RPARENT SEMICOLOM block
    (26) statement -> . ALEATORIO LPARENT RPARENT SEMICOLOM block
    (27) statement -> . REPEAT LPARENT block RPARENT SEMICOLOM block
    (28) statement -> . BREAK
    (29) statement -> . UNTIL LPARENT block RPARENT condition SEMICOLOM block
    (30) statement -> . CASE WHEN LPARENT condition RPARENT THEN LPARENT block RPARENT SEMICOLOM block
    (31) statement -> . CASE WHEN LPARENT condition RPARENT THEN LPARENT block RPARENT ELSE LPARENT block RPARENT SEMICOLOM block
    (32) statement -> . CASE ID whenloop SEMICOLOM block
    (33) statement -> . CASE ID whenloop ELSE LPARENT block RPARENT SEMICOLOM block
    (34) statement -> . empty
    (37) print -> . PRINT LPARENT ID RPARENT SEMICOLOM block
    (38) print -> . PRINT LPARENT STRING RPARENT SEMICOLOM block
    (39) print -> . PRINT LPARENT expression RPARENT SEMICOLOM block
    (72) comment -> . COMMENT comment
    (73) comment -> . empty
    (74) empty -> .

  ! shift/reduce conflict for ALTER resolved as shift
  ! shift/reduce conflict for CALL resolved as shift
  ! shift/reduce conflict for ISTRUE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for PROC resolved as shift
  ! shift/reduce conflict for MOVER resolved as shift
  ! shift/reduce conflict for COMMENT resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for ALEATORIO resolved as shift
  ! shift/reduce conflict for REPEAT resolved as shift
  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for UNTIL resolved as shift
  ! shift/reduce conflict for CASE resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
    ALTER           shift and go to state 11
    CALL            shift and go to state 25
    ISTRUE          shift and go to state 13
    IF              shift and go to state 23
    WHILE           shift and go to state 9
    PROC            shift and go to state 27
    MOVER           shift and go to state 17
    ID              shift and go to state 22
    NOT             shift and go to state 26
    ALEATORIO       shift and go to state 21
    REPEAT          shift and go to state 20
    BREAK           shift and go to state 24
    UNTIL           shift and go to state 14
    CASE            shift and go to state 12
    PRINT           shift and go to state 10
    COMMENT         shift and go to state 19
    $end            reduce using rule 74 (empty -> .)
    DEF             reduce using rule 74 (empty -> .)
    PRINCIPAL       reduce using rule 74 (empty -> .)
    RPARENT         reduce using rule 74 (empty -> .)
    SEMICOLOM       reduce using rule 74 (empty -> .)
    ELSE            reduce using rule 74 (empty -> .)

  ! ALTER           [ reduce using rule 74 (empty -> .) ]
  ! CALL            [ reduce using rule 74 (empty -> .) ]
  ! ISTRUE          [ reduce using rule 74 (empty -> .) ]
  ! IF              [ reduce using rule 74 (empty -> .) ]
  ! WHILE           [ reduce using rule 74 (empty -> .) ]
  ! PROC            [ reduce using rule 74 (empty -> .) ]
  ! MOVER           [ reduce using rule 74 (empty -> .) ]
  ! COMMENT         [ reduce using rule 74 (empty -> .) ]
  ! ID              [ reduce using rule 74 (empty -> .) ]
  ! NOT             [ reduce using rule 74 (empty -> .) ]
  ! ALEATORIO       [ reduce using rule 74 (empty -> .) ]
  ! REPEAT          [ reduce using rule 74 (empty -> .) ]
  ! BREAK           [ reduce using rule 74 (empty -> .) ]
  ! UNTIL           [ reduce using rule 74 (empty -> .) ]
  ! CASE            [ reduce using rule 74 (empty -> .) ]
  ! PRINT           [ reduce using rule 74 (empty -> .) ]

    comment                        shift and go to state 8
    empty                          shift and go to state 18
    statement                      shift and go to state 132
    print                          shift and go to state 16

state 103

    (12) statement -> CALL LPARENT ID . RPARENT block

    RPARENT         shift and go to state 133


state 104

    (25) statement -> NOT LPARENT ID . RPARENT SEMICOLOM block

    RPARENT         shift and go to state 134


state 105

    (16) statement -> PROC ID LPARENT . varDecl RPARENT SEMICOLOM block
    (17) statement -> PROC ID LPARENT . statement RPARENT SEMICOLOM block
    (6) varDecl -> . DEF LPARENT ID COMMA DATATYPE RPARENT SEMICOLOM block
    (7) varDecl -> . DEF LPARENT ID COMMA DATATYPE COMMA expression RPARENT SEMICOLOM block
    (8) varDecl -> . empty
    (11) statement -> . ALTER LPARENT ID COMMA expression RPARENT SEMICOLOM block
    (12) statement -> . CALL LPARENT ID RPARENT block
    (13) statement -> . ISTRUE LPARENT ID RPARENT SEMICOLOM block
    (14) statement -> . IF condition LPARENT statement RPARENT block
    (15) statement -> . WHILE condition LPARENT statement RPARENT SEMICOLOM block
    (16) statement -> . PROC ID LPARENT varDecl RPARENT SEMICOLOM block
    (17) statement -> . PROC ID LPARENT statement RPARENT SEMICOLOM block
    (18) statement -> . print block
    (19) statement -> . MOVER LPARENT movimiento RPARENT SEMICOLOM block
    (20) statement -> . comment block
    (21) statement -> . ID LPARENT ID RPARENT SEMICOLOM block
    (22) statement -> . ID LPARENT statement RPARENT SEMICOLOM block
    (23) statement -> . ID LPARENT BOOLEAN RPARENT SEMICOLOM block
    (24) statement -> . ID LPARENT expression RPARENT SEMICOLOM block
    (25) statement -> . NOT LPARENT ID RPARENT SEMICOLOM block
    (26) statement -> . ALEATORIO LPARENT RPARENT SEMICOLOM block
    (27) statement -> . REPEAT LPARENT block RPARENT SEMICOLOM block
    (28) statement -> . BREAK
    (29) statement -> . UNTIL LPARENT block RPARENT condition SEMICOLOM block
    (30) statement -> . CASE WHEN LPARENT condition RPARENT THEN LPARENT block RPARENT SEMICOLOM block
    (31) statement -> . CASE WHEN LPARENT condition RPARENT THEN LPARENT block RPARENT ELSE LPARENT block RPARENT SEMICOLOM block
    (32) statement -> . CASE ID whenloop SEMICOLOM block
    (33) statement -> . CASE ID whenloop ELSE LPARENT block RPARENT SEMICOLOM block
    (34) statement -> . empty
    (74) empty -> .
    (37) print -> . PRINT LPARENT ID RPARENT SEMICOLOM block
    (38) print -> . PRINT LPARENT STRING RPARENT SEMICOLOM block
    (39) print -> . PRINT LPARENT expression RPARENT SEMICOLOM block
    (72) comment -> . COMMENT comment
    (73) comment -> . empty

  ! shift/reduce conflict for ALTER resolved as shift
  ! shift/reduce conflict for CALL resolved as shift
  ! shift/reduce conflict for ISTRUE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for PROC resolved as shift
  ! shift/reduce conflict for MOVER resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for ALEATORIO resolved as shift
  ! shift/reduce conflict for REPEAT resolved as shift
  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for UNTIL resolved as shift
  ! shift/reduce conflict for CASE resolved as shift
  ! shift/reduce conflict for DEF resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for COMMENT resolved as shift
    DEF             shift and go to state 7
    ALTER           shift and go to state 11
    CALL            shift and go to state 25
    ISTRUE          shift and go to state 13
    IF              shift and go to state 23
    WHILE           shift and go to state 9
    PROC            shift and go to state 27
    MOVER           shift and go to state 17
    ID              shift and go to state 22
    NOT             shift and go to state 26
    ALEATORIO       shift and go to state 21
    REPEAT          shift and go to state 20
    BREAK           shift and go to state 24
    UNTIL           shift and go to state 14
    CASE            shift and go to state 12
    $end            reduce using rule 74 (empty -> .)
    PRINCIPAL       reduce using rule 74 (empty -> .)
    RPARENT         reduce using rule 74 (empty -> .)
    SEMICOLOM       reduce using rule 74 (empty -> .)
    ELSE            reduce using rule 74 (empty -> .)
    PRINT           shift and go to state 10
    COMMENT         shift and go to state 19

  ! ALTER           [ reduce using rule 74 (empty -> .) ]
  ! CALL            [ reduce using rule 74 (empty -> .) ]
  ! ISTRUE          [ reduce using rule 74 (empty -> .) ]
  ! IF              [ reduce using rule 74 (empty -> .) ]
  ! WHILE           [ reduce using rule 74 (empty -> .) ]
  ! PROC            [ reduce using rule 74 (empty -> .) ]
  ! MOVER           [ reduce using rule 74 (empty -> .) ]
  ! COMMENT         [ reduce using rule 74 (empty -> .) ]
  ! ID              [ reduce using rule 74 (empty -> .) ]
  ! NOT             [ reduce using rule 74 (empty -> .) ]
  ! ALEATORIO       [ reduce using rule 74 (empty -> .) ]
  ! REPEAT          [ reduce using rule 74 (empty -> .) ]
  ! BREAK           [ reduce using rule 74 (empty -> .) ]
  ! UNTIL           [ reduce using rule 74 (empty -> .) ]
  ! CASE            [ reduce using rule 74 (empty -> .) ]
  ! PRINT           [ reduce using rule 74 (empty -> .) ]
  ! DEF             [ reduce using rule 74 (empty -> .) ]

    comment                        shift and go to state 8
    varDecl                        shift and go to state 136
    statement                      shift and go to state 135
    print                          shift and go to state 16
    empty                          shift and go to state 123

state 106

    (6) varDecl -> DEF LPARENT ID COMMA . DATATYPE RPARENT SEMICOLOM block
    (7) varDecl -> DEF LPARENT ID COMMA . DATATYPE COMMA expression RPARENT SEMICOLOM block
    (65) DATATYPE -> . INTEGERTP
    (66) DATATYPE -> . BOOLEANTP

    INTEGERTP       shift and go to state 139
    BOOLEANTP       shift and go to state 137

    DATATYPE                       shift and go to state 138

state 107

    (62) term -> term multiplyingOperator factor .

    RPARENT         reduce using rule 62 (term -> term multiplyingOperator factor .)
    LPARENT         reduce using rule 62 (term -> term multiplyingOperator factor .)
    SEMICOLOM       reduce using rule 62 (term -> term multiplyingOperator factor .)
    THEN            reduce using rule 62 (term -> term multiplyingOperator factor .)
    ASSIGN          reduce using rule 62 (term -> term multiplyingOperator factor .)
    NE              reduce using rule 62 (term -> term multiplyingOperator factor .)
    LT              reduce using rule 62 (term -> term multiplyingOperator factor .)
    GT              reduce using rule 62 (term -> term multiplyingOperator factor .)
    LTE             reduce using rule 62 (term -> term multiplyingOperator factor .)
    GTE             reduce using rule 62 (term -> term multiplyingOperator factor .)
    PLUS            reduce using rule 62 (term -> term multiplyingOperator factor .)
    MINUS           reduce using rule 62 (term -> term multiplyingOperator factor .)
    TIMES           reduce using rule 62 (term -> term multiplyingOperator factor .)
    DIVIDE          reduce using rule 62 (term -> term multiplyingOperator factor .)


state 108

    (70) factor -> LPARENT expression RPARENT .

    RPARENT         reduce using rule 70 (factor -> LPARENT expression RPARENT .)
    LPARENT         reduce using rule 70 (factor -> LPARENT expression RPARENT .)
    SEMICOLOM       reduce using rule 70 (factor -> LPARENT expression RPARENT .)
    THEN            reduce using rule 70 (factor -> LPARENT expression RPARENT .)
    ASSIGN          reduce using rule 70 (factor -> LPARENT expression RPARENT .)
    NE              reduce using rule 70 (factor -> LPARENT expression RPARENT .)
    LT              reduce using rule 70 (factor -> LPARENT expression RPARENT .)
    GT              reduce using rule 70 (factor -> LPARENT expression RPARENT .)
    LTE             reduce using rule 70 (factor -> LPARENT expression RPARENT .)
    GTE             reduce using rule 70 (factor -> LPARENT expression RPARENT .)
    PLUS            reduce using rule 70 (factor -> LPARENT expression RPARENT .)
    MINUS           reduce using rule 70 (factor -> LPARENT expression RPARENT .)
    TIMES           reduce using rule 70 (factor -> LPARENT expression RPARENT .)
    DIVIDE          reduce using rule 70 (factor -> LPARENT expression RPARENT .)


state 109

    (58) expression -> expression addingOperator term .
    (62) term -> term . multiplyingOperator factor
    (63) multiplyingOperator -> . TIMES
    (64) multiplyingOperator -> . DIVIDE

    RPARENT         reduce using rule 58 (expression -> expression addingOperator term .)
    LPARENT         reduce using rule 58 (expression -> expression addingOperator term .)
    SEMICOLOM       reduce using rule 58 (expression -> expression addingOperator term .)
    THEN            reduce using rule 58 (expression -> expression addingOperator term .)
    ASSIGN          reduce using rule 58 (expression -> expression addingOperator term .)
    NE              reduce using rule 58 (expression -> expression addingOperator term .)
    LT              reduce using rule 58 (expression -> expression addingOperator term .)
    GT              reduce using rule 58 (expression -> expression addingOperator term .)
    LTE             reduce using rule 58 (expression -> expression addingOperator term .)
    GTE             reduce using rule 58 (expression -> expression addingOperator term .)
    PLUS            reduce using rule 58 (expression -> expression addingOperator term .)
    MINUS           reduce using rule 58 (expression -> expression addingOperator term .)
    TIMES           shift and go to state 64
    DIVIDE          shift and go to state 63

    multiplyingOperator            shift and go to state 62

state 110

    (41) condition -> expression relation expression .
    (58) expression -> expression . addingOperator term
    (59) addingOperator -> . PLUS
    (60) addingOperator -> . MINUS

    LPARENT         reduce using rule 41 (condition -> expression relation expression .)
    SEMICOLOM       reduce using rule 41 (condition -> expression relation expression .)
    RPARENT         reduce using rule 41 (condition -> expression relation expression .)
    THEN            reduce using rule 41 (condition -> expression relation expression .)
    PLUS            shift and go to state 37
    MINUS           shift and go to state 39

    addingOperator                 shift and go to state 67

state 111

    (15) statement -> WHILE condition LPARENT statement . RPARENT SEMICOLOM block

    RPARENT         shift and go to state 140


state 112

    (39) print -> PRINT LPARENT expression RPARENT . SEMICOLOM block

    SEMICOLOM       shift and go to state 141


state 113

    (37) print -> PRINT LPARENT ID RPARENT . SEMICOLOM block

    SEMICOLOM       shift and go to state 142


state 114

    (38) print -> PRINT LPARENT STRING RPARENT . SEMICOLOM block

    SEMICOLOM       shift and go to state 143


state 115

    (11) statement -> ALTER LPARENT ID COMMA . expression RPARENT SEMICOLOM block
    (56) expression -> . term
    (57) expression -> . addingOperator term
    (58) expression -> . expression addingOperator term
    (61) term -> . factor
    (62) term -> . term multiplyingOperator factor
    (59) addingOperator -> . PLUS
    (60) addingOperator -> . MINUS
    (67) factor -> . INTEGER
    (68) factor -> . BOOLEAN
    (69) factor -> . ID
    (70) factor -> . LPARENT expression RPARENT

    PLUS            shift and go to state 37
    MINUS           shift and go to state 39
    INTEGER         shift and go to state 33
    BOOLEAN         shift and go to state 35
    ID              shift and go to state 34
    LPARENT         shift and go to state 31

    addingOperator                 shift and go to state 32
    term                           shift and go to state 30
    factor                         shift and go to state 36
    expression                     shift and go to state 144

state 116

    (30) statement -> CASE WHEN LPARENT condition . RPARENT THEN LPARENT block RPARENT SEMICOLOM block
    (31) statement -> CASE WHEN LPARENT condition . RPARENT THEN LPARENT block RPARENT ELSE LPARENT block RPARENT SEMICOLOM block

    RPARENT         shift and go to state 145


state 117

    (35) whenloop -> WHEN condition . THEN LPARENT block RPARENT whenloop

    THEN            shift and go to state 146


state 118

    (32) statement -> CASE ID whenloop SEMICOLOM . block
    (2) block -> . varDecl statement principal
    (6) varDecl -> . DEF LPARENT ID COMMA DATATYPE RPARENT SEMICOLOM block
    (7) varDecl -> . DEF LPARENT ID COMMA DATATYPE COMMA expression RPARENT SEMICOLOM block
    (8) varDecl -> . empty
    (74) empty -> .

  ! shift/reduce conflict for DEF resolved as shift
    DEF             shift and go to state 7
    $end            reduce using rule 74 (empty -> .)
    ALTER           reduce using rule 74 (empty -> .)
    CALL            reduce using rule 74 (empty -> .)
    ISTRUE          reduce using rule 74 (empty -> .)
    IF              reduce using rule 74 (empty -> .)
    WHILE           reduce using rule 74 (empty -> .)
    PROC            reduce using rule 74 (empty -> .)
    MOVER           reduce using rule 74 (empty -> .)
    COMMENT         reduce using rule 74 (empty -> .)
    ID              reduce using rule 74 (empty -> .)
    NOT             reduce using rule 74 (empty -> .)
    ALEATORIO       reduce using rule 74 (empty -> .)
    REPEAT          reduce using rule 74 (empty -> .)
    BREAK           reduce using rule 74 (empty -> .)
    UNTIL           reduce using rule 74 (empty -> .)
    CASE            reduce using rule 74 (empty -> .)
    PRINT           reduce using rule 74 (empty -> .)
    PRINCIPAL       reduce using rule 74 (empty -> .)
    RPARENT         reduce using rule 74 (empty -> .)
    SEMICOLOM       reduce using rule 74 (empty -> .)
    ELSE            reduce using rule 74 (empty -> .)

  ! DEF             [ reduce using rule 74 (empty -> .) ]

    varDecl                        shift and go to state 4
    empty                          shift and go to state 5
    block                          shift and go to state 147

state 119

    (33) statement -> CASE ID whenloop ELSE . LPARENT block RPARENT SEMICOLOM block

    LPARENT         shift and go to state 148


state 120

    (13) statement -> ISTRUE LPARENT ID RPARENT . SEMICOLOM block

    SEMICOLOM       shift and go to state 149


state 121

    (29) statement -> UNTIL LPARENT block RPARENT . condition SEMICOLOM block
    (40) condition -> . expression
    (41) condition -> . expression relation expression
    (56) expression -> . term
    (57) expression -> . addingOperator term
    (58) expression -> . expression addingOperator term
    (61) term -> . factor
    (62) term -> . term multiplyingOperator factor
    (59) addingOperator -> . PLUS
    (60) addingOperator -> . MINUS
    (67) factor -> . INTEGER
    (68) factor -> . BOOLEAN
    (69) factor -> . ID
    (70) factor -> . LPARENT expression RPARENT

    PLUS            shift and go to state 37
    MINUS           shift and go to state 39
    INTEGER         shift and go to state 33
    BOOLEAN         shift and go to state 35
    ID              shift and go to state 34
    LPARENT         shift and go to state 31

    addingOperator                 shift and go to state 32
    term                           shift and go to state 30
    factor                         shift and go to state 36
    expression                     shift and go to state 38
    condition                      shift and go to state 150

state 122

    (4) principal -> PRINCIPAL LPARENT statement . RPARENT SEMICOLOM block

    RPARENT         shift and go to state 151


state 123

    (8) varDecl -> empty .
    (34) statement -> empty .
    (73) comment -> empty .

  ! reduce/reduce conflict for PRINCIPAL resolved using rule 8 (varDecl -> empty .)
  ! reduce/reduce conflict for $end resolved using rule 8 (varDecl -> empty .)
  ! reduce/reduce conflict for RPARENT resolved using rule 8 (varDecl -> empty .)
  ! reduce/reduce conflict for ALTER resolved using rule 8 (varDecl -> empty .)
  ! reduce/reduce conflict for CALL resolved using rule 8 (varDecl -> empty .)
  ! reduce/reduce conflict for ISTRUE resolved using rule 8 (varDecl -> empty .)
  ! reduce/reduce conflict for IF resolved using rule 8 (varDecl -> empty .)
  ! reduce/reduce conflict for WHILE resolved using rule 8 (varDecl -> empty .)
  ! reduce/reduce conflict for PROC resolved using rule 8 (varDecl -> empty .)
  ! reduce/reduce conflict for MOVER resolved using rule 8 (varDecl -> empty .)
  ! reduce/reduce conflict for COMMENT resolved using rule 8 (varDecl -> empty .)
  ! reduce/reduce conflict for ID resolved using rule 8 (varDecl -> empty .)
  ! reduce/reduce conflict for NOT resolved using rule 8 (varDecl -> empty .)
  ! reduce/reduce conflict for ALEATORIO resolved using rule 8 (varDecl -> empty .)
  ! reduce/reduce conflict for REPEAT resolved using rule 8 (varDecl -> empty .)
  ! reduce/reduce conflict for BREAK resolved using rule 8 (varDecl -> empty .)
  ! reduce/reduce conflict for UNTIL resolved using rule 8 (varDecl -> empty .)
  ! reduce/reduce conflict for CASE resolved using rule 8 (varDecl -> empty .)
  ! reduce/reduce conflict for PRINT resolved using rule 8 (varDecl -> empty .)
  ! reduce/reduce conflict for DEF resolved using rule 8 (varDecl -> empty .)
  ! reduce/reduce conflict for DEF resolved using rule 8 (varDecl -> empty .)
  ! reduce/reduce conflict for ALTER resolved using rule 8 (varDecl -> empty .)
  ! reduce/reduce conflict for CALL resolved using rule 8 (varDecl -> empty .)
  ! reduce/reduce conflict for ISTRUE resolved using rule 8 (varDecl -> empty .)
  ! reduce/reduce conflict for IF resolved using rule 8 (varDecl -> empty .)
  ! reduce/reduce conflict for WHILE resolved using rule 8 (varDecl -> empty .)
  ! reduce/reduce conflict for PROC resolved using rule 8 (varDecl -> empty .)
  ! reduce/reduce conflict for MOVER resolved using rule 8 (varDecl -> empty .)
  ! reduce/reduce conflict for COMMENT resolved using rule 8 (varDecl -> empty .)
  ! reduce/reduce conflict for ID resolved using rule 8 (varDecl -> empty .)
  ! reduce/reduce conflict for NOT resolved using rule 8 (varDecl -> empty .)
  ! reduce/reduce conflict for ALEATORIO resolved using rule 8 (varDecl -> empty .)
  ! reduce/reduce conflict for REPEAT resolved using rule 8 (varDecl -> empty .)
  ! reduce/reduce conflict for BREAK resolved using rule 8 (varDecl -> empty .)
  ! reduce/reduce conflict for UNTIL resolved using rule 8 (varDecl -> empty .)
  ! reduce/reduce conflict for CASE resolved using rule 8 (varDecl -> empty .)
  ! reduce/reduce conflict for PRINT resolved using rule 8 (varDecl -> empty .)
  ! reduce/reduce conflict for PRINCIPAL resolved using rule 8 (varDecl -> empty .)
  ! reduce/reduce conflict for $end resolved using rule 8 (varDecl -> empty .)
  ! reduce/reduce conflict for RPARENT resolved using rule 8 (varDecl -> empty .)
    ALTER           reduce using rule 8 (varDecl -> empty .)
    CALL            reduce using rule 8 (varDecl -> empty .)
    ISTRUE          reduce using rule 8 (varDecl -> empty .)
    IF              reduce using rule 8 (varDecl -> empty .)
    WHILE           reduce using rule 8 (varDecl -> empty .)
    PROC            reduce using rule 8 (varDecl -> empty .)
    MOVER           reduce using rule 8 (varDecl -> empty .)
    COMMENT         reduce using rule 8 (varDecl -> empty .)
    ID              reduce using rule 8 (varDecl -> empty .)
    NOT             reduce using rule 8 (varDecl -> empty .)
    ALEATORIO       reduce using rule 8 (varDecl -> empty .)
    REPEAT          reduce using rule 8 (varDecl -> empty .)
    BREAK           reduce using rule 8 (varDecl -> empty .)
    UNTIL           reduce using rule 8 (varDecl -> empty .)
    CASE            reduce using rule 8 (varDecl -> empty .)
    PRINT           reduce using rule 8 (varDecl -> empty .)
    DEF             reduce using rule 8 (varDecl -> empty .)
    PRINCIPAL       reduce using rule 8 (varDecl -> empty .)
    $end            reduce using rule 8 (varDecl -> empty .)
    RPARENT         reduce using rule 8 (varDecl -> empty .)

  ! PRINCIPAL       [ reduce using rule 34 (statement -> empty .) ]
  ! $end            [ reduce using rule 34 (statement -> empty .) ]
  ! RPARENT         [ reduce using rule 34 (statement -> empty .) ]
  ! ALTER           [ reduce using rule 34 (statement -> empty .) ]
  ! CALL            [ reduce using rule 34 (statement -> empty .) ]
  ! ISTRUE          [ reduce using rule 34 (statement -> empty .) ]
  ! IF              [ reduce using rule 34 (statement -> empty .) ]
  ! WHILE           [ reduce using rule 34 (statement -> empty .) ]
  ! PROC            [ reduce using rule 34 (statement -> empty .) ]
  ! MOVER           [ reduce using rule 34 (statement -> empty .) ]
  ! COMMENT         [ reduce using rule 34 (statement -> empty .) ]
  ! ID              [ reduce using rule 34 (statement -> empty .) ]
  ! NOT             [ reduce using rule 34 (statement -> empty .) ]
  ! ALEATORIO       [ reduce using rule 34 (statement -> empty .) ]
  ! REPEAT          [ reduce using rule 34 (statement -> empty .) ]
  ! BREAK           [ reduce using rule 34 (statement -> empty .) ]
  ! UNTIL           [ reduce using rule 34 (statement -> empty .) ]
  ! CASE            [ reduce using rule 34 (statement -> empty .) ]
  ! PRINT           [ reduce using rule 34 (statement -> empty .) ]
  ! DEF             [ reduce using rule 34 (statement -> empty .) ]
  ! DEF             [ reduce using rule 73 (comment -> empty .) ]
  ! ALTER           [ reduce using rule 73 (comment -> empty .) ]
  ! CALL            [ reduce using rule 73 (comment -> empty .) ]
  ! ISTRUE          [ reduce using rule 73 (comment -> empty .) ]
  ! IF              [ reduce using rule 73 (comment -> empty .) ]
  ! WHILE           [ reduce using rule 73 (comment -> empty .) ]
  ! PROC            [ reduce using rule 73 (comment -> empty .) ]
  ! MOVER           [ reduce using rule 73 (comment -> empty .) ]
  ! COMMENT         [ reduce using rule 73 (comment -> empty .) ]
  ! ID              [ reduce using rule 73 (comment -> empty .) ]
  ! NOT             [ reduce using rule 73 (comment -> empty .) ]
  ! ALEATORIO       [ reduce using rule 73 (comment -> empty .) ]
  ! REPEAT          [ reduce using rule 73 (comment -> empty .) ]
  ! BREAK           [ reduce using rule 73 (comment -> empty .) ]
  ! UNTIL           [ reduce using rule 73 (comment -> empty .) ]
  ! CASE            [ reduce using rule 73 (comment -> empty .) ]
  ! PRINT           [ reduce using rule 73 (comment -> empty .) ]
  ! PRINCIPAL       [ reduce using rule 73 (comment -> empty .) ]
  ! $end            [ reduce using rule 73 (comment -> empty .) ]
  ! RPARENT         [ reduce using rule 73 (comment -> empty .) ]


state 124

    (3) principal -> PRINCIPAL LPARENT varDecl . RPARENT SEMICOLOM block

    RPARENT         shift and go to state 152


state 125

    (19) statement -> MOVER LPARENT movimiento RPARENT . SEMICOLOM block

    SEMICOLOM       shift and go to state 153


state 126

    (27) statement -> REPEAT LPARENT block RPARENT . SEMICOLOM block

    SEMICOLOM       shift and go to state 154


state 127

    (26) statement -> ALEATORIO LPARENT RPARENT SEMICOLOM . block
    (2) block -> . varDecl statement principal
    (6) varDecl -> . DEF LPARENT ID COMMA DATATYPE RPARENT SEMICOLOM block
    (7) varDecl -> . DEF LPARENT ID COMMA DATATYPE COMMA expression RPARENT SEMICOLOM block
    (8) varDecl -> . empty
    (74) empty -> .

  ! shift/reduce conflict for DEF resolved as shift
    DEF             shift and go to state 7
    $end            reduce using rule 74 (empty -> .)
    ALTER           reduce using rule 74 (empty -> .)
    CALL            reduce using rule 74 (empty -> .)
    ISTRUE          reduce using rule 74 (empty -> .)
    IF              reduce using rule 74 (empty -> .)
    WHILE           reduce using rule 74 (empty -> .)
    PROC            reduce using rule 74 (empty -> .)
    MOVER           reduce using rule 74 (empty -> .)
    COMMENT         reduce using rule 74 (empty -> .)
    ID              reduce using rule 74 (empty -> .)
    NOT             reduce using rule 74 (empty -> .)
    ALEATORIO       reduce using rule 74 (empty -> .)
    REPEAT          reduce using rule 74 (empty -> .)
    BREAK           reduce using rule 74 (empty -> .)
    UNTIL           reduce using rule 74 (empty -> .)
    CASE            reduce using rule 74 (empty -> .)
    PRINT           reduce using rule 74 (empty -> .)
    PRINCIPAL       reduce using rule 74 (empty -> .)
    RPARENT         reduce using rule 74 (empty -> .)
    SEMICOLOM       reduce using rule 74 (empty -> .)
    ELSE            reduce using rule 74 (empty -> .)

  ! DEF             [ reduce using rule 74 (empty -> .) ]

    varDecl                        shift and go to state 4
    empty                          shift and go to state 5
    block                          shift and go to state 155

state 128

    (22) statement -> ID LPARENT statement RPARENT . SEMICOLOM block

    SEMICOLOM       shift and go to state 156


state 129

    (21) statement -> ID LPARENT ID RPARENT . SEMICOLOM block

    SEMICOLOM       shift and go to state 157


state 130

    (24) statement -> ID LPARENT expression RPARENT . SEMICOLOM block

    SEMICOLOM       shift and go to state 158


state 131

    (23) statement -> ID LPARENT BOOLEAN RPARENT . SEMICOLOM block

    SEMICOLOM       shift and go to state 159


state 132

    (14) statement -> IF condition LPARENT statement . RPARENT block

    RPARENT         shift and go to state 160


state 133

    (12) statement -> CALL LPARENT ID RPARENT . block
    (2) block -> . varDecl statement principal
    (6) varDecl -> . DEF LPARENT ID COMMA DATATYPE RPARENT SEMICOLOM block
    (7) varDecl -> . DEF LPARENT ID COMMA DATATYPE COMMA expression RPARENT SEMICOLOM block
    (8) varDecl -> . empty
    (74) empty -> .

  ! shift/reduce conflict for DEF resolved as shift
    DEF             shift and go to state 7
    $end            reduce using rule 74 (empty -> .)
    ALTER           reduce using rule 74 (empty -> .)
    CALL            reduce using rule 74 (empty -> .)
    ISTRUE          reduce using rule 74 (empty -> .)
    IF              reduce using rule 74 (empty -> .)
    WHILE           reduce using rule 74 (empty -> .)
    PROC            reduce using rule 74 (empty -> .)
    MOVER           reduce using rule 74 (empty -> .)
    COMMENT         reduce using rule 74 (empty -> .)
    ID              reduce using rule 74 (empty -> .)
    NOT             reduce using rule 74 (empty -> .)
    ALEATORIO       reduce using rule 74 (empty -> .)
    REPEAT          reduce using rule 74 (empty -> .)
    BREAK           reduce using rule 74 (empty -> .)
    UNTIL           reduce using rule 74 (empty -> .)
    CASE            reduce using rule 74 (empty -> .)
    PRINT           reduce using rule 74 (empty -> .)
    PRINCIPAL       reduce using rule 74 (empty -> .)
    RPARENT         reduce using rule 74 (empty -> .)
    SEMICOLOM       reduce using rule 74 (empty -> .)
    ELSE            reduce using rule 74 (empty -> .)

  ! DEF             [ reduce using rule 74 (empty -> .) ]

    varDecl                        shift and go to state 4
    empty                          shift and go to state 5
    block                          shift and go to state 161

state 134

    (25) statement -> NOT LPARENT ID RPARENT . SEMICOLOM block

    SEMICOLOM       shift and go to state 162


state 135

    (17) statement -> PROC ID LPARENT statement . RPARENT SEMICOLOM block

    RPARENT         shift and go to state 163


state 136

    (16) statement -> PROC ID LPARENT varDecl . RPARENT SEMICOLOM block

    RPARENT         shift and go to state 164


state 137

    (66) DATATYPE -> BOOLEANTP .

    RPARENT         reduce using rule 66 (DATATYPE -> BOOLEANTP .)
    COMMA           reduce using rule 66 (DATATYPE -> BOOLEANTP .)


state 138

    (6) varDecl -> DEF LPARENT ID COMMA DATATYPE . RPARENT SEMICOLOM block
    (7) varDecl -> DEF LPARENT ID COMMA DATATYPE . COMMA expression RPARENT SEMICOLOM block

    RPARENT         shift and go to state 166
    COMMA           shift and go to state 165


state 139

    (65) DATATYPE -> INTEGERTP .

    RPARENT         reduce using rule 65 (DATATYPE -> INTEGERTP .)
    COMMA           reduce using rule 65 (DATATYPE -> INTEGERTP .)


state 140

    (15) statement -> WHILE condition LPARENT statement RPARENT . SEMICOLOM block

    SEMICOLOM       shift and go to state 167


state 141

    (39) print -> PRINT LPARENT expression RPARENT SEMICOLOM . block
    (2) block -> . varDecl statement principal
    (6) varDecl -> . DEF LPARENT ID COMMA DATATYPE RPARENT SEMICOLOM block
    (7) varDecl -> . DEF LPARENT ID COMMA DATATYPE COMMA expression RPARENT SEMICOLOM block
    (8) varDecl -> . empty
    (74) empty -> .

  ! shift/reduce conflict for DEF resolved as shift
    DEF             shift and go to state 7
    $end            reduce using rule 74 (empty -> .)
    ALTER           reduce using rule 74 (empty -> .)
    CALL            reduce using rule 74 (empty -> .)
    ISTRUE          reduce using rule 74 (empty -> .)
    IF              reduce using rule 74 (empty -> .)
    WHILE           reduce using rule 74 (empty -> .)
    PROC            reduce using rule 74 (empty -> .)
    MOVER           reduce using rule 74 (empty -> .)
    COMMENT         reduce using rule 74 (empty -> .)
    ID              reduce using rule 74 (empty -> .)
    NOT             reduce using rule 74 (empty -> .)
    ALEATORIO       reduce using rule 74 (empty -> .)
    REPEAT          reduce using rule 74 (empty -> .)
    BREAK           reduce using rule 74 (empty -> .)
    UNTIL           reduce using rule 74 (empty -> .)
    CASE            reduce using rule 74 (empty -> .)
    PRINT           reduce using rule 74 (empty -> .)
    PRINCIPAL       reduce using rule 74 (empty -> .)
    RPARENT         reduce using rule 74 (empty -> .)
    SEMICOLOM       reduce using rule 74 (empty -> .)
    ELSE            reduce using rule 74 (empty -> .)

  ! DEF             [ reduce using rule 74 (empty -> .) ]

    varDecl                        shift and go to state 4
    empty                          shift and go to state 5
    block                          shift and go to state 168

state 142

    (37) print -> PRINT LPARENT ID RPARENT SEMICOLOM . block
    (2) block -> . varDecl statement principal
    (6) varDecl -> . DEF LPARENT ID COMMA DATATYPE RPARENT SEMICOLOM block
    (7) varDecl -> . DEF LPARENT ID COMMA DATATYPE COMMA expression RPARENT SEMICOLOM block
    (8) varDecl -> . empty
    (74) empty -> .

  ! shift/reduce conflict for DEF resolved as shift
    DEF             shift and go to state 7
    $end            reduce using rule 74 (empty -> .)
    ALTER           reduce using rule 74 (empty -> .)
    CALL            reduce using rule 74 (empty -> .)
    ISTRUE          reduce using rule 74 (empty -> .)
    IF              reduce using rule 74 (empty -> .)
    WHILE           reduce using rule 74 (empty -> .)
    PROC            reduce using rule 74 (empty -> .)
    MOVER           reduce using rule 74 (empty -> .)
    COMMENT         reduce using rule 74 (empty -> .)
    ID              reduce using rule 74 (empty -> .)
    NOT             reduce using rule 74 (empty -> .)
    ALEATORIO       reduce using rule 74 (empty -> .)
    REPEAT          reduce using rule 74 (empty -> .)
    BREAK           reduce using rule 74 (empty -> .)
    UNTIL           reduce using rule 74 (empty -> .)
    CASE            reduce using rule 74 (empty -> .)
    PRINT           reduce using rule 74 (empty -> .)
    PRINCIPAL       reduce using rule 74 (empty -> .)
    RPARENT         reduce using rule 74 (empty -> .)
    SEMICOLOM       reduce using rule 74 (empty -> .)
    ELSE            reduce using rule 74 (empty -> .)

  ! DEF             [ reduce using rule 74 (empty -> .) ]

    varDecl                        shift and go to state 4
    empty                          shift and go to state 5
    block                          shift and go to state 169

state 143

    (38) print -> PRINT LPARENT STRING RPARENT SEMICOLOM . block
    (2) block -> . varDecl statement principal
    (6) varDecl -> . DEF LPARENT ID COMMA DATATYPE RPARENT SEMICOLOM block
    (7) varDecl -> . DEF LPARENT ID COMMA DATATYPE COMMA expression RPARENT SEMICOLOM block
    (8) varDecl -> . empty
    (74) empty -> .

  ! shift/reduce conflict for DEF resolved as shift
    DEF             shift and go to state 7
    $end            reduce using rule 74 (empty -> .)
    ALTER           reduce using rule 74 (empty -> .)
    CALL            reduce using rule 74 (empty -> .)
    ISTRUE          reduce using rule 74 (empty -> .)
    IF              reduce using rule 74 (empty -> .)
    WHILE           reduce using rule 74 (empty -> .)
    PROC            reduce using rule 74 (empty -> .)
    MOVER           reduce using rule 74 (empty -> .)
    COMMENT         reduce using rule 74 (empty -> .)
    ID              reduce using rule 74 (empty -> .)
    NOT             reduce using rule 74 (empty -> .)
    ALEATORIO       reduce using rule 74 (empty -> .)
    REPEAT          reduce using rule 74 (empty -> .)
    BREAK           reduce using rule 74 (empty -> .)
    UNTIL           reduce using rule 74 (empty -> .)
    CASE            reduce using rule 74 (empty -> .)
    PRINT           reduce using rule 74 (empty -> .)
    PRINCIPAL       reduce using rule 74 (empty -> .)
    RPARENT         reduce using rule 74 (empty -> .)
    SEMICOLOM       reduce using rule 74 (empty -> .)
    ELSE            reduce using rule 74 (empty -> .)

  ! DEF             [ reduce using rule 74 (empty -> .) ]

    varDecl                        shift and go to state 4
    empty                          shift and go to state 5
    block                          shift and go to state 170

state 144

    (11) statement -> ALTER LPARENT ID COMMA expression . RPARENT SEMICOLOM block
    (58) expression -> expression . addingOperator term
    (59) addingOperator -> . PLUS
    (60) addingOperator -> . MINUS

    RPARENT         shift and go to state 171
    PLUS            shift and go to state 37
    MINUS           shift and go to state 39

    addingOperator                 shift and go to state 67

state 145

    (30) statement -> CASE WHEN LPARENT condition RPARENT . THEN LPARENT block RPARENT SEMICOLOM block
    (31) statement -> CASE WHEN LPARENT condition RPARENT . THEN LPARENT block RPARENT ELSE LPARENT block RPARENT SEMICOLOM block

    THEN            shift and go to state 172


state 146

    (35) whenloop -> WHEN condition THEN . LPARENT block RPARENT whenloop

    LPARENT         shift and go to state 173


state 147

    (32) statement -> CASE ID whenloop SEMICOLOM block .

    PRINCIPAL       reduce using rule 32 (statement -> CASE ID whenloop SEMICOLOM block .)
    $end            reduce using rule 32 (statement -> CASE ID whenloop SEMICOLOM block .)
    RPARENT         reduce using rule 32 (statement -> CASE ID whenloop SEMICOLOM block .)
    ALTER           reduce using rule 32 (statement -> CASE ID whenloop SEMICOLOM block .)
    CALL            reduce using rule 32 (statement -> CASE ID whenloop SEMICOLOM block .)
    ISTRUE          reduce using rule 32 (statement -> CASE ID whenloop SEMICOLOM block .)
    IF              reduce using rule 32 (statement -> CASE ID whenloop SEMICOLOM block .)
    WHILE           reduce using rule 32 (statement -> CASE ID whenloop SEMICOLOM block .)
    PROC            reduce using rule 32 (statement -> CASE ID whenloop SEMICOLOM block .)
    MOVER           reduce using rule 32 (statement -> CASE ID whenloop SEMICOLOM block .)
    COMMENT         reduce using rule 32 (statement -> CASE ID whenloop SEMICOLOM block .)
    ID              reduce using rule 32 (statement -> CASE ID whenloop SEMICOLOM block .)
    NOT             reduce using rule 32 (statement -> CASE ID whenloop SEMICOLOM block .)
    ALEATORIO       reduce using rule 32 (statement -> CASE ID whenloop SEMICOLOM block .)
    REPEAT          reduce using rule 32 (statement -> CASE ID whenloop SEMICOLOM block .)
    BREAK           reduce using rule 32 (statement -> CASE ID whenloop SEMICOLOM block .)
    UNTIL           reduce using rule 32 (statement -> CASE ID whenloop SEMICOLOM block .)
    CASE            reduce using rule 32 (statement -> CASE ID whenloop SEMICOLOM block .)
    PRINT           reduce using rule 32 (statement -> CASE ID whenloop SEMICOLOM block .)
    DEF             reduce using rule 32 (statement -> CASE ID whenloop SEMICOLOM block .)


state 148

    (33) statement -> CASE ID whenloop ELSE LPARENT . block RPARENT SEMICOLOM block
    (2) block -> . varDecl statement principal
    (6) varDecl -> . DEF LPARENT ID COMMA DATATYPE RPARENT SEMICOLOM block
    (7) varDecl -> . DEF LPARENT ID COMMA DATATYPE COMMA expression RPARENT SEMICOLOM block
    (8) varDecl -> . empty
    (74) empty -> .

  ! shift/reduce conflict for DEF resolved as shift
    DEF             shift and go to state 7
    $end            reduce using rule 74 (empty -> .)
    ALTER           reduce using rule 74 (empty -> .)
    CALL            reduce using rule 74 (empty -> .)
    ISTRUE          reduce using rule 74 (empty -> .)
    IF              reduce using rule 74 (empty -> .)
    WHILE           reduce using rule 74 (empty -> .)
    PROC            reduce using rule 74 (empty -> .)
    MOVER           reduce using rule 74 (empty -> .)
    COMMENT         reduce using rule 74 (empty -> .)
    ID              reduce using rule 74 (empty -> .)
    NOT             reduce using rule 74 (empty -> .)
    ALEATORIO       reduce using rule 74 (empty -> .)
    REPEAT          reduce using rule 74 (empty -> .)
    BREAK           reduce using rule 74 (empty -> .)
    UNTIL           reduce using rule 74 (empty -> .)
    CASE            reduce using rule 74 (empty -> .)
    PRINT           reduce using rule 74 (empty -> .)
    PRINCIPAL       reduce using rule 74 (empty -> .)
    RPARENT         reduce using rule 74 (empty -> .)
    SEMICOLOM       reduce using rule 74 (empty -> .)
    ELSE            reduce using rule 74 (empty -> .)

  ! DEF             [ reduce using rule 74 (empty -> .) ]

    varDecl                        shift and go to state 4
    empty                          shift and go to state 5
    block                          shift and go to state 174

state 149

    (13) statement -> ISTRUE LPARENT ID RPARENT SEMICOLOM . block
    (2) block -> . varDecl statement principal
    (6) varDecl -> . DEF LPARENT ID COMMA DATATYPE RPARENT SEMICOLOM block
    (7) varDecl -> . DEF LPARENT ID COMMA DATATYPE COMMA expression RPARENT SEMICOLOM block
    (8) varDecl -> . empty
    (74) empty -> .

  ! shift/reduce conflict for DEF resolved as shift
    DEF             shift and go to state 7
    $end            reduce using rule 74 (empty -> .)
    ALTER           reduce using rule 74 (empty -> .)
    CALL            reduce using rule 74 (empty -> .)
    ISTRUE          reduce using rule 74 (empty -> .)
    IF              reduce using rule 74 (empty -> .)
    WHILE           reduce using rule 74 (empty -> .)
    PROC            reduce using rule 74 (empty -> .)
    MOVER           reduce using rule 74 (empty -> .)
    COMMENT         reduce using rule 74 (empty -> .)
    ID              reduce using rule 74 (empty -> .)
    NOT             reduce using rule 74 (empty -> .)
    ALEATORIO       reduce using rule 74 (empty -> .)
    REPEAT          reduce using rule 74 (empty -> .)
    BREAK           reduce using rule 74 (empty -> .)
    UNTIL           reduce using rule 74 (empty -> .)
    CASE            reduce using rule 74 (empty -> .)
    PRINT           reduce using rule 74 (empty -> .)
    PRINCIPAL       reduce using rule 74 (empty -> .)
    RPARENT         reduce using rule 74 (empty -> .)
    SEMICOLOM       reduce using rule 74 (empty -> .)
    ELSE            reduce using rule 74 (empty -> .)

  ! DEF             [ reduce using rule 74 (empty -> .) ]

    varDecl                        shift and go to state 4
    empty                          shift and go to state 5
    block                          shift and go to state 175

state 150

    (29) statement -> UNTIL LPARENT block RPARENT condition . SEMICOLOM block

    SEMICOLOM       shift and go to state 176


state 151

    (4) principal -> PRINCIPAL LPARENT statement RPARENT . SEMICOLOM block

    SEMICOLOM       shift and go to state 177


state 152

    (3) principal -> PRINCIPAL LPARENT varDecl RPARENT . SEMICOLOM block

    SEMICOLOM       shift and go to state 178


state 153

    (19) statement -> MOVER LPARENT movimiento RPARENT SEMICOLOM . block
    (2) block -> . varDecl statement principal
    (6) varDecl -> . DEF LPARENT ID COMMA DATATYPE RPARENT SEMICOLOM block
    (7) varDecl -> . DEF LPARENT ID COMMA DATATYPE COMMA expression RPARENT SEMICOLOM block
    (8) varDecl -> . empty
    (74) empty -> .

  ! shift/reduce conflict for DEF resolved as shift
    DEF             shift and go to state 7
    $end            reduce using rule 74 (empty -> .)
    ALTER           reduce using rule 74 (empty -> .)
    CALL            reduce using rule 74 (empty -> .)
    ISTRUE          reduce using rule 74 (empty -> .)
    IF              reduce using rule 74 (empty -> .)
    WHILE           reduce using rule 74 (empty -> .)
    PROC            reduce using rule 74 (empty -> .)
    MOVER           reduce using rule 74 (empty -> .)
    COMMENT         reduce using rule 74 (empty -> .)
    ID              reduce using rule 74 (empty -> .)
    NOT             reduce using rule 74 (empty -> .)
    ALEATORIO       reduce using rule 74 (empty -> .)
    REPEAT          reduce using rule 74 (empty -> .)
    BREAK           reduce using rule 74 (empty -> .)
    UNTIL           reduce using rule 74 (empty -> .)
    CASE            reduce using rule 74 (empty -> .)
    PRINT           reduce using rule 74 (empty -> .)
    PRINCIPAL       reduce using rule 74 (empty -> .)
    RPARENT         reduce using rule 74 (empty -> .)
    SEMICOLOM       reduce using rule 74 (empty -> .)
    ELSE            reduce using rule 74 (empty -> .)

  ! DEF             [ reduce using rule 74 (empty -> .) ]

    varDecl                        shift and go to state 4
    empty                          shift and go to state 5
    block                          shift and go to state 179

state 154

    (27) statement -> REPEAT LPARENT block RPARENT SEMICOLOM . block
    (2) block -> . varDecl statement principal
    (6) varDecl -> . DEF LPARENT ID COMMA DATATYPE RPARENT SEMICOLOM block
    (7) varDecl -> . DEF LPARENT ID COMMA DATATYPE COMMA expression RPARENT SEMICOLOM block
    (8) varDecl -> . empty
    (74) empty -> .

  ! shift/reduce conflict for DEF resolved as shift
    DEF             shift and go to state 7
    $end            reduce using rule 74 (empty -> .)
    ALTER           reduce using rule 74 (empty -> .)
    CALL            reduce using rule 74 (empty -> .)
    ISTRUE          reduce using rule 74 (empty -> .)
    IF              reduce using rule 74 (empty -> .)
    WHILE           reduce using rule 74 (empty -> .)
    PROC            reduce using rule 74 (empty -> .)
    MOVER           reduce using rule 74 (empty -> .)
    COMMENT         reduce using rule 74 (empty -> .)
    ID              reduce using rule 74 (empty -> .)
    NOT             reduce using rule 74 (empty -> .)
    ALEATORIO       reduce using rule 74 (empty -> .)
    REPEAT          reduce using rule 74 (empty -> .)
    BREAK           reduce using rule 74 (empty -> .)
    UNTIL           reduce using rule 74 (empty -> .)
    CASE            reduce using rule 74 (empty -> .)
    PRINT           reduce using rule 74 (empty -> .)
    PRINCIPAL       reduce using rule 74 (empty -> .)
    RPARENT         reduce using rule 74 (empty -> .)
    SEMICOLOM       reduce using rule 74 (empty -> .)
    ELSE            reduce using rule 74 (empty -> .)

  ! DEF             [ reduce using rule 74 (empty -> .) ]

    varDecl                        shift and go to state 4
    empty                          shift and go to state 5
    block                          shift and go to state 180

state 155

    (26) statement -> ALEATORIO LPARENT RPARENT SEMICOLOM block .

    PRINCIPAL       reduce using rule 26 (statement -> ALEATORIO LPARENT RPARENT SEMICOLOM block .)
    $end            reduce using rule 26 (statement -> ALEATORIO LPARENT RPARENT SEMICOLOM block .)
    RPARENT         reduce using rule 26 (statement -> ALEATORIO LPARENT RPARENT SEMICOLOM block .)
    ALTER           reduce using rule 26 (statement -> ALEATORIO LPARENT RPARENT SEMICOLOM block .)
    CALL            reduce using rule 26 (statement -> ALEATORIO LPARENT RPARENT SEMICOLOM block .)
    ISTRUE          reduce using rule 26 (statement -> ALEATORIO LPARENT RPARENT SEMICOLOM block .)
    IF              reduce using rule 26 (statement -> ALEATORIO LPARENT RPARENT SEMICOLOM block .)
    WHILE           reduce using rule 26 (statement -> ALEATORIO LPARENT RPARENT SEMICOLOM block .)
    PROC            reduce using rule 26 (statement -> ALEATORIO LPARENT RPARENT SEMICOLOM block .)
    MOVER           reduce using rule 26 (statement -> ALEATORIO LPARENT RPARENT SEMICOLOM block .)
    COMMENT         reduce using rule 26 (statement -> ALEATORIO LPARENT RPARENT SEMICOLOM block .)
    ID              reduce using rule 26 (statement -> ALEATORIO LPARENT RPARENT SEMICOLOM block .)
    NOT             reduce using rule 26 (statement -> ALEATORIO LPARENT RPARENT SEMICOLOM block .)
    ALEATORIO       reduce using rule 26 (statement -> ALEATORIO LPARENT RPARENT SEMICOLOM block .)
    REPEAT          reduce using rule 26 (statement -> ALEATORIO LPARENT RPARENT SEMICOLOM block .)
    BREAK           reduce using rule 26 (statement -> ALEATORIO LPARENT RPARENT SEMICOLOM block .)
    UNTIL           reduce using rule 26 (statement -> ALEATORIO LPARENT RPARENT SEMICOLOM block .)
    CASE            reduce using rule 26 (statement -> ALEATORIO LPARENT RPARENT SEMICOLOM block .)
    PRINT           reduce using rule 26 (statement -> ALEATORIO LPARENT RPARENT SEMICOLOM block .)
    DEF             reduce using rule 26 (statement -> ALEATORIO LPARENT RPARENT SEMICOLOM block .)


state 156

    (22) statement -> ID LPARENT statement RPARENT SEMICOLOM . block
    (2) block -> . varDecl statement principal
    (6) varDecl -> . DEF LPARENT ID COMMA DATATYPE RPARENT SEMICOLOM block
    (7) varDecl -> . DEF LPARENT ID COMMA DATATYPE COMMA expression RPARENT SEMICOLOM block
    (8) varDecl -> . empty
    (74) empty -> .

  ! shift/reduce conflict for DEF resolved as shift
    DEF             shift and go to state 7
    $end            reduce using rule 74 (empty -> .)
    ALTER           reduce using rule 74 (empty -> .)
    CALL            reduce using rule 74 (empty -> .)
    ISTRUE          reduce using rule 74 (empty -> .)
    IF              reduce using rule 74 (empty -> .)
    WHILE           reduce using rule 74 (empty -> .)
    PROC            reduce using rule 74 (empty -> .)
    MOVER           reduce using rule 74 (empty -> .)
    COMMENT         reduce using rule 74 (empty -> .)
    ID              reduce using rule 74 (empty -> .)
    NOT             reduce using rule 74 (empty -> .)
    ALEATORIO       reduce using rule 74 (empty -> .)
    REPEAT          reduce using rule 74 (empty -> .)
    BREAK           reduce using rule 74 (empty -> .)
    UNTIL           reduce using rule 74 (empty -> .)
    CASE            reduce using rule 74 (empty -> .)
    PRINT           reduce using rule 74 (empty -> .)
    PRINCIPAL       reduce using rule 74 (empty -> .)
    RPARENT         reduce using rule 74 (empty -> .)
    SEMICOLOM       reduce using rule 74 (empty -> .)
    ELSE            reduce using rule 74 (empty -> .)

  ! DEF             [ reduce using rule 74 (empty -> .) ]

    varDecl                        shift and go to state 4
    empty                          shift and go to state 5
    block                          shift and go to state 181

state 157

    (21) statement -> ID LPARENT ID RPARENT SEMICOLOM . block
    (2) block -> . varDecl statement principal
    (6) varDecl -> . DEF LPARENT ID COMMA DATATYPE RPARENT SEMICOLOM block
    (7) varDecl -> . DEF LPARENT ID COMMA DATATYPE COMMA expression RPARENT SEMICOLOM block
    (8) varDecl -> . empty
    (74) empty -> .

  ! shift/reduce conflict for DEF resolved as shift
    DEF             shift and go to state 7
    $end            reduce using rule 74 (empty -> .)
    ALTER           reduce using rule 74 (empty -> .)
    CALL            reduce using rule 74 (empty -> .)
    ISTRUE          reduce using rule 74 (empty -> .)
    IF              reduce using rule 74 (empty -> .)
    WHILE           reduce using rule 74 (empty -> .)
    PROC            reduce using rule 74 (empty -> .)
    MOVER           reduce using rule 74 (empty -> .)
    COMMENT         reduce using rule 74 (empty -> .)
    ID              reduce using rule 74 (empty -> .)
    NOT             reduce using rule 74 (empty -> .)
    ALEATORIO       reduce using rule 74 (empty -> .)
    REPEAT          reduce using rule 74 (empty -> .)
    BREAK           reduce using rule 74 (empty -> .)
    UNTIL           reduce using rule 74 (empty -> .)
    CASE            reduce using rule 74 (empty -> .)
    PRINT           reduce using rule 74 (empty -> .)
    PRINCIPAL       reduce using rule 74 (empty -> .)
    RPARENT         reduce using rule 74 (empty -> .)
    SEMICOLOM       reduce using rule 74 (empty -> .)
    ELSE            reduce using rule 74 (empty -> .)

  ! DEF             [ reduce using rule 74 (empty -> .) ]

    varDecl                        shift and go to state 4
    empty                          shift and go to state 5
    block                          shift and go to state 182

state 158

    (24) statement -> ID LPARENT expression RPARENT SEMICOLOM . block
    (2) block -> . varDecl statement principal
    (6) varDecl -> . DEF LPARENT ID COMMA DATATYPE RPARENT SEMICOLOM block
    (7) varDecl -> . DEF LPARENT ID COMMA DATATYPE COMMA expression RPARENT SEMICOLOM block
    (8) varDecl -> . empty
    (74) empty -> .

  ! shift/reduce conflict for DEF resolved as shift
    DEF             shift and go to state 7
    $end            reduce using rule 74 (empty -> .)
    ALTER           reduce using rule 74 (empty -> .)
    CALL            reduce using rule 74 (empty -> .)
    ISTRUE          reduce using rule 74 (empty -> .)
    IF              reduce using rule 74 (empty -> .)
    WHILE           reduce using rule 74 (empty -> .)
    PROC            reduce using rule 74 (empty -> .)
    MOVER           reduce using rule 74 (empty -> .)
    COMMENT         reduce using rule 74 (empty -> .)
    ID              reduce using rule 74 (empty -> .)
    NOT             reduce using rule 74 (empty -> .)
    ALEATORIO       reduce using rule 74 (empty -> .)
    REPEAT          reduce using rule 74 (empty -> .)
    BREAK           reduce using rule 74 (empty -> .)
    UNTIL           reduce using rule 74 (empty -> .)
    CASE            reduce using rule 74 (empty -> .)
    PRINT           reduce using rule 74 (empty -> .)
    PRINCIPAL       reduce using rule 74 (empty -> .)
    RPARENT         reduce using rule 74 (empty -> .)
    SEMICOLOM       reduce using rule 74 (empty -> .)
    ELSE            reduce using rule 74 (empty -> .)

  ! DEF             [ reduce using rule 74 (empty -> .) ]

    varDecl                        shift and go to state 4
    empty                          shift and go to state 5
    block                          shift and go to state 183

state 159

    (23) statement -> ID LPARENT BOOLEAN RPARENT SEMICOLOM . block
    (2) block -> . varDecl statement principal
    (6) varDecl -> . DEF LPARENT ID COMMA DATATYPE RPARENT SEMICOLOM block
    (7) varDecl -> . DEF LPARENT ID COMMA DATATYPE COMMA expression RPARENT SEMICOLOM block
    (8) varDecl -> . empty
    (74) empty -> .

  ! shift/reduce conflict for DEF resolved as shift
    DEF             shift and go to state 7
    $end            reduce using rule 74 (empty -> .)
    ALTER           reduce using rule 74 (empty -> .)
    CALL            reduce using rule 74 (empty -> .)
    ISTRUE          reduce using rule 74 (empty -> .)
    IF              reduce using rule 74 (empty -> .)
    WHILE           reduce using rule 74 (empty -> .)
    PROC            reduce using rule 74 (empty -> .)
    MOVER           reduce using rule 74 (empty -> .)
    COMMENT         reduce using rule 74 (empty -> .)
    ID              reduce using rule 74 (empty -> .)
    NOT             reduce using rule 74 (empty -> .)
    ALEATORIO       reduce using rule 74 (empty -> .)
    REPEAT          reduce using rule 74 (empty -> .)
    BREAK           reduce using rule 74 (empty -> .)
    UNTIL           reduce using rule 74 (empty -> .)
    CASE            reduce using rule 74 (empty -> .)
    PRINT           reduce using rule 74 (empty -> .)
    PRINCIPAL       reduce using rule 74 (empty -> .)
    RPARENT         reduce using rule 74 (empty -> .)
    SEMICOLOM       reduce using rule 74 (empty -> .)
    ELSE            reduce using rule 74 (empty -> .)

  ! DEF             [ reduce using rule 74 (empty -> .) ]

    varDecl                        shift and go to state 4
    empty                          shift and go to state 5
    block                          shift and go to state 184

state 160

    (14) statement -> IF condition LPARENT statement RPARENT . block
    (2) block -> . varDecl statement principal
    (6) varDecl -> . DEF LPARENT ID COMMA DATATYPE RPARENT SEMICOLOM block
    (7) varDecl -> . DEF LPARENT ID COMMA DATATYPE COMMA expression RPARENT SEMICOLOM block
    (8) varDecl -> . empty
    (74) empty -> .

  ! shift/reduce conflict for DEF resolved as shift
    DEF             shift and go to state 7
    $end            reduce using rule 74 (empty -> .)
    ALTER           reduce using rule 74 (empty -> .)
    CALL            reduce using rule 74 (empty -> .)
    ISTRUE          reduce using rule 74 (empty -> .)
    IF              reduce using rule 74 (empty -> .)
    WHILE           reduce using rule 74 (empty -> .)
    PROC            reduce using rule 74 (empty -> .)
    MOVER           reduce using rule 74 (empty -> .)
    COMMENT         reduce using rule 74 (empty -> .)
    ID              reduce using rule 74 (empty -> .)
    NOT             reduce using rule 74 (empty -> .)
    ALEATORIO       reduce using rule 74 (empty -> .)
    REPEAT          reduce using rule 74 (empty -> .)
    BREAK           reduce using rule 74 (empty -> .)
    UNTIL           reduce using rule 74 (empty -> .)
    CASE            reduce using rule 74 (empty -> .)
    PRINT           reduce using rule 74 (empty -> .)
    PRINCIPAL       reduce using rule 74 (empty -> .)
    RPARENT         reduce using rule 74 (empty -> .)
    SEMICOLOM       reduce using rule 74 (empty -> .)
    ELSE            reduce using rule 74 (empty -> .)

  ! DEF             [ reduce using rule 74 (empty -> .) ]

    varDecl                        shift and go to state 4
    empty                          shift and go to state 5
    block                          shift and go to state 185

state 161

    (12) statement -> CALL LPARENT ID RPARENT block .

    PRINCIPAL       reduce using rule 12 (statement -> CALL LPARENT ID RPARENT block .)
    $end            reduce using rule 12 (statement -> CALL LPARENT ID RPARENT block .)
    RPARENT         reduce using rule 12 (statement -> CALL LPARENT ID RPARENT block .)
    ALTER           reduce using rule 12 (statement -> CALL LPARENT ID RPARENT block .)
    CALL            reduce using rule 12 (statement -> CALL LPARENT ID RPARENT block .)
    ISTRUE          reduce using rule 12 (statement -> CALL LPARENT ID RPARENT block .)
    IF              reduce using rule 12 (statement -> CALL LPARENT ID RPARENT block .)
    WHILE           reduce using rule 12 (statement -> CALL LPARENT ID RPARENT block .)
    PROC            reduce using rule 12 (statement -> CALL LPARENT ID RPARENT block .)
    MOVER           reduce using rule 12 (statement -> CALL LPARENT ID RPARENT block .)
    COMMENT         reduce using rule 12 (statement -> CALL LPARENT ID RPARENT block .)
    ID              reduce using rule 12 (statement -> CALL LPARENT ID RPARENT block .)
    NOT             reduce using rule 12 (statement -> CALL LPARENT ID RPARENT block .)
    ALEATORIO       reduce using rule 12 (statement -> CALL LPARENT ID RPARENT block .)
    REPEAT          reduce using rule 12 (statement -> CALL LPARENT ID RPARENT block .)
    BREAK           reduce using rule 12 (statement -> CALL LPARENT ID RPARENT block .)
    UNTIL           reduce using rule 12 (statement -> CALL LPARENT ID RPARENT block .)
    CASE            reduce using rule 12 (statement -> CALL LPARENT ID RPARENT block .)
    PRINT           reduce using rule 12 (statement -> CALL LPARENT ID RPARENT block .)
    DEF             reduce using rule 12 (statement -> CALL LPARENT ID RPARENT block .)


state 162

    (25) statement -> NOT LPARENT ID RPARENT SEMICOLOM . block
    (2) block -> . varDecl statement principal
    (6) varDecl -> . DEF LPARENT ID COMMA DATATYPE RPARENT SEMICOLOM block
    (7) varDecl -> . DEF LPARENT ID COMMA DATATYPE COMMA expression RPARENT SEMICOLOM block
    (8) varDecl -> . empty
    (74) empty -> .

  ! shift/reduce conflict for DEF resolved as shift
    DEF             shift and go to state 7
    $end            reduce using rule 74 (empty -> .)
    ALTER           reduce using rule 74 (empty -> .)
    CALL            reduce using rule 74 (empty -> .)
    ISTRUE          reduce using rule 74 (empty -> .)
    IF              reduce using rule 74 (empty -> .)
    WHILE           reduce using rule 74 (empty -> .)
    PROC            reduce using rule 74 (empty -> .)
    MOVER           reduce using rule 74 (empty -> .)
    COMMENT         reduce using rule 74 (empty -> .)
    ID              reduce using rule 74 (empty -> .)
    NOT             reduce using rule 74 (empty -> .)
    ALEATORIO       reduce using rule 74 (empty -> .)
    REPEAT          reduce using rule 74 (empty -> .)
    BREAK           reduce using rule 74 (empty -> .)
    UNTIL           reduce using rule 74 (empty -> .)
    CASE            reduce using rule 74 (empty -> .)
    PRINT           reduce using rule 74 (empty -> .)
    PRINCIPAL       reduce using rule 74 (empty -> .)
    RPARENT         reduce using rule 74 (empty -> .)
    SEMICOLOM       reduce using rule 74 (empty -> .)
    ELSE            reduce using rule 74 (empty -> .)

  ! DEF             [ reduce using rule 74 (empty -> .) ]

    varDecl                        shift and go to state 4
    empty                          shift and go to state 5
    block                          shift and go to state 186

state 163

    (17) statement -> PROC ID LPARENT statement RPARENT . SEMICOLOM block

    SEMICOLOM       shift and go to state 187


state 164

    (16) statement -> PROC ID LPARENT varDecl RPARENT . SEMICOLOM block

    SEMICOLOM       shift and go to state 188


state 165

    (7) varDecl -> DEF LPARENT ID COMMA DATATYPE COMMA . expression RPARENT SEMICOLOM block
    (56) expression -> . term
    (57) expression -> . addingOperator term
    (58) expression -> . expression addingOperator term
    (61) term -> . factor
    (62) term -> . term multiplyingOperator factor
    (59) addingOperator -> . PLUS
    (60) addingOperator -> . MINUS
    (67) factor -> . INTEGER
    (68) factor -> . BOOLEAN
    (69) factor -> . ID
    (70) factor -> . LPARENT expression RPARENT

    PLUS            shift and go to state 37
    MINUS           shift and go to state 39
    INTEGER         shift and go to state 33
    BOOLEAN         shift and go to state 35
    ID              shift and go to state 34
    LPARENT         shift and go to state 31

    addingOperator                 shift and go to state 32
    term                           shift and go to state 30
    factor                         shift and go to state 36
    expression                     shift and go to state 189

state 166

    (6) varDecl -> DEF LPARENT ID COMMA DATATYPE RPARENT . SEMICOLOM block

    SEMICOLOM       shift and go to state 190


state 167

    (15) statement -> WHILE condition LPARENT statement RPARENT SEMICOLOM . block
    (2) block -> . varDecl statement principal
    (6) varDecl -> . DEF LPARENT ID COMMA DATATYPE RPARENT SEMICOLOM block
    (7) varDecl -> . DEF LPARENT ID COMMA DATATYPE COMMA expression RPARENT SEMICOLOM block
    (8) varDecl -> . empty
    (74) empty -> .

  ! shift/reduce conflict for DEF resolved as shift
    DEF             shift and go to state 7
    $end            reduce using rule 74 (empty -> .)
    ALTER           reduce using rule 74 (empty -> .)
    CALL            reduce using rule 74 (empty -> .)
    ISTRUE          reduce using rule 74 (empty -> .)
    IF              reduce using rule 74 (empty -> .)
    WHILE           reduce using rule 74 (empty -> .)
    PROC            reduce using rule 74 (empty -> .)
    MOVER           reduce using rule 74 (empty -> .)
    COMMENT         reduce using rule 74 (empty -> .)
    ID              reduce using rule 74 (empty -> .)
    NOT             reduce using rule 74 (empty -> .)
    ALEATORIO       reduce using rule 74 (empty -> .)
    REPEAT          reduce using rule 74 (empty -> .)
    BREAK           reduce using rule 74 (empty -> .)
    UNTIL           reduce using rule 74 (empty -> .)
    CASE            reduce using rule 74 (empty -> .)
    PRINT           reduce using rule 74 (empty -> .)
    PRINCIPAL       reduce using rule 74 (empty -> .)
    RPARENT         reduce using rule 74 (empty -> .)
    SEMICOLOM       reduce using rule 74 (empty -> .)
    ELSE            reduce using rule 74 (empty -> .)

  ! DEF             [ reduce using rule 74 (empty -> .) ]

    varDecl                        shift and go to state 4
    empty                          shift and go to state 5
    block                          shift and go to state 191

state 168

    (39) print -> PRINT LPARENT expression RPARENT SEMICOLOM block .

    DEF             reduce using rule 39 (print -> PRINT LPARENT expression RPARENT SEMICOLOM block .)
    ALTER           reduce using rule 39 (print -> PRINT LPARENT expression RPARENT SEMICOLOM block .)
    CALL            reduce using rule 39 (print -> PRINT LPARENT expression RPARENT SEMICOLOM block .)
    ISTRUE          reduce using rule 39 (print -> PRINT LPARENT expression RPARENT SEMICOLOM block .)
    IF              reduce using rule 39 (print -> PRINT LPARENT expression RPARENT SEMICOLOM block .)
    WHILE           reduce using rule 39 (print -> PRINT LPARENT expression RPARENT SEMICOLOM block .)
    PROC            reduce using rule 39 (print -> PRINT LPARENT expression RPARENT SEMICOLOM block .)
    MOVER           reduce using rule 39 (print -> PRINT LPARENT expression RPARENT SEMICOLOM block .)
    COMMENT         reduce using rule 39 (print -> PRINT LPARENT expression RPARENT SEMICOLOM block .)
    ID              reduce using rule 39 (print -> PRINT LPARENT expression RPARENT SEMICOLOM block .)
    NOT             reduce using rule 39 (print -> PRINT LPARENT expression RPARENT SEMICOLOM block .)
    ALEATORIO       reduce using rule 39 (print -> PRINT LPARENT expression RPARENT SEMICOLOM block .)
    REPEAT          reduce using rule 39 (print -> PRINT LPARENT expression RPARENT SEMICOLOM block .)
    BREAK           reduce using rule 39 (print -> PRINT LPARENT expression RPARENT SEMICOLOM block .)
    UNTIL           reduce using rule 39 (print -> PRINT LPARENT expression RPARENT SEMICOLOM block .)
    CASE            reduce using rule 39 (print -> PRINT LPARENT expression RPARENT SEMICOLOM block .)
    PRINT           reduce using rule 39 (print -> PRINT LPARENT expression RPARENT SEMICOLOM block .)
    PRINCIPAL       reduce using rule 39 (print -> PRINT LPARENT expression RPARENT SEMICOLOM block .)
    $end            reduce using rule 39 (print -> PRINT LPARENT expression RPARENT SEMICOLOM block .)
    RPARENT         reduce using rule 39 (print -> PRINT LPARENT expression RPARENT SEMICOLOM block .)


state 169

    (37) print -> PRINT LPARENT ID RPARENT SEMICOLOM block .

    DEF             reduce using rule 37 (print -> PRINT LPARENT ID RPARENT SEMICOLOM block .)
    ALTER           reduce using rule 37 (print -> PRINT LPARENT ID RPARENT SEMICOLOM block .)
    CALL            reduce using rule 37 (print -> PRINT LPARENT ID RPARENT SEMICOLOM block .)
    ISTRUE          reduce using rule 37 (print -> PRINT LPARENT ID RPARENT SEMICOLOM block .)
    IF              reduce using rule 37 (print -> PRINT LPARENT ID RPARENT SEMICOLOM block .)
    WHILE           reduce using rule 37 (print -> PRINT LPARENT ID RPARENT SEMICOLOM block .)
    PROC            reduce using rule 37 (print -> PRINT LPARENT ID RPARENT SEMICOLOM block .)
    MOVER           reduce using rule 37 (print -> PRINT LPARENT ID RPARENT SEMICOLOM block .)
    COMMENT         reduce using rule 37 (print -> PRINT LPARENT ID RPARENT SEMICOLOM block .)
    ID              reduce using rule 37 (print -> PRINT LPARENT ID RPARENT SEMICOLOM block .)
    NOT             reduce using rule 37 (print -> PRINT LPARENT ID RPARENT SEMICOLOM block .)
    ALEATORIO       reduce using rule 37 (print -> PRINT LPARENT ID RPARENT SEMICOLOM block .)
    REPEAT          reduce using rule 37 (print -> PRINT LPARENT ID RPARENT SEMICOLOM block .)
    BREAK           reduce using rule 37 (print -> PRINT LPARENT ID RPARENT SEMICOLOM block .)
    UNTIL           reduce using rule 37 (print -> PRINT LPARENT ID RPARENT SEMICOLOM block .)
    CASE            reduce using rule 37 (print -> PRINT LPARENT ID RPARENT SEMICOLOM block .)
    PRINT           reduce using rule 37 (print -> PRINT LPARENT ID RPARENT SEMICOLOM block .)
    PRINCIPAL       reduce using rule 37 (print -> PRINT LPARENT ID RPARENT SEMICOLOM block .)
    $end            reduce using rule 37 (print -> PRINT LPARENT ID RPARENT SEMICOLOM block .)
    RPARENT         reduce using rule 37 (print -> PRINT LPARENT ID RPARENT SEMICOLOM block .)


state 170

    (38) print -> PRINT LPARENT STRING RPARENT SEMICOLOM block .

    DEF             reduce using rule 38 (print -> PRINT LPARENT STRING RPARENT SEMICOLOM block .)
    ALTER           reduce using rule 38 (print -> PRINT LPARENT STRING RPARENT SEMICOLOM block .)
    CALL            reduce using rule 38 (print -> PRINT LPARENT STRING RPARENT SEMICOLOM block .)
    ISTRUE          reduce using rule 38 (print -> PRINT LPARENT STRING RPARENT SEMICOLOM block .)
    IF              reduce using rule 38 (print -> PRINT LPARENT STRING RPARENT SEMICOLOM block .)
    WHILE           reduce using rule 38 (print -> PRINT LPARENT STRING RPARENT SEMICOLOM block .)
    PROC            reduce using rule 38 (print -> PRINT LPARENT STRING RPARENT SEMICOLOM block .)
    MOVER           reduce using rule 38 (print -> PRINT LPARENT STRING RPARENT SEMICOLOM block .)
    COMMENT         reduce using rule 38 (print -> PRINT LPARENT STRING RPARENT SEMICOLOM block .)
    ID              reduce using rule 38 (print -> PRINT LPARENT STRING RPARENT SEMICOLOM block .)
    NOT             reduce using rule 38 (print -> PRINT LPARENT STRING RPARENT SEMICOLOM block .)
    ALEATORIO       reduce using rule 38 (print -> PRINT LPARENT STRING RPARENT SEMICOLOM block .)
    REPEAT          reduce using rule 38 (print -> PRINT LPARENT STRING RPARENT SEMICOLOM block .)
    BREAK           reduce using rule 38 (print -> PRINT LPARENT STRING RPARENT SEMICOLOM block .)
    UNTIL           reduce using rule 38 (print -> PRINT LPARENT STRING RPARENT SEMICOLOM block .)
    CASE            reduce using rule 38 (print -> PRINT LPARENT STRING RPARENT SEMICOLOM block .)
    PRINT           reduce using rule 38 (print -> PRINT LPARENT STRING RPARENT SEMICOLOM block .)
    PRINCIPAL       reduce using rule 38 (print -> PRINT LPARENT STRING RPARENT SEMICOLOM block .)
    $end            reduce using rule 38 (print -> PRINT LPARENT STRING RPARENT SEMICOLOM block .)
    RPARENT         reduce using rule 38 (print -> PRINT LPARENT STRING RPARENT SEMICOLOM block .)


state 171

    (11) statement -> ALTER LPARENT ID COMMA expression RPARENT . SEMICOLOM block

    SEMICOLOM       shift and go to state 192


state 172

    (30) statement -> CASE WHEN LPARENT condition RPARENT THEN . LPARENT block RPARENT SEMICOLOM block
    (31) statement -> CASE WHEN LPARENT condition RPARENT THEN . LPARENT block RPARENT ELSE LPARENT block RPARENT SEMICOLOM block

    LPARENT         shift and go to state 193


state 173

    (35) whenloop -> WHEN condition THEN LPARENT . block RPARENT whenloop
    (2) block -> . varDecl statement principal
    (6) varDecl -> . DEF LPARENT ID COMMA DATATYPE RPARENT SEMICOLOM block
    (7) varDecl -> . DEF LPARENT ID COMMA DATATYPE COMMA expression RPARENT SEMICOLOM block
    (8) varDecl -> . empty
    (74) empty -> .

  ! shift/reduce conflict for DEF resolved as shift
    DEF             shift and go to state 7
    $end            reduce using rule 74 (empty -> .)
    ALTER           reduce using rule 74 (empty -> .)
    CALL            reduce using rule 74 (empty -> .)
    ISTRUE          reduce using rule 74 (empty -> .)
    IF              reduce using rule 74 (empty -> .)
    WHILE           reduce using rule 74 (empty -> .)
    PROC            reduce using rule 74 (empty -> .)
    MOVER           reduce using rule 74 (empty -> .)
    COMMENT         reduce using rule 74 (empty -> .)
    ID              reduce using rule 74 (empty -> .)
    NOT             reduce using rule 74 (empty -> .)
    ALEATORIO       reduce using rule 74 (empty -> .)
    REPEAT          reduce using rule 74 (empty -> .)
    BREAK           reduce using rule 74 (empty -> .)
    UNTIL           reduce using rule 74 (empty -> .)
    CASE            reduce using rule 74 (empty -> .)
    PRINT           reduce using rule 74 (empty -> .)
    PRINCIPAL       reduce using rule 74 (empty -> .)
    RPARENT         reduce using rule 74 (empty -> .)
    SEMICOLOM       reduce using rule 74 (empty -> .)
    ELSE            reduce using rule 74 (empty -> .)

  ! DEF             [ reduce using rule 74 (empty -> .) ]

    varDecl                        shift and go to state 4
    empty                          shift and go to state 5
    block                          shift and go to state 194

state 174

    (33) statement -> CASE ID whenloop ELSE LPARENT block . RPARENT SEMICOLOM block

    RPARENT         shift and go to state 195


state 175

    (13) statement -> ISTRUE LPARENT ID RPARENT SEMICOLOM block .

    PRINCIPAL       reduce using rule 13 (statement -> ISTRUE LPARENT ID RPARENT SEMICOLOM block .)
    $end            reduce using rule 13 (statement -> ISTRUE LPARENT ID RPARENT SEMICOLOM block .)
    RPARENT         reduce using rule 13 (statement -> ISTRUE LPARENT ID RPARENT SEMICOLOM block .)
    ALTER           reduce using rule 13 (statement -> ISTRUE LPARENT ID RPARENT SEMICOLOM block .)
    CALL            reduce using rule 13 (statement -> ISTRUE LPARENT ID RPARENT SEMICOLOM block .)
    ISTRUE          reduce using rule 13 (statement -> ISTRUE LPARENT ID RPARENT SEMICOLOM block .)
    IF              reduce using rule 13 (statement -> ISTRUE LPARENT ID RPARENT SEMICOLOM block .)
    WHILE           reduce using rule 13 (statement -> ISTRUE LPARENT ID RPARENT SEMICOLOM block .)
    PROC            reduce using rule 13 (statement -> ISTRUE LPARENT ID RPARENT SEMICOLOM block .)
    MOVER           reduce using rule 13 (statement -> ISTRUE LPARENT ID RPARENT SEMICOLOM block .)
    COMMENT         reduce using rule 13 (statement -> ISTRUE LPARENT ID RPARENT SEMICOLOM block .)
    ID              reduce using rule 13 (statement -> ISTRUE LPARENT ID RPARENT SEMICOLOM block .)
    NOT             reduce using rule 13 (statement -> ISTRUE LPARENT ID RPARENT SEMICOLOM block .)
    ALEATORIO       reduce using rule 13 (statement -> ISTRUE LPARENT ID RPARENT SEMICOLOM block .)
    REPEAT          reduce using rule 13 (statement -> ISTRUE LPARENT ID RPARENT SEMICOLOM block .)
    BREAK           reduce using rule 13 (statement -> ISTRUE LPARENT ID RPARENT SEMICOLOM block .)
    UNTIL           reduce using rule 13 (statement -> ISTRUE LPARENT ID RPARENT SEMICOLOM block .)
    CASE            reduce using rule 13 (statement -> ISTRUE LPARENT ID RPARENT SEMICOLOM block .)
    PRINT           reduce using rule 13 (statement -> ISTRUE LPARENT ID RPARENT SEMICOLOM block .)
    DEF             reduce using rule 13 (statement -> ISTRUE LPARENT ID RPARENT SEMICOLOM block .)


state 176

    (29) statement -> UNTIL LPARENT block RPARENT condition SEMICOLOM . block
    (2) block -> . varDecl statement principal
    (6) varDecl -> . DEF LPARENT ID COMMA DATATYPE RPARENT SEMICOLOM block
    (7) varDecl -> . DEF LPARENT ID COMMA DATATYPE COMMA expression RPARENT SEMICOLOM block
    (8) varDecl -> . empty
    (74) empty -> .

  ! shift/reduce conflict for DEF resolved as shift
    DEF             shift and go to state 7
    $end            reduce using rule 74 (empty -> .)
    ALTER           reduce using rule 74 (empty -> .)
    CALL            reduce using rule 74 (empty -> .)
    ISTRUE          reduce using rule 74 (empty -> .)
    IF              reduce using rule 74 (empty -> .)
    WHILE           reduce using rule 74 (empty -> .)
    PROC            reduce using rule 74 (empty -> .)
    MOVER           reduce using rule 74 (empty -> .)
    COMMENT         reduce using rule 74 (empty -> .)
    ID              reduce using rule 74 (empty -> .)
    NOT             reduce using rule 74 (empty -> .)
    ALEATORIO       reduce using rule 74 (empty -> .)
    REPEAT          reduce using rule 74 (empty -> .)
    BREAK           reduce using rule 74 (empty -> .)
    UNTIL           reduce using rule 74 (empty -> .)
    CASE            reduce using rule 74 (empty -> .)
    PRINT           reduce using rule 74 (empty -> .)
    PRINCIPAL       reduce using rule 74 (empty -> .)
    RPARENT         reduce using rule 74 (empty -> .)
    SEMICOLOM       reduce using rule 74 (empty -> .)
    ELSE            reduce using rule 74 (empty -> .)

  ! DEF             [ reduce using rule 74 (empty -> .) ]

    varDecl                        shift and go to state 4
    empty                          shift and go to state 5
    block                          shift and go to state 196

state 177

    (4) principal -> PRINCIPAL LPARENT statement RPARENT SEMICOLOM . block
    (2) block -> . varDecl statement principal
    (6) varDecl -> . DEF LPARENT ID COMMA DATATYPE RPARENT SEMICOLOM block
    (7) varDecl -> . DEF LPARENT ID COMMA DATATYPE COMMA expression RPARENT SEMICOLOM block
    (8) varDecl -> . empty
    (74) empty -> .

  ! shift/reduce conflict for DEF resolved as shift
    DEF             shift and go to state 7
    $end            reduce using rule 74 (empty -> .)
    ALTER           reduce using rule 74 (empty -> .)
    CALL            reduce using rule 74 (empty -> .)
    ISTRUE          reduce using rule 74 (empty -> .)
    IF              reduce using rule 74 (empty -> .)
    WHILE           reduce using rule 74 (empty -> .)
    PROC            reduce using rule 74 (empty -> .)
    MOVER           reduce using rule 74 (empty -> .)
    COMMENT         reduce using rule 74 (empty -> .)
    ID              reduce using rule 74 (empty -> .)
    NOT             reduce using rule 74 (empty -> .)
    ALEATORIO       reduce using rule 74 (empty -> .)
    REPEAT          reduce using rule 74 (empty -> .)
    BREAK           reduce using rule 74 (empty -> .)
    UNTIL           reduce using rule 74 (empty -> .)
    CASE            reduce using rule 74 (empty -> .)
    PRINT           reduce using rule 74 (empty -> .)
    PRINCIPAL       reduce using rule 74 (empty -> .)
    RPARENT         reduce using rule 74 (empty -> .)
    SEMICOLOM       reduce using rule 74 (empty -> .)
    ELSE            reduce using rule 74 (empty -> .)

  ! DEF             [ reduce using rule 74 (empty -> .) ]

    varDecl                        shift and go to state 4
    empty                          shift and go to state 5
    block                          shift and go to state 197

state 178

    (3) principal -> PRINCIPAL LPARENT varDecl RPARENT SEMICOLOM . block
    (2) block -> . varDecl statement principal
    (6) varDecl -> . DEF LPARENT ID COMMA DATATYPE RPARENT SEMICOLOM block
    (7) varDecl -> . DEF LPARENT ID COMMA DATATYPE COMMA expression RPARENT SEMICOLOM block
    (8) varDecl -> . empty
    (74) empty -> .

  ! shift/reduce conflict for DEF resolved as shift
    DEF             shift and go to state 7
    $end            reduce using rule 74 (empty -> .)
    ALTER           reduce using rule 74 (empty -> .)
    CALL            reduce using rule 74 (empty -> .)
    ISTRUE          reduce using rule 74 (empty -> .)
    IF              reduce using rule 74 (empty -> .)
    WHILE           reduce using rule 74 (empty -> .)
    PROC            reduce using rule 74 (empty -> .)
    MOVER           reduce using rule 74 (empty -> .)
    COMMENT         reduce using rule 74 (empty -> .)
    ID              reduce using rule 74 (empty -> .)
    NOT             reduce using rule 74 (empty -> .)
    ALEATORIO       reduce using rule 74 (empty -> .)
    REPEAT          reduce using rule 74 (empty -> .)
    BREAK           reduce using rule 74 (empty -> .)
    UNTIL           reduce using rule 74 (empty -> .)
    CASE            reduce using rule 74 (empty -> .)
    PRINT           reduce using rule 74 (empty -> .)
    PRINCIPAL       reduce using rule 74 (empty -> .)
    RPARENT         reduce using rule 74 (empty -> .)
    SEMICOLOM       reduce using rule 74 (empty -> .)
    ELSE            reduce using rule 74 (empty -> .)

  ! DEF             [ reduce using rule 74 (empty -> .) ]

    varDecl                        shift and go to state 4
    empty                          shift and go to state 5
    block                          shift and go to state 198

state 179

    (19) statement -> MOVER LPARENT movimiento RPARENT SEMICOLOM block .

    PRINCIPAL       reduce using rule 19 (statement -> MOVER LPARENT movimiento RPARENT SEMICOLOM block .)
    $end            reduce using rule 19 (statement -> MOVER LPARENT movimiento RPARENT SEMICOLOM block .)
    RPARENT         reduce using rule 19 (statement -> MOVER LPARENT movimiento RPARENT SEMICOLOM block .)
    ALTER           reduce using rule 19 (statement -> MOVER LPARENT movimiento RPARENT SEMICOLOM block .)
    CALL            reduce using rule 19 (statement -> MOVER LPARENT movimiento RPARENT SEMICOLOM block .)
    ISTRUE          reduce using rule 19 (statement -> MOVER LPARENT movimiento RPARENT SEMICOLOM block .)
    IF              reduce using rule 19 (statement -> MOVER LPARENT movimiento RPARENT SEMICOLOM block .)
    WHILE           reduce using rule 19 (statement -> MOVER LPARENT movimiento RPARENT SEMICOLOM block .)
    PROC            reduce using rule 19 (statement -> MOVER LPARENT movimiento RPARENT SEMICOLOM block .)
    MOVER           reduce using rule 19 (statement -> MOVER LPARENT movimiento RPARENT SEMICOLOM block .)
    COMMENT         reduce using rule 19 (statement -> MOVER LPARENT movimiento RPARENT SEMICOLOM block .)
    ID              reduce using rule 19 (statement -> MOVER LPARENT movimiento RPARENT SEMICOLOM block .)
    NOT             reduce using rule 19 (statement -> MOVER LPARENT movimiento RPARENT SEMICOLOM block .)
    ALEATORIO       reduce using rule 19 (statement -> MOVER LPARENT movimiento RPARENT SEMICOLOM block .)
    REPEAT          reduce using rule 19 (statement -> MOVER LPARENT movimiento RPARENT SEMICOLOM block .)
    BREAK           reduce using rule 19 (statement -> MOVER LPARENT movimiento RPARENT SEMICOLOM block .)
    UNTIL           reduce using rule 19 (statement -> MOVER LPARENT movimiento RPARENT SEMICOLOM block .)
    CASE            reduce using rule 19 (statement -> MOVER LPARENT movimiento RPARENT SEMICOLOM block .)
    PRINT           reduce using rule 19 (statement -> MOVER LPARENT movimiento RPARENT SEMICOLOM block .)
    DEF             reduce using rule 19 (statement -> MOVER LPARENT movimiento RPARENT SEMICOLOM block .)


state 180

    (27) statement -> REPEAT LPARENT block RPARENT SEMICOLOM block .

    PRINCIPAL       reduce using rule 27 (statement -> REPEAT LPARENT block RPARENT SEMICOLOM block .)
    $end            reduce using rule 27 (statement -> REPEAT LPARENT block RPARENT SEMICOLOM block .)
    RPARENT         reduce using rule 27 (statement -> REPEAT LPARENT block RPARENT SEMICOLOM block .)
    ALTER           reduce using rule 27 (statement -> REPEAT LPARENT block RPARENT SEMICOLOM block .)
    CALL            reduce using rule 27 (statement -> REPEAT LPARENT block RPARENT SEMICOLOM block .)
    ISTRUE          reduce using rule 27 (statement -> REPEAT LPARENT block RPARENT SEMICOLOM block .)
    IF              reduce using rule 27 (statement -> REPEAT LPARENT block RPARENT SEMICOLOM block .)
    WHILE           reduce using rule 27 (statement -> REPEAT LPARENT block RPARENT SEMICOLOM block .)
    PROC            reduce using rule 27 (statement -> REPEAT LPARENT block RPARENT SEMICOLOM block .)
    MOVER           reduce using rule 27 (statement -> REPEAT LPARENT block RPARENT SEMICOLOM block .)
    COMMENT         reduce using rule 27 (statement -> REPEAT LPARENT block RPARENT SEMICOLOM block .)
    ID              reduce using rule 27 (statement -> REPEAT LPARENT block RPARENT SEMICOLOM block .)
    NOT             reduce using rule 27 (statement -> REPEAT LPARENT block RPARENT SEMICOLOM block .)
    ALEATORIO       reduce using rule 27 (statement -> REPEAT LPARENT block RPARENT SEMICOLOM block .)
    REPEAT          reduce using rule 27 (statement -> REPEAT LPARENT block RPARENT SEMICOLOM block .)
    BREAK           reduce using rule 27 (statement -> REPEAT LPARENT block RPARENT SEMICOLOM block .)
    UNTIL           reduce using rule 27 (statement -> REPEAT LPARENT block RPARENT SEMICOLOM block .)
    CASE            reduce using rule 27 (statement -> REPEAT LPARENT block RPARENT SEMICOLOM block .)
    PRINT           reduce using rule 27 (statement -> REPEAT LPARENT block RPARENT SEMICOLOM block .)
    DEF             reduce using rule 27 (statement -> REPEAT LPARENT block RPARENT SEMICOLOM block .)


state 181

    (22) statement -> ID LPARENT statement RPARENT SEMICOLOM block .

    PRINCIPAL       reduce using rule 22 (statement -> ID LPARENT statement RPARENT SEMICOLOM block .)
    $end            reduce using rule 22 (statement -> ID LPARENT statement RPARENT SEMICOLOM block .)
    RPARENT         reduce using rule 22 (statement -> ID LPARENT statement RPARENT SEMICOLOM block .)
    ALTER           reduce using rule 22 (statement -> ID LPARENT statement RPARENT SEMICOLOM block .)
    CALL            reduce using rule 22 (statement -> ID LPARENT statement RPARENT SEMICOLOM block .)
    ISTRUE          reduce using rule 22 (statement -> ID LPARENT statement RPARENT SEMICOLOM block .)
    IF              reduce using rule 22 (statement -> ID LPARENT statement RPARENT SEMICOLOM block .)
    WHILE           reduce using rule 22 (statement -> ID LPARENT statement RPARENT SEMICOLOM block .)
    PROC            reduce using rule 22 (statement -> ID LPARENT statement RPARENT SEMICOLOM block .)
    MOVER           reduce using rule 22 (statement -> ID LPARENT statement RPARENT SEMICOLOM block .)
    COMMENT         reduce using rule 22 (statement -> ID LPARENT statement RPARENT SEMICOLOM block .)
    ID              reduce using rule 22 (statement -> ID LPARENT statement RPARENT SEMICOLOM block .)
    NOT             reduce using rule 22 (statement -> ID LPARENT statement RPARENT SEMICOLOM block .)
    ALEATORIO       reduce using rule 22 (statement -> ID LPARENT statement RPARENT SEMICOLOM block .)
    REPEAT          reduce using rule 22 (statement -> ID LPARENT statement RPARENT SEMICOLOM block .)
    BREAK           reduce using rule 22 (statement -> ID LPARENT statement RPARENT SEMICOLOM block .)
    UNTIL           reduce using rule 22 (statement -> ID LPARENT statement RPARENT SEMICOLOM block .)
    CASE            reduce using rule 22 (statement -> ID LPARENT statement RPARENT SEMICOLOM block .)
    PRINT           reduce using rule 22 (statement -> ID LPARENT statement RPARENT SEMICOLOM block .)
    DEF             reduce using rule 22 (statement -> ID LPARENT statement RPARENT SEMICOLOM block .)


state 182

    (21) statement -> ID LPARENT ID RPARENT SEMICOLOM block .

    PRINCIPAL       reduce using rule 21 (statement -> ID LPARENT ID RPARENT SEMICOLOM block .)
    $end            reduce using rule 21 (statement -> ID LPARENT ID RPARENT SEMICOLOM block .)
    RPARENT         reduce using rule 21 (statement -> ID LPARENT ID RPARENT SEMICOLOM block .)
    ALTER           reduce using rule 21 (statement -> ID LPARENT ID RPARENT SEMICOLOM block .)
    CALL            reduce using rule 21 (statement -> ID LPARENT ID RPARENT SEMICOLOM block .)
    ISTRUE          reduce using rule 21 (statement -> ID LPARENT ID RPARENT SEMICOLOM block .)
    IF              reduce using rule 21 (statement -> ID LPARENT ID RPARENT SEMICOLOM block .)
    WHILE           reduce using rule 21 (statement -> ID LPARENT ID RPARENT SEMICOLOM block .)
    PROC            reduce using rule 21 (statement -> ID LPARENT ID RPARENT SEMICOLOM block .)
    MOVER           reduce using rule 21 (statement -> ID LPARENT ID RPARENT SEMICOLOM block .)
    COMMENT         reduce using rule 21 (statement -> ID LPARENT ID RPARENT SEMICOLOM block .)
    ID              reduce using rule 21 (statement -> ID LPARENT ID RPARENT SEMICOLOM block .)
    NOT             reduce using rule 21 (statement -> ID LPARENT ID RPARENT SEMICOLOM block .)
    ALEATORIO       reduce using rule 21 (statement -> ID LPARENT ID RPARENT SEMICOLOM block .)
    REPEAT          reduce using rule 21 (statement -> ID LPARENT ID RPARENT SEMICOLOM block .)
    BREAK           reduce using rule 21 (statement -> ID LPARENT ID RPARENT SEMICOLOM block .)
    UNTIL           reduce using rule 21 (statement -> ID LPARENT ID RPARENT SEMICOLOM block .)
    CASE            reduce using rule 21 (statement -> ID LPARENT ID RPARENT SEMICOLOM block .)
    PRINT           reduce using rule 21 (statement -> ID LPARENT ID RPARENT SEMICOLOM block .)
    DEF             reduce using rule 21 (statement -> ID LPARENT ID RPARENT SEMICOLOM block .)


state 183

    (24) statement -> ID LPARENT expression RPARENT SEMICOLOM block .

    PRINCIPAL       reduce using rule 24 (statement -> ID LPARENT expression RPARENT SEMICOLOM block .)
    $end            reduce using rule 24 (statement -> ID LPARENT expression RPARENT SEMICOLOM block .)
    RPARENT         reduce using rule 24 (statement -> ID LPARENT expression RPARENT SEMICOLOM block .)
    ALTER           reduce using rule 24 (statement -> ID LPARENT expression RPARENT SEMICOLOM block .)
    CALL            reduce using rule 24 (statement -> ID LPARENT expression RPARENT SEMICOLOM block .)
    ISTRUE          reduce using rule 24 (statement -> ID LPARENT expression RPARENT SEMICOLOM block .)
    IF              reduce using rule 24 (statement -> ID LPARENT expression RPARENT SEMICOLOM block .)
    WHILE           reduce using rule 24 (statement -> ID LPARENT expression RPARENT SEMICOLOM block .)
    PROC            reduce using rule 24 (statement -> ID LPARENT expression RPARENT SEMICOLOM block .)
    MOVER           reduce using rule 24 (statement -> ID LPARENT expression RPARENT SEMICOLOM block .)
    COMMENT         reduce using rule 24 (statement -> ID LPARENT expression RPARENT SEMICOLOM block .)
    ID              reduce using rule 24 (statement -> ID LPARENT expression RPARENT SEMICOLOM block .)
    NOT             reduce using rule 24 (statement -> ID LPARENT expression RPARENT SEMICOLOM block .)
    ALEATORIO       reduce using rule 24 (statement -> ID LPARENT expression RPARENT SEMICOLOM block .)
    REPEAT          reduce using rule 24 (statement -> ID LPARENT expression RPARENT SEMICOLOM block .)
    BREAK           reduce using rule 24 (statement -> ID LPARENT expression RPARENT SEMICOLOM block .)
    UNTIL           reduce using rule 24 (statement -> ID LPARENT expression RPARENT SEMICOLOM block .)
    CASE            reduce using rule 24 (statement -> ID LPARENT expression RPARENT SEMICOLOM block .)
    PRINT           reduce using rule 24 (statement -> ID LPARENT expression RPARENT SEMICOLOM block .)
    DEF             reduce using rule 24 (statement -> ID LPARENT expression RPARENT SEMICOLOM block .)


state 184

    (23) statement -> ID LPARENT BOOLEAN RPARENT SEMICOLOM block .

    PRINCIPAL       reduce using rule 23 (statement -> ID LPARENT BOOLEAN RPARENT SEMICOLOM block .)
    $end            reduce using rule 23 (statement -> ID LPARENT BOOLEAN RPARENT SEMICOLOM block .)
    RPARENT         reduce using rule 23 (statement -> ID LPARENT BOOLEAN RPARENT SEMICOLOM block .)
    ALTER           reduce using rule 23 (statement -> ID LPARENT BOOLEAN RPARENT SEMICOLOM block .)
    CALL            reduce using rule 23 (statement -> ID LPARENT BOOLEAN RPARENT SEMICOLOM block .)
    ISTRUE          reduce using rule 23 (statement -> ID LPARENT BOOLEAN RPARENT SEMICOLOM block .)
    IF              reduce using rule 23 (statement -> ID LPARENT BOOLEAN RPARENT SEMICOLOM block .)
    WHILE           reduce using rule 23 (statement -> ID LPARENT BOOLEAN RPARENT SEMICOLOM block .)
    PROC            reduce using rule 23 (statement -> ID LPARENT BOOLEAN RPARENT SEMICOLOM block .)
    MOVER           reduce using rule 23 (statement -> ID LPARENT BOOLEAN RPARENT SEMICOLOM block .)
    COMMENT         reduce using rule 23 (statement -> ID LPARENT BOOLEAN RPARENT SEMICOLOM block .)
    ID              reduce using rule 23 (statement -> ID LPARENT BOOLEAN RPARENT SEMICOLOM block .)
    NOT             reduce using rule 23 (statement -> ID LPARENT BOOLEAN RPARENT SEMICOLOM block .)
    ALEATORIO       reduce using rule 23 (statement -> ID LPARENT BOOLEAN RPARENT SEMICOLOM block .)
    REPEAT          reduce using rule 23 (statement -> ID LPARENT BOOLEAN RPARENT SEMICOLOM block .)
    BREAK           reduce using rule 23 (statement -> ID LPARENT BOOLEAN RPARENT SEMICOLOM block .)
    UNTIL           reduce using rule 23 (statement -> ID LPARENT BOOLEAN RPARENT SEMICOLOM block .)
    CASE            reduce using rule 23 (statement -> ID LPARENT BOOLEAN RPARENT SEMICOLOM block .)
    PRINT           reduce using rule 23 (statement -> ID LPARENT BOOLEAN RPARENT SEMICOLOM block .)
    DEF             reduce using rule 23 (statement -> ID LPARENT BOOLEAN RPARENT SEMICOLOM block .)


state 185

    (14) statement -> IF condition LPARENT statement RPARENT block .

    PRINCIPAL       reduce using rule 14 (statement -> IF condition LPARENT statement RPARENT block .)
    $end            reduce using rule 14 (statement -> IF condition LPARENT statement RPARENT block .)
    RPARENT         reduce using rule 14 (statement -> IF condition LPARENT statement RPARENT block .)
    ALTER           reduce using rule 14 (statement -> IF condition LPARENT statement RPARENT block .)
    CALL            reduce using rule 14 (statement -> IF condition LPARENT statement RPARENT block .)
    ISTRUE          reduce using rule 14 (statement -> IF condition LPARENT statement RPARENT block .)
    IF              reduce using rule 14 (statement -> IF condition LPARENT statement RPARENT block .)
    WHILE           reduce using rule 14 (statement -> IF condition LPARENT statement RPARENT block .)
    PROC            reduce using rule 14 (statement -> IF condition LPARENT statement RPARENT block .)
    MOVER           reduce using rule 14 (statement -> IF condition LPARENT statement RPARENT block .)
    COMMENT         reduce using rule 14 (statement -> IF condition LPARENT statement RPARENT block .)
    ID              reduce using rule 14 (statement -> IF condition LPARENT statement RPARENT block .)
    NOT             reduce using rule 14 (statement -> IF condition LPARENT statement RPARENT block .)
    ALEATORIO       reduce using rule 14 (statement -> IF condition LPARENT statement RPARENT block .)
    REPEAT          reduce using rule 14 (statement -> IF condition LPARENT statement RPARENT block .)
    BREAK           reduce using rule 14 (statement -> IF condition LPARENT statement RPARENT block .)
    UNTIL           reduce using rule 14 (statement -> IF condition LPARENT statement RPARENT block .)
    CASE            reduce using rule 14 (statement -> IF condition LPARENT statement RPARENT block .)
    PRINT           reduce using rule 14 (statement -> IF condition LPARENT statement RPARENT block .)
    DEF             reduce using rule 14 (statement -> IF condition LPARENT statement RPARENT block .)


state 186

    (25) statement -> NOT LPARENT ID RPARENT SEMICOLOM block .

    PRINCIPAL       reduce using rule 25 (statement -> NOT LPARENT ID RPARENT SEMICOLOM block .)
    $end            reduce using rule 25 (statement -> NOT LPARENT ID RPARENT SEMICOLOM block .)
    RPARENT         reduce using rule 25 (statement -> NOT LPARENT ID RPARENT SEMICOLOM block .)
    ALTER           reduce using rule 25 (statement -> NOT LPARENT ID RPARENT SEMICOLOM block .)
    CALL            reduce using rule 25 (statement -> NOT LPARENT ID RPARENT SEMICOLOM block .)
    ISTRUE          reduce using rule 25 (statement -> NOT LPARENT ID RPARENT SEMICOLOM block .)
    IF              reduce using rule 25 (statement -> NOT LPARENT ID RPARENT SEMICOLOM block .)
    WHILE           reduce using rule 25 (statement -> NOT LPARENT ID RPARENT SEMICOLOM block .)
    PROC            reduce using rule 25 (statement -> NOT LPARENT ID RPARENT SEMICOLOM block .)
    MOVER           reduce using rule 25 (statement -> NOT LPARENT ID RPARENT SEMICOLOM block .)
    COMMENT         reduce using rule 25 (statement -> NOT LPARENT ID RPARENT SEMICOLOM block .)
    ID              reduce using rule 25 (statement -> NOT LPARENT ID RPARENT SEMICOLOM block .)
    NOT             reduce using rule 25 (statement -> NOT LPARENT ID RPARENT SEMICOLOM block .)
    ALEATORIO       reduce using rule 25 (statement -> NOT LPARENT ID RPARENT SEMICOLOM block .)
    REPEAT          reduce using rule 25 (statement -> NOT LPARENT ID RPARENT SEMICOLOM block .)
    BREAK           reduce using rule 25 (statement -> NOT LPARENT ID RPARENT SEMICOLOM block .)
    UNTIL           reduce using rule 25 (statement -> NOT LPARENT ID RPARENT SEMICOLOM block .)
    CASE            reduce using rule 25 (statement -> NOT LPARENT ID RPARENT SEMICOLOM block .)
    PRINT           reduce using rule 25 (statement -> NOT LPARENT ID RPARENT SEMICOLOM block .)
    DEF             reduce using rule 25 (statement -> NOT LPARENT ID RPARENT SEMICOLOM block .)


state 187

    (17) statement -> PROC ID LPARENT statement RPARENT SEMICOLOM . block
    (2) block -> . varDecl statement principal
    (6) varDecl -> . DEF LPARENT ID COMMA DATATYPE RPARENT SEMICOLOM block
    (7) varDecl -> . DEF LPARENT ID COMMA DATATYPE COMMA expression RPARENT SEMICOLOM block
    (8) varDecl -> . empty
    (74) empty -> .

  ! shift/reduce conflict for DEF resolved as shift
    DEF             shift and go to state 7
    $end            reduce using rule 74 (empty -> .)
    ALTER           reduce using rule 74 (empty -> .)
    CALL            reduce using rule 74 (empty -> .)
    ISTRUE          reduce using rule 74 (empty -> .)
    IF              reduce using rule 74 (empty -> .)
    WHILE           reduce using rule 74 (empty -> .)
    PROC            reduce using rule 74 (empty -> .)
    MOVER           reduce using rule 74 (empty -> .)
    COMMENT         reduce using rule 74 (empty -> .)
    ID              reduce using rule 74 (empty -> .)
    NOT             reduce using rule 74 (empty -> .)
    ALEATORIO       reduce using rule 74 (empty -> .)
    REPEAT          reduce using rule 74 (empty -> .)
    BREAK           reduce using rule 74 (empty -> .)
    UNTIL           reduce using rule 74 (empty -> .)
    CASE            reduce using rule 74 (empty -> .)
    PRINT           reduce using rule 74 (empty -> .)
    PRINCIPAL       reduce using rule 74 (empty -> .)
    RPARENT         reduce using rule 74 (empty -> .)
    SEMICOLOM       reduce using rule 74 (empty -> .)
    ELSE            reduce using rule 74 (empty -> .)

  ! DEF             [ reduce using rule 74 (empty -> .) ]

    varDecl                        shift and go to state 4
    empty                          shift and go to state 5
    block                          shift and go to state 199

state 188

    (16) statement -> PROC ID LPARENT varDecl RPARENT SEMICOLOM . block
    (2) block -> . varDecl statement principal
    (6) varDecl -> . DEF LPARENT ID COMMA DATATYPE RPARENT SEMICOLOM block
    (7) varDecl -> . DEF LPARENT ID COMMA DATATYPE COMMA expression RPARENT SEMICOLOM block
    (8) varDecl -> . empty
    (74) empty -> .

  ! shift/reduce conflict for DEF resolved as shift
    DEF             shift and go to state 7
    $end            reduce using rule 74 (empty -> .)
    ALTER           reduce using rule 74 (empty -> .)
    CALL            reduce using rule 74 (empty -> .)
    ISTRUE          reduce using rule 74 (empty -> .)
    IF              reduce using rule 74 (empty -> .)
    WHILE           reduce using rule 74 (empty -> .)
    PROC            reduce using rule 74 (empty -> .)
    MOVER           reduce using rule 74 (empty -> .)
    COMMENT         reduce using rule 74 (empty -> .)
    ID              reduce using rule 74 (empty -> .)
    NOT             reduce using rule 74 (empty -> .)
    ALEATORIO       reduce using rule 74 (empty -> .)
    REPEAT          reduce using rule 74 (empty -> .)
    BREAK           reduce using rule 74 (empty -> .)
    UNTIL           reduce using rule 74 (empty -> .)
    CASE            reduce using rule 74 (empty -> .)
    PRINT           reduce using rule 74 (empty -> .)
    PRINCIPAL       reduce using rule 74 (empty -> .)
    RPARENT         reduce using rule 74 (empty -> .)
    SEMICOLOM       reduce using rule 74 (empty -> .)
    ELSE            reduce using rule 74 (empty -> .)

  ! DEF             [ reduce using rule 74 (empty -> .) ]

    varDecl                        shift and go to state 4
    empty                          shift and go to state 5
    block                          shift and go to state 200

state 189

    (7) varDecl -> DEF LPARENT ID COMMA DATATYPE COMMA expression . RPARENT SEMICOLOM block
    (58) expression -> expression . addingOperator term
    (59) addingOperator -> . PLUS
    (60) addingOperator -> . MINUS

    RPARENT         shift and go to state 201
    PLUS            shift and go to state 37
    MINUS           shift and go to state 39

    addingOperator                 shift and go to state 67

state 190

    (6) varDecl -> DEF LPARENT ID COMMA DATATYPE RPARENT SEMICOLOM . block
    (2) block -> . varDecl statement principal
    (6) varDecl -> . DEF LPARENT ID COMMA DATATYPE RPARENT SEMICOLOM block
    (7) varDecl -> . DEF LPARENT ID COMMA DATATYPE COMMA expression RPARENT SEMICOLOM block
    (8) varDecl -> . empty
    (74) empty -> .

  ! shift/reduce conflict for DEF resolved as shift
    DEF             shift and go to state 7
    $end            reduce using rule 74 (empty -> .)
    ALTER           reduce using rule 74 (empty -> .)
    CALL            reduce using rule 74 (empty -> .)
    ISTRUE          reduce using rule 74 (empty -> .)
    IF              reduce using rule 74 (empty -> .)
    WHILE           reduce using rule 74 (empty -> .)
    PROC            reduce using rule 74 (empty -> .)
    MOVER           reduce using rule 74 (empty -> .)
    COMMENT         reduce using rule 74 (empty -> .)
    ID              reduce using rule 74 (empty -> .)
    NOT             reduce using rule 74 (empty -> .)
    ALEATORIO       reduce using rule 74 (empty -> .)
    REPEAT          reduce using rule 74 (empty -> .)
    BREAK           reduce using rule 74 (empty -> .)
    UNTIL           reduce using rule 74 (empty -> .)
    CASE            reduce using rule 74 (empty -> .)
    PRINT           reduce using rule 74 (empty -> .)
    PRINCIPAL       reduce using rule 74 (empty -> .)
    RPARENT         reduce using rule 74 (empty -> .)
    SEMICOLOM       reduce using rule 74 (empty -> .)
    ELSE            reduce using rule 74 (empty -> .)

  ! DEF             [ reduce using rule 74 (empty -> .) ]

    varDecl                        shift and go to state 4
    empty                          shift and go to state 5
    block                          shift and go to state 202

state 191

    (15) statement -> WHILE condition LPARENT statement RPARENT SEMICOLOM block .

    PRINCIPAL       reduce using rule 15 (statement -> WHILE condition LPARENT statement RPARENT SEMICOLOM block .)
    $end            reduce using rule 15 (statement -> WHILE condition LPARENT statement RPARENT SEMICOLOM block .)
    RPARENT         reduce using rule 15 (statement -> WHILE condition LPARENT statement RPARENT SEMICOLOM block .)
    ALTER           reduce using rule 15 (statement -> WHILE condition LPARENT statement RPARENT SEMICOLOM block .)
    CALL            reduce using rule 15 (statement -> WHILE condition LPARENT statement RPARENT SEMICOLOM block .)
    ISTRUE          reduce using rule 15 (statement -> WHILE condition LPARENT statement RPARENT SEMICOLOM block .)
    IF              reduce using rule 15 (statement -> WHILE condition LPARENT statement RPARENT SEMICOLOM block .)
    WHILE           reduce using rule 15 (statement -> WHILE condition LPARENT statement RPARENT SEMICOLOM block .)
    PROC            reduce using rule 15 (statement -> WHILE condition LPARENT statement RPARENT SEMICOLOM block .)
    MOVER           reduce using rule 15 (statement -> WHILE condition LPARENT statement RPARENT SEMICOLOM block .)
    COMMENT         reduce using rule 15 (statement -> WHILE condition LPARENT statement RPARENT SEMICOLOM block .)
    ID              reduce using rule 15 (statement -> WHILE condition LPARENT statement RPARENT SEMICOLOM block .)
    NOT             reduce using rule 15 (statement -> WHILE condition LPARENT statement RPARENT SEMICOLOM block .)
    ALEATORIO       reduce using rule 15 (statement -> WHILE condition LPARENT statement RPARENT SEMICOLOM block .)
    REPEAT          reduce using rule 15 (statement -> WHILE condition LPARENT statement RPARENT SEMICOLOM block .)
    BREAK           reduce using rule 15 (statement -> WHILE condition LPARENT statement RPARENT SEMICOLOM block .)
    UNTIL           reduce using rule 15 (statement -> WHILE condition LPARENT statement RPARENT SEMICOLOM block .)
    CASE            reduce using rule 15 (statement -> WHILE condition LPARENT statement RPARENT SEMICOLOM block .)
    PRINT           reduce using rule 15 (statement -> WHILE condition LPARENT statement RPARENT SEMICOLOM block .)
    DEF             reduce using rule 15 (statement -> WHILE condition LPARENT statement RPARENT SEMICOLOM block .)


state 192

    (11) statement -> ALTER LPARENT ID COMMA expression RPARENT SEMICOLOM . block
    (2) block -> . varDecl statement principal
    (6) varDecl -> . DEF LPARENT ID COMMA DATATYPE RPARENT SEMICOLOM block
    (7) varDecl -> . DEF LPARENT ID COMMA DATATYPE COMMA expression RPARENT SEMICOLOM block
    (8) varDecl -> . empty
    (74) empty -> .

  ! shift/reduce conflict for DEF resolved as shift
    DEF             shift and go to state 7
    $end            reduce using rule 74 (empty -> .)
    ALTER           reduce using rule 74 (empty -> .)
    CALL            reduce using rule 74 (empty -> .)
    ISTRUE          reduce using rule 74 (empty -> .)
    IF              reduce using rule 74 (empty -> .)
    WHILE           reduce using rule 74 (empty -> .)
    PROC            reduce using rule 74 (empty -> .)
    MOVER           reduce using rule 74 (empty -> .)
    COMMENT         reduce using rule 74 (empty -> .)
    ID              reduce using rule 74 (empty -> .)
    NOT             reduce using rule 74 (empty -> .)
    ALEATORIO       reduce using rule 74 (empty -> .)
    REPEAT          reduce using rule 74 (empty -> .)
    BREAK           reduce using rule 74 (empty -> .)
    UNTIL           reduce using rule 74 (empty -> .)
    CASE            reduce using rule 74 (empty -> .)
    PRINT           reduce using rule 74 (empty -> .)
    PRINCIPAL       reduce using rule 74 (empty -> .)
    RPARENT         reduce using rule 74 (empty -> .)
    SEMICOLOM       reduce using rule 74 (empty -> .)
    ELSE            reduce using rule 74 (empty -> .)

  ! DEF             [ reduce using rule 74 (empty -> .) ]

    varDecl                        shift and go to state 4
    empty                          shift and go to state 5
    block                          shift and go to state 203

state 193

    (30) statement -> CASE WHEN LPARENT condition RPARENT THEN LPARENT . block RPARENT SEMICOLOM block
    (31) statement -> CASE WHEN LPARENT condition RPARENT THEN LPARENT . block RPARENT ELSE LPARENT block RPARENT SEMICOLOM block
    (2) block -> . varDecl statement principal
    (6) varDecl -> . DEF LPARENT ID COMMA DATATYPE RPARENT SEMICOLOM block
    (7) varDecl -> . DEF LPARENT ID COMMA DATATYPE COMMA expression RPARENT SEMICOLOM block
    (8) varDecl -> . empty
    (74) empty -> .

  ! shift/reduce conflict for DEF resolved as shift
    DEF             shift and go to state 7
    $end            reduce using rule 74 (empty -> .)
    ALTER           reduce using rule 74 (empty -> .)
    CALL            reduce using rule 74 (empty -> .)
    ISTRUE          reduce using rule 74 (empty -> .)
    IF              reduce using rule 74 (empty -> .)
    WHILE           reduce using rule 74 (empty -> .)
    PROC            reduce using rule 74 (empty -> .)
    MOVER           reduce using rule 74 (empty -> .)
    COMMENT         reduce using rule 74 (empty -> .)
    ID              reduce using rule 74 (empty -> .)
    NOT             reduce using rule 74 (empty -> .)
    ALEATORIO       reduce using rule 74 (empty -> .)
    REPEAT          reduce using rule 74 (empty -> .)
    BREAK           reduce using rule 74 (empty -> .)
    UNTIL           reduce using rule 74 (empty -> .)
    CASE            reduce using rule 74 (empty -> .)
    PRINT           reduce using rule 74 (empty -> .)
    PRINCIPAL       reduce using rule 74 (empty -> .)
    RPARENT         reduce using rule 74 (empty -> .)
    SEMICOLOM       reduce using rule 74 (empty -> .)
    ELSE            reduce using rule 74 (empty -> .)

  ! DEF             [ reduce using rule 74 (empty -> .) ]

    varDecl                        shift and go to state 4
    empty                          shift and go to state 5
    block                          shift and go to state 204

state 194

    (35) whenloop -> WHEN condition THEN LPARENT block . RPARENT whenloop

    RPARENT         shift and go to state 205


state 195

    (33) statement -> CASE ID whenloop ELSE LPARENT block RPARENT . SEMICOLOM block

    SEMICOLOM       shift and go to state 206


state 196

    (29) statement -> UNTIL LPARENT block RPARENT condition SEMICOLOM block .

    PRINCIPAL       reduce using rule 29 (statement -> UNTIL LPARENT block RPARENT condition SEMICOLOM block .)
    $end            reduce using rule 29 (statement -> UNTIL LPARENT block RPARENT condition SEMICOLOM block .)
    RPARENT         reduce using rule 29 (statement -> UNTIL LPARENT block RPARENT condition SEMICOLOM block .)
    ALTER           reduce using rule 29 (statement -> UNTIL LPARENT block RPARENT condition SEMICOLOM block .)
    CALL            reduce using rule 29 (statement -> UNTIL LPARENT block RPARENT condition SEMICOLOM block .)
    ISTRUE          reduce using rule 29 (statement -> UNTIL LPARENT block RPARENT condition SEMICOLOM block .)
    IF              reduce using rule 29 (statement -> UNTIL LPARENT block RPARENT condition SEMICOLOM block .)
    WHILE           reduce using rule 29 (statement -> UNTIL LPARENT block RPARENT condition SEMICOLOM block .)
    PROC            reduce using rule 29 (statement -> UNTIL LPARENT block RPARENT condition SEMICOLOM block .)
    MOVER           reduce using rule 29 (statement -> UNTIL LPARENT block RPARENT condition SEMICOLOM block .)
    COMMENT         reduce using rule 29 (statement -> UNTIL LPARENT block RPARENT condition SEMICOLOM block .)
    ID              reduce using rule 29 (statement -> UNTIL LPARENT block RPARENT condition SEMICOLOM block .)
    NOT             reduce using rule 29 (statement -> UNTIL LPARENT block RPARENT condition SEMICOLOM block .)
    ALEATORIO       reduce using rule 29 (statement -> UNTIL LPARENT block RPARENT condition SEMICOLOM block .)
    REPEAT          reduce using rule 29 (statement -> UNTIL LPARENT block RPARENT condition SEMICOLOM block .)
    BREAK           reduce using rule 29 (statement -> UNTIL LPARENT block RPARENT condition SEMICOLOM block .)
    UNTIL           reduce using rule 29 (statement -> UNTIL LPARENT block RPARENT condition SEMICOLOM block .)
    CASE            reduce using rule 29 (statement -> UNTIL LPARENT block RPARENT condition SEMICOLOM block .)
    PRINT           reduce using rule 29 (statement -> UNTIL LPARENT block RPARENT condition SEMICOLOM block .)
    DEF             reduce using rule 29 (statement -> UNTIL LPARENT block RPARENT condition SEMICOLOM block .)


state 197

    (4) principal -> PRINCIPAL LPARENT statement RPARENT SEMICOLOM block .

    $end            reduce using rule 4 (principal -> PRINCIPAL LPARENT statement RPARENT SEMICOLOM block .)
    ALTER           reduce using rule 4 (principal -> PRINCIPAL LPARENT statement RPARENT SEMICOLOM block .)
    CALL            reduce using rule 4 (principal -> PRINCIPAL LPARENT statement RPARENT SEMICOLOM block .)
    ISTRUE          reduce using rule 4 (principal -> PRINCIPAL LPARENT statement RPARENT SEMICOLOM block .)
    IF              reduce using rule 4 (principal -> PRINCIPAL LPARENT statement RPARENT SEMICOLOM block .)
    WHILE           reduce using rule 4 (principal -> PRINCIPAL LPARENT statement RPARENT SEMICOLOM block .)
    PROC            reduce using rule 4 (principal -> PRINCIPAL LPARENT statement RPARENT SEMICOLOM block .)
    MOVER           reduce using rule 4 (principal -> PRINCIPAL LPARENT statement RPARENT SEMICOLOM block .)
    COMMENT         reduce using rule 4 (principal -> PRINCIPAL LPARENT statement RPARENT SEMICOLOM block .)
    ID              reduce using rule 4 (principal -> PRINCIPAL LPARENT statement RPARENT SEMICOLOM block .)
    NOT             reduce using rule 4 (principal -> PRINCIPAL LPARENT statement RPARENT SEMICOLOM block .)
    ALEATORIO       reduce using rule 4 (principal -> PRINCIPAL LPARENT statement RPARENT SEMICOLOM block .)
    REPEAT          reduce using rule 4 (principal -> PRINCIPAL LPARENT statement RPARENT SEMICOLOM block .)
    BREAK           reduce using rule 4 (principal -> PRINCIPAL LPARENT statement RPARENT SEMICOLOM block .)
    UNTIL           reduce using rule 4 (principal -> PRINCIPAL LPARENT statement RPARENT SEMICOLOM block .)
    CASE            reduce using rule 4 (principal -> PRINCIPAL LPARENT statement RPARENT SEMICOLOM block .)
    PRINT           reduce using rule 4 (principal -> PRINCIPAL LPARENT statement RPARENT SEMICOLOM block .)
    DEF             reduce using rule 4 (principal -> PRINCIPAL LPARENT statement RPARENT SEMICOLOM block .)
    PRINCIPAL       reduce using rule 4 (principal -> PRINCIPAL LPARENT statement RPARENT SEMICOLOM block .)
    RPARENT         reduce using rule 4 (principal -> PRINCIPAL LPARENT statement RPARENT SEMICOLOM block .)


state 198

    (3) principal -> PRINCIPAL LPARENT varDecl RPARENT SEMICOLOM block .

    $end            reduce using rule 3 (principal -> PRINCIPAL LPARENT varDecl RPARENT SEMICOLOM block .)
    ALTER           reduce using rule 3 (principal -> PRINCIPAL LPARENT varDecl RPARENT SEMICOLOM block .)
    CALL            reduce using rule 3 (principal -> PRINCIPAL LPARENT varDecl RPARENT SEMICOLOM block .)
    ISTRUE          reduce using rule 3 (principal -> PRINCIPAL LPARENT varDecl RPARENT SEMICOLOM block .)
    IF              reduce using rule 3 (principal -> PRINCIPAL LPARENT varDecl RPARENT SEMICOLOM block .)
    WHILE           reduce using rule 3 (principal -> PRINCIPAL LPARENT varDecl RPARENT SEMICOLOM block .)
    PROC            reduce using rule 3 (principal -> PRINCIPAL LPARENT varDecl RPARENT SEMICOLOM block .)
    MOVER           reduce using rule 3 (principal -> PRINCIPAL LPARENT varDecl RPARENT SEMICOLOM block .)
    COMMENT         reduce using rule 3 (principal -> PRINCIPAL LPARENT varDecl RPARENT SEMICOLOM block .)
    ID              reduce using rule 3 (principal -> PRINCIPAL LPARENT varDecl RPARENT SEMICOLOM block .)
    NOT             reduce using rule 3 (principal -> PRINCIPAL LPARENT varDecl RPARENT SEMICOLOM block .)
    ALEATORIO       reduce using rule 3 (principal -> PRINCIPAL LPARENT varDecl RPARENT SEMICOLOM block .)
    REPEAT          reduce using rule 3 (principal -> PRINCIPAL LPARENT varDecl RPARENT SEMICOLOM block .)
    BREAK           reduce using rule 3 (principal -> PRINCIPAL LPARENT varDecl RPARENT SEMICOLOM block .)
    UNTIL           reduce using rule 3 (principal -> PRINCIPAL LPARENT varDecl RPARENT SEMICOLOM block .)
    CASE            reduce using rule 3 (principal -> PRINCIPAL LPARENT varDecl RPARENT SEMICOLOM block .)
    PRINT           reduce using rule 3 (principal -> PRINCIPAL LPARENT varDecl RPARENT SEMICOLOM block .)
    DEF             reduce using rule 3 (principal -> PRINCIPAL LPARENT varDecl RPARENT SEMICOLOM block .)
    PRINCIPAL       reduce using rule 3 (principal -> PRINCIPAL LPARENT varDecl RPARENT SEMICOLOM block .)
    RPARENT         reduce using rule 3 (principal -> PRINCIPAL LPARENT varDecl RPARENT SEMICOLOM block .)


state 199

    (17) statement -> PROC ID LPARENT statement RPARENT SEMICOLOM block .

    PRINCIPAL       reduce using rule 17 (statement -> PROC ID LPARENT statement RPARENT SEMICOLOM block .)
    $end            reduce using rule 17 (statement -> PROC ID LPARENT statement RPARENT SEMICOLOM block .)
    RPARENT         reduce using rule 17 (statement -> PROC ID LPARENT statement RPARENT SEMICOLOM block .)
    ALTER           reduce using rule 17 (statement -> PROC ID LPARENT statement RPARENT SEMICOLOM block .)
    CALL            reduce using rule 17 (statement -> PROC ID LPARENT statement RPARENT SEMICOLOM block .)
    ISTRUE          reduce using rule 17 (statement -> PROC ID LPARENT statement RPARENT SEMICOLOM block .)
    IF              reduce using rule 17 (statement -> PROC ID LPARENT statement RPARENT SEMICOLOM block .)
    WHILE           reduce using rule 17 (statement -> PROC ID LPARENT statement RPARENT SEMICOLOM block .)
    PROC            reduce using rule 17 (statement -> PROC ID LPARENT statement RPARENT SEMICOLOM block .)
    MOVER           reduce using rule 17 (statement -> PROC ID LPARENT statement RPARENT SEMICOLOM block .)
    COMMENT         reduce using rule 17 (statement -> PROC ID LPARENT statement RPARENT SEMICOLOM block .)
    ID              reduce using rule 17 (statement -> PROC ID LPARENT statement RPARENT SEMICOLOM block .)
    NOT             reduce using rule 17 (statement -> PROC ID LPARENT statement RPARENT SEMICOLOM block .)
    ALEATORIO       reduce using rule 17 (statement -> PROC ID LPARENT statement RPARENT SEMICOLOM block .)
    REPEAT          reduce using rule 17 (statement -> PROC ID LPARENT statement RPARENT SEMICOLOM block .)
    BREAK           reduce using rule 17 (statement -> PROC ID LPARENT statement RPARENT SEMICOLOM block .)
    UNTIL           reduce using rule 17 (statement -> PROC ID LPARENT statement RPARENT SEMICOLOM block .)
    CASE            reduce using rule 17 (statement -> PROC ID LPARENT statement RPARENT SEMICOLOM block .)
    PRINT           reduce using rule 17 (statement -> PROC ID LPARENT statement RPARENT SEMICOLOM block .)
    DEF             reduce using rule 17 (statement -> PROC ID LPARENT statement RPARENT SEMICOLOM block .)


state 200

    (16) statement -> PROC ID LPARENT varDecl RPARENT SEMICOLOM block .

    PRINCIPAL       reduce using rule 16 (statement -> PROC ID LPARENT varDecl RPARENT SEMICOLOM block .)
    $end            reduce using rule 16 (statement -> PROC ID LPARENT varDecl RPARENT SEMICOLOM block .)
    RPARENT         reduce using rule 16 (statement -> PROC ID LPARENT varDecl RPARENT SEMICOLOM block .)
    ALTER           reduce using rule 16 (statement -> PROC ID LPARENT varDecl RPARENT SEMICOLOM block .)
    CALL            reduce using rule 16 (statement -> PROC ID LPARENT varDecl RPARENT SEMICOLOM block .)
    ISTRUE          reduce using rule 16 (statement -> PROC ID LPARENT varDecl RPARENT SEMICOLOM block .)
    IF              reduce using rule 16 (statement -> PROC ID LPARENT varDecl RPARENT SEMICOLOM block .)
    WHILE           reduce using rule 16 (statement -> PROC ID LPARENT varDecl RPARENT SEMICOLOM block .)
    PROC            reduce using rule 16 (statement -> PROC ID LPARENT varDecl RPARENT SEMICOLOM block .)
    MOVER           reduce using rule 16 (statement -> PROC ID LPARENT varDecl RPARENT SEMICOLOM block .)
    COMMENT         reduce using rule 16 (statement -> PROC ID LPARENT varDecl RPARENT SEMICOLOM block .)
    ID              reduce using rule 16 (statement -> PROC ID LPARENT varDecl RPARENT SEMICOLOM block .)
    NOT             reduce using rule 16 (statement -> PROC ID LPARENT varDecl RPARENT SEMICOLOM block .)
    ALEATORIO       reduce using rule 16 (statement -> PROC ID LPARENT varDecl RPARENT SEMICOLOM block .)
    REPEAT          reduce using rule 16 (statement -> PROC ID LPARENT varDecl RPARENT SEMICOLOM block .)
    BREAK           reduce using rule 16 (statement -> PROC ID LPARENT varDecl RPARENT SEMICOLOM block .)
    UNTIL           reduce using rule 16 (statement -> PROC ID LPARENT varDecl RPARENT SEMICOLOM block .)
    CASE            reduce using rule 16 (statement -> PROC ID LPARENT varDecl RPARENT SEMICOLOM block .)
    PRINT           reduce using rule 16 (statement -> PROC ID LPARENT varDecl RPARENT SEMICOLOM block .)
    DEF             reduce using rule 16 (statement -> PROC ID LPARENT varDecl RPARENT SEMICOLOM block .)


state 201

    (7) varDecl -> DEF LPARENT ID COMMA DATATYPE COMMA expression RPARENT . SEMICOLOM block

    SEMICOLOM       shift and go to state 207


state 202

    (6) varDecl -> DEF LPARENT ID COMMA DATATYPE RPARENT SEMICOLOM block .

    ALTER           reduce using rule 6 (varDecl -> DEF LPARENT ID COMMA DATATYPE RPARENT SEMICOLOM block .)
    CALL            reduce using rule 6 (varDecl -> DEF LPARENT ID COMMA DATATYPE RPARENT SEMICOLOM block .)
    ISTRUE          reduce using rule 6 (varDecl -> DEF LPARENT ID COMMA DATATYPE RPARENT SEMICOLOM block .)
    IF              reduce using rule 6 (varDecl -> DEF LPARENT ID COMMA DATATYPE RPARENT SEMICOLOM block .)
    WHILE           reduce using rule 6 (varDecl -> DEF LPARENT ID COMMA DATATYPE RPARENT SEMICOLOM block .)
    PROC            reduce using rule 6 (varDecl -> DEF LPARENT ID COMMA DATATYPE RPARENT SEMICOLOM block .)
    MOVER           reduce using rule 6 (varDecl -> DEF LPARENT ID COMMA DATATYPE RPARENT SEMICOLOM block .)
    COMMENT         reduce using rule 6 (varDecl -> DEF LPARENT ID COMMA DATATYPE RPARENT SEMICOLOM block .)
    ID              reduce using rule 6 (varDecl -> DEF LPARENT ID COMMA DATATYPE RPARENT SEMICOLOM block .)
    NOT             reduce using rule 6 (varDecl -> DEF LPARENT ID COMMA DATATYPE RPARENT SEMICOLOM block .)
    ALEATORIO       reduce using rule 6 (varDecl -> DEF LPARENT ID COMMA DATATYPE RPARENT SEMICOLOM block .)
    REPEAT          reduce using rule 6 (varDecl -> DEF LPARENT ID COMMA DATATYPE RPARENT SEMICOLOM block .)
    BREAK           reduce using rule 6 (varDecl -> DEF LPARENT ID COMMA DATATYPE RPARENT SEMICOLOM block .)
    UNTIL           reduce using rule 6 (varDecl -> DEF LPARENT ID COMMA DATATYPE RPARENT SEMICOLOM block .)
    CASE            reduce using rule 6 (varDecl -> DEF LPARENT ID COMMA DATATYPE RPARENT SEMICOLOM block .)
    PRINT           reduce using rule 6 (varDecl -> DEF LPARENT ID COMMA DATATYPE RPARENT SEMICOLOM block .)
    DEF             reduce using rule 6 (varDecl -> DEF LPARENT ID COMMA DATATYPE RPARENT SEMICOLOM block .)
    PRINCIPAL       reduce using rule 6 (varDecl -> DEF LPARENT ID COMMA DATATYPE RPARENT SEMICOLOM block .)
    $end            reduce using rule 6 (varDecl -> DEF LPARENT ID COMMA DATATYPE RPARENT SEMICOLOM block .)
    RPARENT         reduce using rule 6 (varDecl -> DEF LPARENT ID COMMA DATATYPE RPARENT SEMICOLOM block .)


state 203

    (11) statement -> ALTER LPARENT ID COMMA expression RPARENT SEMICOLOM block .

    PRINCIPAL       reduce using rule 11 (statement -> ALTER LPARENT ID COMMA expression RPARENT SEMICOLOM block .)
    $end            reduce using rule 11 (statement -> ALTER LPARENT ID COMMA expression RPARENT SEMICOLOM block .)
    RPARENT         reduce using rule 11 (statement -> ALTER LPARENT ID COMMA expression RPARENT SEMICOLOM block .)
    ALTER           reduce using rule 11 (statement -> ALTER LPARENT ID COMMA expression RPARENT SEMICOLOM block .)
    CALL            reduce using rule 11 (statement -> ALTER LPARENT ID COMMA expression RPARENT SEMICOLOM block .)
    ISTRUE          reduce using rule 11 (statement -> ALTER LPARENT ID COMMA expression RPARENT SEMICOLOM block .)
    IF              reduce using rule 11 (statement -> ALTER LPARENT ID COMMA expression RPARENT SEMICOLOM block .)
    WHILE           reduce using rule 11 (statement -> ALTER LPARENT ID COMMA expression RPARENT SEMICOLOM block .)
    PROC            reduce using rule 11 (statement -> ALTER LPARENT ID COMMA expression RPARENT SEMICOLOM block .)
    MOVER           reduce using rule 11 (statement -> ALTER LPARENT ID COMMA expression RPARENT SEMICOLOM block .)
    COMMENT         reduce using rule 11 (statement -> ALTER LPARENT ID COMMA expression RPARENT SEMICOLOM block .)
    ID              reduce using rule 11 (statement -> ALTER LPARENT ID COMMA expression RPARENT SEMICOLOM block .)
    NOT             reduce using rule 11 (statement -> ALTER LPARENT ID COMMA expression RPARENT SEMICOLOM block .)
    ALEATORIO       reduce using rule 11 (statement -> ALTER LPARENT ID COMMA expression RPARENT SEMICOLOM block .)
    REPEAT          reduce using rule 11 (statement -> ALTER LPARENT ID COMMA expression RPARENT SEMICOLOM block .)
    BREAK           reduce using rule 11 (statement -> ALTER LPARENT ID COMMA expression RPARENT SEMICOLOM block .)
    UNTIL           reduce using rule 11 (statement -> ALTER LPARENT ID COMMA expression RPARENT SEMICOLOM block .)
    CASE            reduce using rule 11 (statement -> ALTER LPARENT ID COMMA expression RPARENT SEMICOLOM block .)
    PRINT           reduce using rule 11 (statement -> ALTER LPARENT ID COMMA expression RPARENT SEMICOLOM block .)
    DEF             reduce using rule 11 (statement -> ALTER LPARENT ID COMMA expression RPARENT SEMICOLOM block .)


state 204

    (30) statement -> CASE WHEN LPARENT condition RPARENT THEN LPARENT block . RPARENT SEMICOLOM block
    (31) statement -> CASE WHEN LPARENT condition RPARENT THEN LPARENT block . RPARENT ELSE LPARENT block RPARENT SEMICOLOM block

    RPARENT         shift and go to state 208


state 205

    (35) whenloop -> WHEN condition THEN LPARENT block RPARENT . whenloop
    (35) whenloop -> . WHEN condition THEN LPARENT block RPARENT whenloop
    (36) whenloop -> . empty
    (74) empty -> .

    WHEN            shift and go to state 81
    $end            reduce using rule 74 (empty -> .)
    ALTER           reduce using rule 74 (empty -> .)
    CALL            reduce using rule 74 (empty -> .)
    ISTRUE          reduce using rule 74 (empty -> .)
    IF              reduce using rule 74 (empty -> .)
    WHILE           reduce using rule 74 (empty -> .)
    PROC            reduce using rule 74 (empty -> .)
    MOVER           reduce using rule 74 (empty -> .)
    COMMENT         reduce using rule 74 (empty -> .)
    ID              reduce using rule 74 (empty -> .)
    NOT             reduce using rule 74 (empty -> .)
    ALEATORIO       reduce using rule 74 (empty -> .)
    REPEAT          reduce using rule 74 (empty -> .)
    BREAK           reduce using rule 74 (empty -> .)
    UNTIL           reduce using rule 74 (empty -> .)
    CASE            reduce using rule 74 (empty -> .)
    PRINT           reduce using rule 74 (empty -> .)
    DEF             reduce using rule 74 (empty -> .)
    PRINCIPAL       reduce using rule 74 (empty -> .)
    RPARENT         reduce using rule 74 (empty -> .)
    SEMICOLOM       reduce using rule 74 (empty -> .)
    ELSE            reduce using rule 74 (empty -> .)

    whenloop                       shift and go to state 209
    empty                          shift and go to state 82

state 206

    (33) statement -> CASE ID whenloop ELSE LPARENT block RPARENT SEMICOLOM . block
    (2) block -> . varDecl statement principal
    (6) varDecl -> . DEF LPARENT ID COMMA DATATYPE RPARENT SEMICOLOM block
    (7) varDecl -> . DEF LPARENT ID COMMA DATATYPE COMMA expression RPARENT SEMICOLOM block
    (8) varDecl -> . empty
    (74) empty -> .

  ! shift/reduce conflict for DEF resolved as shift
    DEF             shift and go to state 7
    $end            reduce using rule 74 (empty -> .)
    ALTER           reduce using rule 74 (empty -> .)
    CALL            reduce using rule 74 (empty -> .)
    ISTRUE          reduce using rule 74 (empty -> .)
    IF              reduce using rule 74 (empty -> .)
    WHILE           reduce using rule 74 (empty -> .)
    PROC            reduce using rule 74 (empty -> .)
    MOVER           reduce using rule 74 (empty -> .)
    COMMENT         reduce using rule 74 (empty -> .)
    ID              reduce using rule 74 (empty -> .)
    NOT             reduce using rule 74 (empty -> .)
    ALEATORIO       reduce using rule 74 (empty -> .)
    REPEAT          reduce using rule 74 (empty -> .)
    BREAK           reduce using rule 74 (empty -> .)
    UNTIL           reduce using rule 74 (empty -> .)
    CASE            reduce using rule 74 (empty -> .)
    PRINT           reduce using rule 74 (empty -> .)
    PRINCIPAL       reduce using rule 74 (empty -> .)
    RPARENT         reduce using rule 74 (empty -> .)
    SEMICOLOM       reduce using rule 74 (empty -> .)
    ELSE            reduce using rule 74 (empty -> .)

  ! DEF             [ reduce using rule 74 (empty -> .) ]

    varDecl                        shift and go to state 4
    empty                          shift and go to state 5
    block                          shift and go to state 210

state 207

    (7) varDecl -> DEF LPARENT ID COMMA DATATYPE COMMA expression RPARENT SEMICOLOM . block
    (2) block -> . varDecl statement principal
    (6) varDecl -> . DEF LPARENT ID COMMA DATATYPE RPARENT SEMICOLOM block
    (7) varDecl -> . DEF LPARENT ID COMMA DATATYPE COMMA expression RPARENT SEMICOLOM block
    (8) varDecl -> . empty
    (74) empty -> .

  ! shift/reduce conflict for DEF resolved as shift
    DEF             shift and go to state 7
    $end            reduce using rule 74 (empty -> .)
    ALTER           reduce using rule 74 (empty -> .)
    CALL            reduce using rule 74 (empty -> .)
    ISTRUE          reduce using rule 74 (empty -> .)
    IF              reduce using rule 74 (empty -> .)
    WHILE           reduce using rule 74 (empty -> .)
    PROC            reduce using rule 74 (empty -> .)
    MOVER           reduce using rule 74 (empty -> .)
    COMMENT         reduce using rule 74 (empty -> .)
    ID              reduce using rule 74 (empty -> .)
    NOT             reduce using rule 74 (empty -> .)
    ALEATORIO       reduce using rule 74 (empty -> .)
    REPEAT          reduce using rule 74 (empty -> .)
    BREAK           reduce using rule 74 (empty -> .)
    UNTIL           reduce using rule 74 (empty -> .)
    CASE            reduce using rule 74 (empty -> .)
    PRINT           reduce using rule 74 (empty -> .)
    PRINCIPAL       reduce using rule 74 (empty -> .)
    RPARENT         reduce using rule 74 (empty -> .)
    SEMICOLOM       reduce using rule 74 (empty -> .)
    ELSE            reduce using rule 74 (empty -> .)

  ! DEF             [ reduce using rule 74 (empty -> .) ]

    varDecl                        shift and go to state 4
    empty                          shift and go to state 5
    block                          shift and go to state 211

state 208

    (30) statement -> CASE WHEN LPARENT condition RPARENT THEN LPARENT block RPARENT . SEMICOLOM block
    (31) statement -> CASE WHEN LPARENT condition RPARENT THEN LPARENT block RPARENT . ELSE LPARENT block RPARENT SEMICOLOM block

    SEMICOLOM       shift and go to state 212
    ELSE            shift and go to state 213


state 209

    (35) whenloop -> WHEN condition THEN LPARENT block RPARENT whenloop .

    SEMICOLOM       reduce using rule 35 (whenloop -> WHEN condition THEN LPARENT block RPARENT whenloop .)
    ELSE            reduce using rule 35 (whenloop -> WHEN condition THEN LPARENT block RPARENT whenloop .)


state 210

    (33) statement -> CASE ID whenloop ELSE LPARENT block RPARENT SEMICOLOM block .

    PRINCIPAL       reduce using rule 33 (statement -> CASE ID whenloop ELSE LPARENT block RPARENT SEMICOLOM block .)
    $end            reduce using rule 33 (statement -> CASE ID whenloop ELSE LPARENT block RPARENT SEMICOLOM block .)
    RPARENT         reduce using rule 33 (statement -> CASE ID whenloop ELSE LPARENT block RPARENT SEMICOLOM block .)
    ALTER           reduce using rule 33 (statement -> CASE ID whenloop ELSE LPARENT block RPARENT SEMICOLOM block .)
    CALL            reduce using rule 33 (statement -> CASE ID whenloop ELSE LPARENT block RPARENT SEMICOLOM block .)
    ISTRUE          reduce using rule 33 (statement -> CASE ID whenloop ELSE LPARENT block RPARENT SEMICOLOM block .)
    IF              reduce using rule 33 (statement -> CASE ID whenloop ELSE LPARENT block RPARENT SEMICOLOM block .)
    WHILE           reduce using rule 33 (statement -> CASE ID whenloop ELSE LPARENT block RPARENT SEMICOLOM block .)
    PROC            reduce using rule 33 (statement -> CASE ID whenloop ELSE LPARENT block RPARENT SEMICOLOM block .)
    MOVER           reduce using rule 33 (statement -> CASE ID whenloop ELSE LPARENT block RPARENT SEMICOLOM block .)
    COMMENT         reduce using rule 33 (statement -> CASE ID whenloop ELSE LPARENT block RPARENT SEMICOLOM block .)
    ID              reduce using rule 33 (statement -> CASE ID whenloop ELSE LPARENT block RPARENT SEMICOLOM block .)
    NOT             reduce using rule 33 (statement -> CASE ID whenloop ELSE LPARENT block RPARENT SEMICOLOM block .)
    ALEATORIO       reduce using rule 33 (statement -> CASE ID whenloop ELSE LPARENT block RPARENT SEMICOLOM block .)
    REPEAT          reduce using rule 33 (statement -> CASE ID whenloop ELSE LPARENT block RPARENT SEMICOLOM block .)
    BREAK           reduce using rule 33 (statement -> CASE ID whenloop ELSE LPARENT block RPARENT SEMICOLOM block .)
    UNTIL           reduce using rule 33 (statement -> CASE ID whenloop ELSE LPARENT block RPARENT SEMICOLOM block .)
    CASE            reduce using rule 33 (statement -> CASE ID whenloop ELSE LPARENT block RPARENT SEMICOLOM block .)
    PRINT           reduce using rule 33 (statement -> CASE ID whenloop ELSE LPARENT block RPARENT SEMICOLOM block .)
    DEF             reduce using rule 33 (statement -> CASE ID whenloop ELSE LPARENT block RPARENT SEMICOLOM block .)


state 211

    (7) varDecl -> DEF LPARENT ID COMMA DATATYPE COMMA expression RPARENT SEMICOLOM block .

    ALTER           reduce using rule 7 (varDecl -> DEF LPARENT ID COMMA DATATYPE COMMA expression RPARENT SEMICOLOM block .)
    CALL            reduce using rule 7 (varDecl -> DEF LPARENT ID COMMA DATATYPE COMMA expression RPARENT SEMICOLOM block .)
    ISTRUE          reduce using rule 7 (varDecl -> DEF LPARENT ID COMMA DATATYPE COMMA expression RPARENT SEMICOLOM block .)
    IF              reduce using rule 7 (varDecl -> DEF LPARENT ID COMMA DATATYPE COMMA expression RPARENT SEMICOLOM block .)
    WHILE           reduce using rule 7 (varDecl -> DEF LPARENT ID COMMA DATATYPE COMMA expression RPARENT SEMICOLOM block .)
    PROC            reduce using rule 7 (varDecl -> DEF LPARENT ID COMMA DATATYPE COMMA expression RPARENT SEMICOLOM block .)
    MOVER           reduce using rule 7 (varDecl -> DEF LPARENT ID COMMA DATATYPE COMMA expression RPARENT SEMICOLOM block .)
    COMMENT         reduce using rule 7 (varDecl -> DEF LPARENT ID COMMA DATATYPE COMMA expression RPARENT SEMICOLOM block .)
    ID              reduce using rule 7 (varDecl -> DEF LPARENT ID COMMA DATATYPE COMMA expression RPARENT SEMICOLOM block .)
    NOT             reduce using rule 7 (varDecl -> DEF LPARENT ID COMMA DATATYPE COMMA expression RPARENT SEMICOLOM block .)
    ALEATORIO       reduce using rule 7 (varDecl -> DEF LPARENT ID COMMA DATATYPE COMMA expression RPARENT SEMICOLOM block .)
    REPEAT          reduce using rule 7 (varDecl -> DEF LPARENT ID COMMA DATATYPE COMMA expression RPARENT SEMICOLOM block .)
    BREAK           reduce using rule 7 (varDecl -> DEF LPARENT ID COMMA DATATYPE COMMA expression RPARENT SEMICOLOM block .)
    UNTIL           reduce using rule 7 (varDecl -> DEF LPARENT ID COMMA DATATYPE COMMA expression RPARENT SEMICOLOM block .)
    CASE            reduce using rule 7 (varDecl -> DEF LPARENT ID COMMA DATATYPE COMMA expression RPARENT SEMICOLOM block .)
    PRINT           reduce using rule 7 (varDecl -> DEF LPARENT ID COMMA DATATYPE COMMA expression RPARENT SEMICOLOM block .)
    DEF             reduce using rule 7 (varDecl -> DEF LPARENT ID COMMA DATATYPE COMMA expression RPARENT SEMICOLOM block .)
    PRINCIPAL       reduce using rule 7 (varDecl -> DEF LPARENT ID COMMA DATATYPE COMMA expression RPARENT SEMICOLOM block .)
    $end            reduce using rule 7 (varDecl -> DEF LPARENT ID COMMA DATATYPE COMMA expression RPARENT SEMICOLOM block .)
    RPARENT         reduce using rule 7 (varDecl -> DEF LPARENT ID COMMA DATATYPE COMMA expression RPARENT SEMICOLOM block .)


state 212

    (30) statement -> CASE WHEN LPARENT condition RPARENT THEN LPARENT block RPARENT SEMICOLOM . block
    (2) block -> . varDecl statement principal
    (6) varDecl -> . DEF LPARENT ID COMMA DATATYPE RPARENT SEMICOLOM block
    (7) varDecl -> . DEF LPARENT ID COMMA DATATYPE COMMA expression RPARENT SEMICOLOM block
    (8) varDecl -> . empty
    (74) empty -> .

  ! shift/reduce conflict for DEF resolved as shift
    DEF             shift and go to state 7
    $end            reduce using rule 74 (empty -> .)
    ALTER           reduce using rule 74 (empty -> .)
    CALL            reduce using rule 74 (empty -> .)
    ISTRUE          reduce using rule 74 (empty -> .)
    IF              reduce using rule 74 (empty -> .)
    WHILE           reduce using rule 74 (empty -> .)
    PROC            reduce using rule 74 (empty -> .)
    MOVER           reduce using rule 74 (empty -> .)
    COMMENT         reduce using rule 74 (empty -> .)
    ID              reduce using rule 74 (empty -> .)
    NOT             reduce using rule 74 (empty -> .)
    ALEATORIO       reduce using rule 74 (empty -> .)
    REPEAT          reduce using rule 74 (empty -> .)
    BREAK           reduce using rule 74 (empty -> .)
    UNTIL           reduce using rule 74 (empty -> .)
    CASE            reduce using rule 74 (empty -> .)
    PRINT           reduce using rule 74 (empty -> .)
    PRINCIPAL       reduce using rule 74 (empty -> .)
    RPARENT         reduce using rule 74 (empty -> .)
    SEMICOLOM       reduce using rule 74 (empty -> .)
    ELSE            reduce using rule 74 (empty -> .)

  ! DEF             [ reduce using rule 74 (empty -> .) ]

    varDecl                        shift and go to state 4
    empty                          shift and go to state 5
    block                          shift and go to state 214

state 213

    (31) statement -> CASE WHEN LPARENT condition RPARENT THEN LPARENT block RPARENT ELSE . LPARENT block RPARENT SEMICOLOM block

    LPARENT         shift and go to state 215


state 214

    (30) statement -> CASE WHEN LPARENT condition RPARENT THEN LPARENT block RPARENT SEMICOLOM block .

    PRINCIPAL       reduce using rule 30 (statement -> CASE WHEN LPARENT condition RPARENT THEN LPARENT block RPARENT SEMICOLOM block .)
    $end            reduce using rule 30 (statement -> CASE WHEN LPARENT condition RPARENT THEN LPARENT block RPARENT SEMICOLOM block .)
    RPARENT         reduce using rule 30 (statement -> CASE WHEN LPARENT condition RPARENT THEN LPARENT block RPARENT SEMICOLOM block .)
    ALTER           reduce using rule 30 (statement -> CASE WHEN LPARENT condition RPARENT THEN LPARENT block RPARENT SEMICOLOM block .)
    CALL            reduce using rule 30 (statement -> CASE WHEN LPARENT condition RPARENT THEN LPARENT block RPARENT SEMICOLOM block .)
    ISTRUE          reduce using rule 30 (statement -> CASE WHEN LPARENT condition RPARENT THEN LPARENT block RPARENT SEMICOLOM block .)
    IF              reduce using rule 30 (statement -> CASE WHEN LPARENT condition RPARENT THEN LPARENT block RPARENT SEMICOLOM block .)
    WHILE           reduce using rule 30 (statement -> CASE WHEN LPARENT condition RPARENT THEN LPARENT block RPARENT SEMICOLOM block .)
    PROC            reduce using rule 30 (statement -> CASE WHEN LPARENT condition RPARENT THEN LPARENT block RPARENT SEMICOLOM block .)
    MOVER           reduce using rule 30 (statement -> CASE WHEN LPARENT condition RPARENT THEN LPARENT block RPARENT SEMICOLOM block .)
    COMMENT         reduce using rule 30 (statement -> CASE WHEN LPARENT condition RPARENT THEN LPARENT block RPARENT SEMICOLOM block .)
    ID              reduce using rule 30 (statement -> CASE WHEN LPARENT condition RPARENT THEN LPARENT block RPARENT SEMICOLOM block .)
    NOT             reduce using rule 30 (statement -> CASE WHEN LPARENT condition RPARENT THEN LPARENT block RPARENT SEMICOLOM block .)
    ALEATORIO       reduce using rule 30 (statement -> CASE WHEN LPARENT condition RPARENT THEN LPARENT block RPARENT SEMICOLOM block .)
    REPEAT          reduce using rule 30 (statement -> CASE WHEN LPARENT condition RPARENT THEN LPARENT block RPARENT SEMICOLOM block .)
    BREAK           reduce using rule 30 (statement -> CASE WHEN LPARENT condition RPARENT THEN LPARENT block RPARENT SEMICOLOM block .)
    UNTIL           reduce using rule 30 (statement -> CASE WHEN LPARENT condition RPARENT THEN LPARENT block RPARENT SEMICOLOM block .)
    CASE            reduce using rule 30 (statement -> CASE WHEN LPARENT condition RPARENT THEN LPARENT block RPARENT SEMICOLOM block .)
    PRINT           reduce using rule 30 (statement -> CASE WHEN LPARENT condition RPARENT THEN LPARENT block RPARENT SEMICOLOM block .)
    DEF             reduce using rule 30 (statement -> CASE WHEN LPARENT condition RPARENT THEN LPARENT block RPARENT SEMICOLOM block .)


state 215

    (31) statement -> CASE WHEN LPARENT condition RPARENT THEN LPARENT block RPARENT ELSE LPARENT . block RPARENT SEMICOLOM block
    (2) block -> . varDecl statement principal
    (6) varDecl -> . DEF LPARENT ID COMMA DATATYPE RPARENT SEMICOLOM block
    (7) varDecl -> . DEF LPARENT ID COMMA DATATYPE COMMA expression RPARENT SEMICOLOM block
    (8) varDecl -> . empty
    (74) empty -> .

  ! shift/reduce conflict for DEF resolved as shift
    DEF             shift and go to state 7
    $end            reduce using rule 74 (empty -> .)
    ALTER           reduce using rule 74 (empty -> .)
    CALL            reduce using rule 74 (empty -> .)
    ISTRUE          reduce using rule 74 (empty -> .)
    IF              reduce using rule 74 (empty -> .)
    WHILE           reduce using rule 74 (empty -> .)
    PROC            reduce using rule 74 (empty -> .)
    MOVER           reduce using rule 74 (empty -> .)
    COMMENT         reduce using rule 74 (empty -> .)
    ID              reduce using rule 74 (empty -> .)
    NOT             reduce using rule 74 (empty -> .)
    ALEATORIO       reduce using rule 74 (empty -> .)
    REPEAT          reduce using rule 74 (empty -> .)
    BREAK           reduce using rule 74 (empty -> .)
    UNTIL           reduce using rule 74 (empty -> .)
    CASE            reduce using rule 74 (empty -> .)
    PRINT           reduce using rule 74 (empty -> .)
    PRINCIPAL       reduce using rule 74 (empty -> .)
    RPARENT         reduce using rule 74 (empty -> .)
    SEMICOLOM       reduce using rule 74 (empty -> .)
    ELSE            reduce using rule 74 (empty -> .)

  ! DEF             [ reduce using rule 74 (empty -> .) ]

    varDecl                        shift and go to state 4
    empty                          shift and go to state 5
    block                          shift and go to state 216

state 216

    (31) statement -> CASE WHEN LPARENT condition RPARENT THEN LPARENT block RPARENT ELSE LPARENT block . RPARENT SEMICOLOM block

    RPARENT         shift and go to state 217


state 217

    (31) statement -> CASE WHEN LPARENT condition RPARENT THEN LPARENT block RPARENT ELSE LPARENT block RPARENT . SEMICOLOM block

    SEMICOLOM       shift and go to state 218


state 218

    (31) statement -> CASE WHEN LPARENT condition RPARENT THEN LPARENT block RPARENT ELSE LPARENT block RPARENT SEMICOLOM . block
    (2) block -> . varDecl statement principal
    (6) varDecl -> . DEF LPARENT ID COMMA DATATYPE RPARENT SEMICOLOM block
    (7) varDecl -> . DEF LPARENT ID COMMA DATATYPE COMMA expression RPARENT SEMICOLOM block
    (8) varDecl -> . empty
    (74) empty -> .

  ! shift/reduce conflict for DEF resolved as shift
    DEF             shift and go to state 7
    $end            reduce using rule 74 (empty -> .)
    ALTER           reduce using rule 74 (empty -> .)
    CALL            reduce using rule 74 (empty -> .)
    ISTRUE          reduce using rule 74 (empty -> .)
    IF              reduce using rule 74 (empty -> .)
    WHILE           reduce using rule 74 (empty -> .)
    PROC            reduce using rule 74 (empty -> .)
    MOVER           reduce using rule 74 (empty -> .)
    COMMENT         reduce using rule 74 (empty -> .)
    ID              reduce using rule 74 (empty -> .)
    NOT             reduce using rule 74 (empty -> .)
    ALEATORIO       reduce using rule 74 (empty -> .)
    REPEAT          reduce using rule 74 (empty -> .)
    BREAK           reduce using rule 74 (empty -> .)
    UNTIL           reduce using rule 74 (empty -> .)
    CASE            reduce using rule 74 (empty -> .)
    PRINT           reduce using rule 74 (empty -> .)
    PRINCIPAL       reduce using rule 74 (empty -> .)
    RPARENT         reduce using rule 74 (empty -> .)
    SEMICOLOM       reduce using rule 74 (empty -> .)
    ELSE            reduce using rule 74 (empty -> .)

  ! DEF             [ reduce using rule 74 (empty -> .) ]

    varDecl                        shift and go to state 4
    empty                          shift and go to state 5
    block                          shift and go to state 219

state 219

    (31) statement -> CASE WHEN LPARENT condition RPARENT THEN LPARENT block RPARENT ELSE LPARENT block RPARENT SEMICOLOM block .

    PRINCIPAL       reduce using rule 31 (statement -> CASE WHEN LPARENT condition RPARENT THEN LPARENT block RPARENT ELSE LPARENT block RPARENT SEMICOLOM block .)
    $end            reduce using rule 31 (statement -> CASE WHEN LPARENT condition RPARENT THEN LPARENT block RPARENT ELSE LPARENT block RPARENT SEMICOLOM block .)
    RPARENT         reduce using rule 31 (statement -> CASE WHEN LPARENT condition RPARENT THEN LPARENT block RPARENT ELSE LPARENT block RPARENT SEMICOLOM block .)
    ALTER           reduce using rule 31 (statement -> CASE WHEN LPARENT condition RPARENT THEN LPARENT block RPARENT ELSE LPARENT block RPARENT SEMICOLOM block .)
    CALL            reduce using rule 31 (statement -> CASE WHEN LPARENT condition RPARENT THEN LPARENT block RPARENT ELSE LPARENT block RPARENT SEMICOLOM block .)
    ISTRUE          reduce using rule 31 (statement -> CASE WHEN LPARENT condition RPARENT THEN LPARENT block RPARENT ELSE LPARENT block RPARENT SEMICOLOM block .)
    IF              reduce using rule 31 (statement -> CASE WHEN LPARENT condition RPARENT THEN LPARENT block RPARENT ELSE LPARENT block RPARENT SEMICOLOM block .)
    WHILE           reduce using rule 31 (statement -> CASE WHEN LPARENT condition RPARENT THEN LPARENT block RPARENT ELSE LPARENT block RPARENT SEMICOLOM block .)
    PROC            reduce using rule 31 (statement -> CASE WHEN LPARENT condition RPARENT THEN LPARENT block RPARENT ELSE LPARENT block RPARENT SEMICOLOM block .)
    MOVER           reduce using rule 31 (statement -> CASE WHEN LPARENT condition RPARENT THEN LPARENT block RPARENT ELSE LPARENT block RPARENT SEMICOLOM block .)
    COMMENT         reduce using rule 31 (statement -> CASE WHEN LPARENT condition RPARENT THEN LPARENT block RPARENT ELSE LPARENT block RPARENT SEMICOLOM block .)
    ID              reduce using rule 31 (statement -> CASE WHEN LPARENT condition RPARENT THEN LPARENT block RPARENT ELSE LPARENT block RPARENT SEMICOLOM block .)
    NOT             reduce using rule 31 (statement -> CASE WHEN LPARENT condition RPARENT THEN LPARENT block RPARENT ELSE LPARENT block RPARENT SEMICOLOM block .)
    ALEATORIO       reduce using rule 31 (statement -> CASE WHEN LPARENT condition RPARENT THEN LPARENT block RPARENT ELSE LPARENT block RPARENT SEMICOLOM block .)
    REPEAT          reduce using rule 31 (statement -> CASE WHEN LPARENT condition RPARENT THEN LPARENT block RPARENT ELSE LPARENT block RPARENT SEMICOLOM block .)
    BREAK           reduce using rule 31 (statement -> CASE WHEN LPARENT condition RPARENT THEN LPARENT block RPARENT ELSE LPARENT block RPARENT SEMICOLOM block .)
    UNTIL           reduce using rule 31 (statement -> CASE WHEN LPARENT condition RPARENT THEN LPARENT block RPARENT ELSE LPARENT block RPARENT SEMICOLOM block .)
    CASE            reduce using rule 31 (statement -> CASE WHEN LPARENT condition RPARENT THEN LPARENT block RPARENT ELSE LPARENT block RPARENT SEMICOLOM block .)
    PRINT           reduce using rule 31 (statement -> CASE WHEN LPARENT condition RPARENT THEN LPARENT block RPARENT ELSE LPARENT block RPARENT SEMICOLOM block .)
    DEF             reduce using rule 31 (statement -> CASE WHEN LPARENT condition RPARENT THEN LPARENT block RPARENT ELSE LPARENT block RPARENT SEMICOLOM block .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for DEF in state 3 resolved as shift
WARNING: shift/reduce conflict for ALTER in state 4 resolved as shift
WARNING: shift/reduce conflict for CALL in state 4 resolved as shift
WARNING: shift/reduce conflict for ISTRUE in state 4 resolved as shift
WARNING: shift/reduce conflict for IF in state 4 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 4 resolved as shift
WARNING: shift/reduce conflict for PROC in state 4 resolved as shift
WARNING: shift/reduce conflict for MOVER in state 4 resolved as shift
WARNING: shift/reduce conflict for COMMENT in state 4 resolved as shift
WARNING: shift/reduce conflict for ID in state 4 resolved as shift
WARNING: shift/reduce conflict for NOT in state 4 resolved as shift
WARNING: shift/reduce conflict for ALEATORIO in state 4 resolved as shift
WARNING: shift/reduce conflict for REPEAT in state 4 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 4 resolved as shift
WARNING: shift/reduce conflict for UNTIL in state 4 resolved as shift
WARNING: shift/reduce conflict for CASE in state 4 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 4 resolved as shift
WARNING: shift/reduce conflict for DEF in state 8 resolved as shift
WARNING: shift/reduce conflict for PRINCIPAL in state 15 resolved as shift
WARNING: shift/reduce conflict for DEF in state 16 resolved as shift
WARNING: shift/reduce conflict for COMMENT in state 19 resolved as shift
WARNING: shift/reduce conflict for DEF in state 46 resolved as shift
WARNING: shift/reduce conflict for DEF in state 54 resolved as shift
WARNING: shift/reduce conflict for ALTER in state 56 resolved as shift
WARNING: shift/reduce conflict for CALL in state 56 resolved as shift
WARNING: shift/reduce conflict for ISTRUE in state 56 resolved as shift
WARNING: shift/reduce conflict for IF in state 56 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 56 resolved as shift
WARNING: shift/reduce conflict for PROC in state 56 resolved as shift
WARNING: shift/reduce conflict for MOVER in state 56 resolved as shift
WARNING: shift/reduce conflict for COMMENT in state 56 resolved as shift
WARNING: shift/reduce conflict for ID in state 56 resolved as shift
WARNING: shift/reduce conflict for NOT in state 56 resolved as shift
WARNING: shift/reduce conflict for ALEATORIO in state 56 resolved as shift
WARNING: shift/reduce conflict for REPEAT in state 56 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 56 resolved as shift
WARNING: shift/reduce conflict for UNTIL in state 56 resolved as shift
WARNING: shift/reduce conflict for CASE in state 56 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 56 resolved as shift
WARNING: shift/reduce conflict for ALTER in state 75 resolved as shift
WARNING: shift/reduce conflict for CALL in state 75 resolved as shift
WARNING: shift/reduce conflict for ISTRUE in state 75 resolved as shift
WARNING: shift/reduce conflict for IF in state 75 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 75 resolved as shift
WARNING: shift/reduce conflict for PROC in state 75 resolved as shift
WARNING: shift/reduce conflict for MOVER in state 75 resolved as shift
WARNING: shift/reduce conflict for COMMENT in state 75 resolved as shift
WARNING: shift/reduce conflict for ID in state 75 resolved as shift
WARNING: shift/reduce conflict for NOT in state 75 resolved as shift
WARNING: shift/reduce conflict for ALEATORIO in state 75 resolved as shift
WARNING: shift/reduce conflict for REPEAT in state 75 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 75 resolved as shift
WARNING: shift/reduce conflict for UNTIL in state 75 resolved as shift
WARNING: shift/reduce conflict for CASE in state 75 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 75 resolved as shift
WARNING: shift/reduce conflict for RPARENT in state 77 resolved as shift
WARNING: shift/reduce conflict for ALTER in state 86 resolved as shift
WARNING: shift/reduce conflict for CALL in state 86 resolved as shift
WARNING: shift/reduce conflict for ISTRUE in state 86 resolved as shift
WARNING: shift/reduce conflict for IF in state 86 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 86 resolved as shift
WARNING: shift/reduce conflict for PROC in state 86 resolved as shift
WARNING: shift/reduce conflict for MOVER in state 86 resolved as shift
WARNING: shift/reduce conflict for ID in state 86 resolved as shift
WARNING: shift/reduce conflict for NOT in state 86 resolved as shift
WARNING: shift/reduce conflict for ALEATORIO in state 86 resolved as shift
WARNING: shift/reduce conflict for REPEAT in state 86 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 86 resolved as shift
WARNING: shift/reduce conflict for UNTIL in state 86 resolved as shift
WARNING: shift/reduce conflict for CASE in state 86 resolved as shift
WARNING: shift/reduce conflict for DEF in state 86 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 86 resolved as shift
WARNING: shift/reduce conflict for COMMENT in state 86 resolved as shift
WARNING: shift/reduce conflict for RPARENT in state 99 resolved as shift
WARNING: shift/reduce conflict for LPARENT in state 99 resolved as shift
WARNING: shift/reduce conflict for RPARENT in state 101 resolved as shift
WARNING: shift/reduce conflict for ALTER in state 102 resolved as shift
WARNING: shift/reduce conflict for CALL in state 102 resolved as shift
WARNING: shift/reduce conflict for ISTRUE in state 102 resolved as shift
WARNING: shift/reduce conflict for IF in state 102 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 102 resolved as shift
WARNING: shift/reduce conflict for PROC in state 102 resolved as shift
WARNING: shift/reduce conflict for MOVER in state 102 resolved as shift
WARNING: shift/reduce conflict for COMMENT in state 102 resolved as shift
WARNING: shift/reduce conflict for ID in state 102 resolved as shift
WARNING: shift/reduce conflict for NOT in state 102 resolved as shift
WARNING: shift/reduce conflict for ALEATORIO in state 102 resolved as shift
WARNING: shift/reduce conflict for REPEAT in state 102 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 102 resolved as shift
WARNING: shift/reduce conflict for UNTIL in state 102 resolved as shift
WARNING: shift/reduce conflict for CASE in state 102 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 102 resolved as shift
WARNING: shift/reduce conflict for ALTER in state 105 resolved as shift
WARNING: shift/reduce conflict for CALL in state 105 resolved as shift
WARNING: shift/reduce conflict for ISTRUE in state 105 resolved as shift
WARNING: shift/reduce conflict for IF in state 105 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 105 resolved as shift
WARNING: shift/reduce conflict for PROC in state 105 resolved as shift
WARNING: shift/reduce conflict for MOVER in state 105 resolved as shift
WARNING: shift/reduce conflict for ID in state 105 resolved as shift
WARNING: shift/reduce conflict for NOT in state 105 resolved as shift
WARNING: shift/reduce conflict for ALEATORIO in state 105 resolved as shift
WARNING: shift/reduce conflict for REPEAT in state 105 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 105 resolved as shift
WARNING: shift/reduce conflict for UNTIL in state 105 resolved as shift
WARNING: shift/reduce conflict for CASE in state 105 resolved as shift
WARNING: shift/reduce conflict for DEF in state 105 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 105 resolved as shift
WARNING: shift/reduce conflict for COMMENT in state 105 resolved as shift
WARNING: shift/reduce conflict for DEF in state 118 resolved as shift
WARNING: shift/reduce conflict for DEF in state 127 resolved as shift
WARNING: shift/reduce conflict for DEF in state 133 resolved as shift
WARNING: shift/reduce conflict for DEF in state 141 resolved as shift
WARNING: shift/reduce conflict for DEF in state 142 resolved as shift
WARNING: shift/reduce conflict for DEF in state 143 resolved as shift
WARNING: shift/reduce conflict for DEF in state 148 resolved as shift
WARNING: shift/reduce conflict for DEF in state 149 resolved as shift
WARNING: shift/reduce conflict for DEF in state 153 resolved as shift
WARNING: shift/reduce conflict for DEF in state 154 resolved as shift
WARNING: shift/reduce conflict for DEF in state 156 resolved as shift
WARNING: shift/reduce conflict for DEF in state 157 resolved as shift
WARNING: shift/reduce conflict for DEF in state 158 resolved as shift
WARNING: shift/reduce conflict for DEF in state 159 resolved as shift
WARNING: shift/reduce conflict for DEF in state 160 resolved as shift
WARNING: shift/reduce conflict for DEF in state 162 resolved as shift
WARNING: shift/reduce conflict for DEF in state 167 resolved as shift
WARNING: shift/reduce conflict for DEF in state 173 resolved as shift
WARNING: shift/reduce conflict for DEF in state 176 resolved as shift
WARNING: shift/reduce conflict for DEF in state 177 resolved as shift
WARNING: shift/reduce conflict for DEF in state 178 resolved as shift
WARNING: shift/reduce conflict for DEF in state 187 resolved as shift
WARNING: shift/reduce conflict for DEF in state 188 resolved as shift
WARNING: shift/reduce conflict for DEF in state 190 resolved as shift
WARNING: shift/reduce conflict for DEF in state 192 resolved as shift
WARNING: shift/reduce conflict for DEF in state 193 resolved as shift
WARNING: shift/reduce conflict for DEF in state 206 resolved as shift
WARNING: shift/reduce conflict for DEF in state 207 resolved as shift
WARNING: shift/reduce conflict for DEF in state 212 resolved as shift
WARNING: shift/reduce conflict for DEF in state 215 resolved as shift
WARNING: shift/reduce conflict for DEF in state 218 resolved as shift
WARNING: reduce/reduce conflict in state 18 resolved using rule (statement -> empty)
WARNING: rejected rule (comment -> empty) in state 18
WARNING: reduce/reduce conflict in state 123 resolved using rule (varDecl -> empty)
WARNING: rejected rule (statement -> empty) in state 123
WARNING: reduce/reduce conflict in state 123 resolved using rule (varDecl -> empty)
WARNING: rejected rule (comment -> empty) in state 123
